
nucleo-l496-adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acd0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800ae80  0800ae80  0001ae80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af4c  0800af4c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800af4c  0800af4c  0001af4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af54  0800af54  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af54  0800af54  0001af54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af58  0800af58  0001af58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800af5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e94  200001f4  0800b150  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002088  0800b150  00022088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0d4  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f47  00000000  00000000  0003c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00040240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  00041838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e086  00000000  00000000  00042c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b70c  00000000  00000000  00070d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f9b4  00000000  00000000  0008c42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019bdde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f44  00000000  00000000  0019be30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ae68 	.word	0x0800ae68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	0800ae68 	.word	0x0800ae68

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fd50 	bl	800104e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f839 	bl	8000624 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005b2:	f000 f89b 	bl	80006ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 fa31 	bl	8000a1c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005ba:	f000 f9a1 	bl	8000900 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80005be:	f000 f8c5 	bl	800074c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80005c2:	f000 f9fb 	bl	80009bc <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f9c9 	bl	800095c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005ca:	f009 f995 	bl	80098f8 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 80005ce:	f000 f933 	bl	8000838 <MX_ADC2_Init>
//	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
//
//
//	  HAL_Delay(1);

	  HAL_ADC_Start(&hadc1);
 80005d2:	4811      	ldr	r0, [pc, #68]	; (8000618 <main+0x74>)
 80005d4:	f001 f924 	bl	8001820 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005dc:	480e      	ldr	r0, [pc, #56]	; (8000618 <main+0x74>)
 80005de:	f001 f9d9 	bl	8001994 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80005e2:	480d      	ldr	r0, [pc, #52]	; (8000618 <main+0x74>)
 80005e4:	f001 faae 	bl	8001b44 <HAL_ADC_GetValue>
 80005e8:	4603      	mov	r3, r0
 80005ea:	81fb      	strh	r3, [r7, #14]

	  sprintf(msg, "%hu\r\n", raw);
 80005ec:	89fa      	ldrh	r2, [r7, #14]
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	490a      	ldr	r1, [pc, #40]	; (800061c <main+0x78>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f009 ffca 	bl	800a58c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fdf8 	bl	80001f0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <main+0x7c>)
 800060c:	f005 f904 	bl	8005818 <HAL_UART_Transmit>
	  HAL_Delay(1);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 fd91 	bl	8001138 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000616:	e7dc      	b.n	80005d2 <main+0x2e>
 8000618:	20000210 	.word	0x20000210
 800061c:	0800ae80 	.word	0x0800ae80
 8000620:	20000364 	.word	0x20000364

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b096      	sub	sp, #88	; 0x58
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2244      	movs	r2, #68	; 0x44
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f009 ffa2 	bl	800a57c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000646:	f44f 7000 	mov.w	r0, #512	; 0x200
 800064a:	f003 fd09 	bl	8004060 <HAL_PWREx_ControlVoltageScaling>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000654:	f000 fa86 	bl	8000b64 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000658:	f003 fce4 	bl	8004024 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xc4>)
 800065e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000662:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xc4>)
 8000664:	f023 0318 	bic.w	r3, r3, #24
 8000668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800066c:	2314      	movs	r3, #20
 800066e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800067c:	2360      	movs	r3, #96	; 0x60
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000684:	2301      	movs	r3, #1
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000688:	2301      	movs	r3, #1
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 800068c:	2347      	movs	r3, #71	; 0x47
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000698:	2306      	movs	r3, #6
 800069a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fd53 	bl	800414c <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006ac:	f000 fa5a 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2303      	movs	r3, #3
 80006b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 f958 	bl	8004980 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006d6:	f000 fa45 	bl	8000b64 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006da:	f004 fe71 	bl	80053c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006de:	bf00      	nop
 80006e0:	3758      	adds	r7, #88	; 0x58
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000

080006ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0a4      	sub	sp, #144	; 0x90
 80006f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	228c      	movs	r2, #140	; 0x8c
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f009 ff3f 	bl	800a57c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80006fe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000702:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000704:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800070c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000710:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000712:	2301      	movs	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000716:	2301      	movs	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800071a:	2318      	movs	r3, #24
 800071c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800072a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800072e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fb48 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800073e:	f000 fa11 	bl	8000b64 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3790      	adds	r7, #144	; 0x90
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <MX_ADC1_Init+0xe0>)
 8000770:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <MX_ADC1_Init+0xe4>)
 8000772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000774:	4b2d      	ldr	r3, [pc, #180]	; (800082c <MX_ADC1_Init+0xe0>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_ADC1_Init+0xe0>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000780:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_ADC1_Init+0xe0>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_ADC1_Init+0xe0>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078c:	4b27      	ldr	r3, [pc, #156]	; (800082c <MX_ADC1_Init+0xe0>)
 800078e:	2204      	movs	r2, #4
 8000790:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_ADC1_Init+0xe0>)
 8000794:	2200      	movs	r2, #0
 8000796:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_ADC1_Init+0xe0>)
 800079a:	2200      	movs	r2, #0
 800079c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_ADC1_Init+0xe0>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_ADC1_Init+0xe0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_ADC1_Init+0xe0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_ADC1_Init+0xe0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_ADC1_Init+0xe0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_ADC1_Init+0xe0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_ADC1_Init+0xe0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ce:	4817      	ldr	r0, [pc, #92]	; (800082c <MX_ADC1_Init+0xe0>)
 80007d0:	f000 fecc 	bl	800156c <HAL_ADC_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007da:	f000 f9c3 	bl	8000b64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <MX_ADC1_Init+0xe0>)
 80007ea:	f001 fe71 	bl	80024d0 <HAL_ADCEx_MultiModeConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007f4:	f000 f9b6 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_ADC1_Init+0xe8>)
 80007fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007fc:	2306      	movs	r3, #6
 80007fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000804:	237f      	movs	r3, #127	; 0x7f
 8000806:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000808:	2304      	movs	r3, #4
 800080a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_ADC1_Init+0xe0>)
 8000816:	f001 f9a3 	bl	8001b60 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000820:	f000 f9a0 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000210 	.word	0x20000210
 8000830:	50040000 	.word	0x50040000
 8000834:	21800100 	.word	0x21800100

08000838 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800084e:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <MX_ADC2_Init+0xbc>)
 8000850:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <MX_ADC2_Init+0xc0>)
 8000852:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <MX_ADC2_Init+0xbc>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_ADC2_Init+0xbc>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000860:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <MX_ADC2_Init+0xbc>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MX_ADC2_Init+0xbc>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_ADC2_Init+0xbc>)
 800086e:	2204      	movs	r2, #4
 8000870:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <MX_ADC2_Init+0xbc>)
 8000874:	2200      	movs	r2, #0
 8000876:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_ADC2_Init+0xbc>)
 800087a:	2200      	movs	r2, #0
 800087c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_ADC2_Init+0xbc>)
 8000880:	2201      	movs	r2, #1
 8000882:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_ADC2_Init+0xbc>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ADC2_Init+0xbc>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_ADC2_Init+0xbc>)
 8000894:	2200      	movs	r2, #0
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_ADC2_Init+0xbc>)
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_ADC2_Init+0xbc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_ADC2_Init+0xbc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008ae:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_ADC2_Init+0xbc>)
 80008b0:	f000 fe5c 	bl	800156c <HAL_ADC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80008ba:	f000 f953 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_ADC2_Init+0xc4>)
 80008c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c2:	2306      	movs	r3, #6
 80008c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ca:	237f      	movs	r3, #127	; 0x7f
 80008cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ce:	2304      	movs	r3, #4
 80008d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_ADC2_Init+0xbc>)
 80008dc:	f001 f940 	bl	8001b60 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80008e6:	f000 f93d 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000278 	.word	0x20000278
 80008f8:	50040100 	.word	0x50040100
 80008fc:	04300002 	.word	0x04300002

08000900 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_LPUART1_UART_Init+0x50>)
 8000906:	4a13      	ldr	r2, [pc, #76]	; (8000954 <MX_LPUART1_UART_Init+0x54>)
 8000908:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_LPUART1_UART_Init+0x50>)
 800090c:	4a12      	ldr	r2, [pc, #72]	; (8000958 <MX_LPUART1_UART_Init+0x58>)
 800090e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_LPUART1_UART_Init+0x50>)
 8000912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000916:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_LPUART1_UART_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_LPUART1_UART_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_LPUART1_UART_Init+0x50>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_LPUART1_UART_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_LPUART1_UART_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_LPUART1_UART_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_LPUART1_UART_Init+0x50>)
 800093e:	f004 ff1d 	bl	800577c <HAL_UART_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000948:	f000 f90c 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200002e0 	.word	0x200002e0
 8000954:	40008000 	.word	0x40008000
 8000958:	00033324 	.word	0x00033324

0800095c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART2_UART_Init+0x58>)
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_USART2_UART_Init+0x5c>)
 8000964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_USART2_UART_Init+0x58>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART2_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_USART2_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART2_UART_Init+0x58>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART2_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USART2_UART_Init+0x58>)
 80009a0:	f004 feec 	bl	800577c <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009aa:	f000 f8db 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000364 	.word	0x20000364
 80009b8:	40004400 	.word	0x40004400

080009bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <MX_USART3_UART_Init+0x5c>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 8000a00:	f004 febc 	bl	800577c <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f000 f8ab 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200003e8 	.word	0x200003e8
 8000a18:	40004800 	.word	0x40004800

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b48      	ldr	r3, [pc, #288]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a47      	ldr	r2, [pc, #284]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b45      	ldr	r3, [pc, #276]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	4b42      	ldr	r3, [pc, #264]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a41      	ldr	r2, [pc, #260]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b3f      	ldr	r3, [pc, #252]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a3b      	ldr	r2, [pc, #236]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b39      	ldr	r3, [pc, #228]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a35      	ldr	r2, [pc, #212]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a29      	ldr	r2, [pc, #164]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000ac2:	f003 fb33 	bl	800412c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000acc:	4822      	ldr	r0, [pc, #136]	; (8000b58 <MX_GPIO_Init+0x13c>)
 8000ace:	f002 f8d1 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	4821      	ldr	r0, [pc, #132]	; (8000b5c <MX_GPIO_Init+0x140>)
 8000ad8:	f002 f8cc 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	481b      	ldr	r0, [pc, #108]	; (8000b60 <MX_GPIO_Init+0x144>)
 8000af4:	f001 ff2c 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000af8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_GPIO_Init+0x13c>)
 8000b12:	f001 ff1d 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b16:	2320      	movs	r3, #32
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <MX_GPIO_Init+0x140>)
 8000b2a:	f001 ff11 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b2e:	2340      	movs	r3, #64	; 0x40
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_GPIO_Init+0x140>)
 8000b46:	f001 ff03 	bl	8002950 <HAL_GPIO_Init>

}
 8000b4a:	bf00      	nop
 8000b4c:	3730      	adds	r7, #48	; 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48001800 	.word	0x48001800
 8000b60:	48000800 	.word	0x48000800

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6613      	str	r3, [r2, #96]	; 0x60
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a33      	ldr	r2, [pc, #204]	; (8000ca4 <HAL_ADC_MspInit+0xec>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12e      	bne.n	8000c38 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000bda:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	4a31      	ldr	r2, [pc, #196]	; (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000be2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d10b      	bne.n	8000c04 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	4a2e      	ldr	r2, [pc, #184]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000bf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b29      	ldr	r3, [pc, #164]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c08:	4a28      	ldr	r2, [pc, #160]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c20:	2303      	movs	r3, #3
 8000c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c32:	f001 fe8d 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c36:	e031      	b.n	8000c9c <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <HAL_ADC_MspInit+0xf8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12c      	bne.n	8000c9c <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000c4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d10b      	bne.n	8000c6c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <HAL_ADC_MspInit+0xfc>)
 8000c98:	f001 fe5a 	bl	8002950 <HAL_GPIO_Init>
}
 8000c9c:	bf00      	nop
 8000c9e:	3730      	adds	r7, #48	; 0x30
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	50040000 	.word	0x50040000
 8000ca8:	2000046c 	.word	0x2000046c
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	50040100 	.word	0x50040100
 8000cb4:	48000800 	.word	0x48000800

08000cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0b0      	sub	sp, #192	; 0xc0
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	228c      	movs	r2, #140	; 0x8c
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f009 fc4f 	bl	800a57c <memset>
  if(huart->Instance==LPUART1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a78      	ldr	r2, [pc, #480]	; (8000ec4 <HAL_UART_MspInit+0x20c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d13e      	bne.n	8000d66 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ce8:	2320      	movs	r3, #32
 8000cea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf0:	f107 0320 	add.w	r3, r7, #32
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 f867 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d00:	f7ff ff30 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d04:	4b70      	ldr	r3, [pc, #448]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d08:	4a6f      	ldr	r2, [pc, #444]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d10:	4b6d      	ldr	r3, [pc, #436]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1c:	4b6a      	ldr	r3, [pc, #424]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d20:	4a69      	ldr	r2, [pc, #420]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d28:	4b67      	ldr	r3, [pc, #412]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8000d34:	f003 f9fa 	bl	800412c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d38:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d52:	2308      	movs	r3, #8
 8000d54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	485b      	ldr	r0, [pc, #364]	; (8000ecc <HAL_UART_MspInit+0x214>)
 8000d60:	f001 fdf6 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d64:	e0a9      	b.n	8000eba <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART2)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a59      	ldr	r2, [pc, #356]	; (8000ed0 <HAL_UART_MspInit+0x218>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d15b      	bne.n	8000e28 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 f823 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000d88:	f7ff feec 	bl	8000b64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8c:	4b4e      	ldr	r3, [pc, #312]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d90:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d96:	6593      	str	r3, [r2, #88]	; 0x58
 8000d98:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b48      	ldr	r3, [pc, #288]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	4a47      	ldr	r2, [pc, #284]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db0:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f001 fdb4 	bl	8002950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e02:	2303      	movs	r3, #3
 8000e04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f001 fd9d 	bl	8002950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2026      	movs	r0, #38	; 0x26
 8000e1c:	f001 fce3 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e20:	2026      	movs	r0, #38	; 0x26
 8000e22:	f001 fcfc 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 8000e26:	e048      	b.n	8000eba <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART3)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a29      	ldr	r2, [pc, #164]	; (8000ed4 <HAL_UART_MspInit+0x21c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d143      	bne.n	8000eba <HAL_UART_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e32:	2304      	movs	r3, #4
 8000e34:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 ffc2 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_UART_MspInit+0x196>
      Error_Handler();
 8000e4a:	f7ff fe8b 	bl	8000b64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e58:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_UART_MspInit+0x210>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <HAL_UART_MspInit+0x220>)
 8000ea6:	f001 fd53 	bl	8002950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2027      	movs	r0, #39	; 0x27
 8000eb0:	f001 fc99 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eb4:	2027      	movs	r0, #39	; 0x27
 8000eb6:	f001 fcb2 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	37c0      	adds	r7, #192	; 0xc0
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40008000 	.word	0x40008000
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	48001800 	.word	0x48001800
 8000ed0:	40004400 	.word	0x40004400
 8000ed4:	40004800 	.word	0x40004800
 8000ed8:	48000c00 	.word	0x48000c00

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f8e6 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <USART2_IRQHandler+0x10>)
 8000f36:	f004 fd03 	bl	8005940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000364 	.word	0x20000364

08000f44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <USART3_IRQHandler+0x10>)
 8000f4a:	f004 fcf9 	bl	8005940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200003e8 	.word	0x200003e8

08000f58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <OTG_FS_IRQHandler+0x10>)
 8000f5e:	f001 fff4 	bl	8002f4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000194c 	.word	0x2000194c

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f009 fac4 	bl	800a528 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20050000 	.word	0x20050000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	20000470 	.word	0x20000470
 8000fd4:	20002088 	.word	0x20002088

08000fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001000:	f7ff ffea 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <LoopForever+0x6>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	; (800103c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <LoopForever+0xe>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	; (8001048 <LoopForever+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f009 fa83 	bl	800a534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102e:	f7ff fab9 	bl	80005a4 <main>

08001032 <LoopForever>:

LoopForever:
    b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001034:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001040:	0800af5c 	.word	0x0800af5c
  ldr r2, =_sbss
 8001044:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001048:	20002088 	.word	0x20002088

0800104c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_2_IRQHandler>

0800104e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f001 fbb9 	bl	80027d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f80e 	bl	8001080 <HAL_InitTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e001      	b.n	8001074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001070:	f7ff fd7e 	bl	8000b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001074:	79fb      	ldrb	r3, [r7, #7]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_InitTick+0x6c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d023      	beq.n	80010dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_InitTick+0x70>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_InitTick+0x6c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fbc5 	bl	800283a <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10f      	bne.n	80010d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d809      	bhi.n	80010d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c4:	f001 fb8f 	bl	80027e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_InitTick+0x74>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e007      	b.n	80010e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e004      	b.n	80010e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e001      	b.n	80010e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	20000474 	.word	0x20000474

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000474 	.word	0x20000474

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	609a      	str	r2, [r3, #8]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3360      	adds	r3, #96	; 0x60
 80011fa:	461a      	mov	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <LL_ADC_SetOffset+0x44>)
 800120a:	4013      	ands	r3, r2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	4313      	orrs	r3, r2
 8001218:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	03fff000 	.word	0x03fff000

08001230 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3360      	adds	r3, #96	; 0x60
 800123e:	461a      	mov	r2, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3360      	adds	r3, #96	; 0x60
 800126c:	461a      	mov	r2, r3
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	431a      	orrs	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001286:	bf00      	nop
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	615a      	str	r2, [r3, #20]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012de:	b480      	push	{r7}
 80012e0:	b087      	sub	sp, #28
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3330      	adds	r3, #48	; 0x30
 80012ee:	461a      	mov	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	4413      	add	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	211f      	movs	r1, #31
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	401a      	ands	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	0e9b      	lsrs	r3, r3, #26
 8001316:	f003 011f 	and.w	r1, r3, #31
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	431a      	orrs	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800132a:	bf00      	nop
 800132c:	371c      	adds	r7, #28
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001336:	b480      	push	{r7}
 8001338:	b087      	sub	sp, #28
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3314      	adds	r3, #20
 8001346:	461a      	mov	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	0e5b      	lsrs	r3, r3, #25
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	0d1b      	lsrs	r3, r3, #20
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	2107      	movs	r1, #7
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	401a      	ands	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	0d1b      	lsrs	r3, r3, #20
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	431a      	orrs	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001380:	bf00      	nop
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a4:	43db      	mvns	r3, r3
 80013a6:	401a      	ands	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0318 	and.w	r3, r3, #24
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013b0:	40d9      	lsrs	r1, r3
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	400b      	ands	r3, r1
 80013b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ba:	431a      	orrs	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	0007ffff 	.word	0x0007ffff

080013d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 031f 	and.w	r3, r3, #31
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800141c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6093      	str	r3, [r2, #8]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001444:	d101      	bne.n	800144a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001468:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800146c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001494:	d101      	bne.n	800149a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <LL_ADC_IsEnabled+0x18>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <LL_ADC_IsEnabled+0x1a>
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001506:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800150a:	f043 0204 	orr.w	r2, r3, #4
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b04      	cmp	r3, #4
 8001530:	d101      	bne.n	8001536 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b08      	cmp	r3, #8
 8001556:	d101      	bne.n	800155c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e139      	b.n	80017fa <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	2b00      	cmp	r3, #0
 8001592:	d109      	bne.n	80015a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fb0f 	bl	8000bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff3f 	bl	8001430 <LL_ADC_IsDeepPowerDownEnabled>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d004      	beq.n	80015c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff25 	bl	800140c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff5a 	bl	8001480 <LL_ADC_IsInternalRegulatorEnabled>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d115      	bne.n	80015fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff3e 	bl	8001458 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015dc:	4b89      	ldr	r3, [pc, #548]	; (8001804 <HAL_ADC_Init+0x298>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	099b      	lsrs	r3, r3, #6
 80015e2:	4a89      	ldr	r2, [pc, #548]	; (8001808 <HAL_ADC_Init+0x29c>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	099b      	lsrs	r3, r3, #6
 80015ea:	3301      	adds	r3, #1
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015f0:	e002      	b.n	80015f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f9      	bne.n	80015f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff3c 	bl	8001480 <LL_ADC_IsInternalRegulatorEnabled>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10d      	bne.n	800162a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f043 0210 	orr.w	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161e:	f043 0201 	orr.w	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff75 	bl	800151e <LL_ADC_REG_IsConversionOngoing>
 8001634:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 80d2 	bne.w	80017e8 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 80ce 	bne.w	80017e8 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001650:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001654:	f043 0202 	orr.w	r2, r3, #2
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff35 	bl	80014d0 <LL_ADC_IsEnabled>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d115      	bne.n	8001698 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800166c:	4867      	ldr	r0, [pc, #412]	; (800180c <HAL_ADC_Init+0x2a0>)
 800166e:	f7ff ff2f 	bl	80014d0 <LL_ADC_IsEnabled>
 8001672:	4604      	mov	r4, r0
 8001674:	4866      	ldr	r0, [pc, #408]	; (8001810 <HAL_ADC_Init+0x2a4>)
 8001676:	f7ff ff2b 	bl	80014d0 <LL_ADC_IsEnabled>
 800167a:	4603      	mov	r3, r0
 800167c:	431c      	orrs	r4, r3
 800167e:	4865      	ldr	r0, [pc, #404]	; (8001814 <HAL_ADC_Init+0x2a8>)
 8001680:	f7ff ff26 	bl	80014d0 <LL_ADC_IsEnabled>
 8001684:	4603      	mov	r3, r0
 8001686:	4323      	orrs	r3, r4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4619      	mov	r1, r3
 8001692:	4861      	ldr	r0, [pc, #388]	; (8001818 <HAL_ADC_Init+0x2ac>)
 8001694:	f7ff fd74 	bl	8001180 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7e5b      	ldrb	r3, [r3, #25]
 800169c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d106      	bne.n	80016d4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	3b01      	subs	r3, #1
 80016cc:	045b      	lsls	r3, r3, #17
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d009      	beq.n	80016f0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	4b49      	ldr	r3, [pc, #292]	; (800181c <HAL_ADC_Init+0x2b0>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	430b      	orrs	r3, r1
 8001702:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff08 	bl	800151e <LL_ADC_REG_IsConversionOngoing>
 800170e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff15 	bl	8001544 <LL_ADC_INJ_IsConversionOngoing>
 800171a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d140      	bne.n	80017a4 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d13d      	bne.n	80017a4 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7e1b      	ldrb	r3, [r3, #24]
 8001730:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001732:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800173a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800174a:	f023 0306 	bic.w	r3, r3, #6
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	69b9      	ldr	r1, [r7, #24]
 8001754:	430b      	orrs	r3, r1
 8001756:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800175e:	2b01      	cmp	r3, #1
 8001760:	d118      	bne.n	8001794 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001778:	4311      	orrs	r1, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800177e:	4311      	orrs	r1, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001784:	430a      	orrs	r2, r1
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 0201 	orr.w	r2, r2, #1
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	e007      	b.n	80017a4 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691a      	ldr	r2, [r3, #16]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10c      	bne.n	80017c6 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f023 010f 	bic.w	r1, r3, #15
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	1e5a      	subs	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
 80017c4:	e007      	b.n	80017d6 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 020f 	bic.w	r2, r2, #15
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	f023 0303 	bic.w	r3, r3, #3
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	659a      	str	r2, [r3, #88]	; 0x58
 80017e6:	e007      	b.n	80017f8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	f043 0210 	orr.w	r2, r3, #16
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop
 8001804:	20000000 	.word	0x20000000
 8001808:	053e2d63 	.word	0x053e2d63
 800180c:	50040000 	.word	0x50040000
 8001810:	50040100 	.word	0x50040100
 8001814:	50040200 	.word	0x50040200
 8001818:	50040300 	.word	0x50040300
 800181c:	fff0c007 	.word	0xfff0c007

08001820 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001828:	4857      	ldr	r0, [pc, #348]	; (8001988 <HAL_ADC_Start+0x168>)
 800182a:	f7ff fdd3 	bl	80013d4 <LL_ADC_GetMultimode>
 800182e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fe72 	bl	800151e <LL_ADC_REG_IsConversionOngoing>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 809c 	bne.w	800197a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_ADC_Start+0x30>
 800184c:	2302      	movs	r3, #2
 800184e:	e097      	b.n	8001980 <HAL_ADC_Start+0x160>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fd8d 	bl	8002378 <ADC_Enable>
 800185e:	4603      	mov	r3, r0
 8001860:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f040 8083 	bne.w	8001970 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a42      	ldr	r2, [pc, #264]	; (800198c <HAL_ADC_Start+0x16c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d002      	beq.n	800188e <HAL_ADC_Start+0x6e>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	e000      	b.n	8001890 <HAL_ADC_Start+0x70>
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <HAL_ADC_Start+0x170>)
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	4293      	cmp	r3, r2
 8001896:	d002      	beq.n	800189e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b6:	d106      	bne.n	80018c6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	f023 0206 	bic.w	r2, r3, #6
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80018c4:	e002      	b.n	80018cc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	221c      	movs	r2, #28
 80018d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2a      	ldr	r2, [pc, #168]	; (800198c <HAL_ADC_Start+0x16c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d002      	beq.n	80018ec <HAL_ADC_Start+0xcc>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	e000      	b.n	80018ee <HAL_ADC_Start+0xce>
 80018ec:	4b28      	ldr	r3, [pc, #160]	; (8001990 <HAL_ADC_Start+0x170>)
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d008      	beq.n	8001908 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	2b05      	cmp	r3, #5
 8001900:	d002      	beq.n	8001908 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	2b09      	cmp	r3, #9
 8001906:	d114      	bne.n	8001932 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800191e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fde3 	bl	80014f6 <LL_ADC_REG_StartConversion>
 8001930:	e025      	b.n	800197e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <HAL_ADC_Start+0x16c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d002      	beq.n	800194e <HAL_ADC_Start+0x12e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	e000      	b.n	8001950 <HAL_ADC_Start+0x130>
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_ADC_Start+0x170>)
 8001950:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00f      	beq.n	800197e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001966:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	659a      	str	r2, [r3, #88]	; 0x58
 800196e:	e006      	b.n	800197e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001978:	e001      	b.n	800197e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800197a:	2302      	movs	r3, #2
 800197c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800197e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	50040300 	.word	0x50040300
 800198c:	50040100 	.word	0x50040100
 8001990:	50040000 	.word	0x50040000

08001994 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800199e:	4866      	ldr	r0, [pc, #408]	; (8001b38 <HAL_ADC_PollForConversion+0x1a4>)
 80019a0:	f7ff fd18 	bl	80013d4 <LL_ADC_GetMultimode>
 80019a4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d102      	bne.n	80019b4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019ae:	2308      	movs	r3, #8
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e02a      	b.n	8001a0a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d002      	beq.n	80019c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2b09      	cmp	r3, #9
 80019c4:	d111      	bne.n	80019ea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	f043 0220 	orr.w	r2, r3, #32
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0a4      	b.n	8001b2e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019e4:	2304      	movs	r3, #4
 80019e6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019e8:	e00f      	b.n	8001a0a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019ea:	4853      	ldr	r0, [pc, #332]	; (8001b38 <HAL_ADC_PollForConversion+0x1a4>)
 80019ec:	f7ff fd00 	bl	80013f0 <LL_ADC_GetMultiDMATransfer>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	f043 0220 	orr.w	r2, r3, #32
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e093      	b.n	8001b2e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a06:	2304      	movs	r3, #4
 8001a08:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a0a:	f7ff fb89 	bl	8001120 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a10:	e021      	b.n	8001a56 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a18:	d01d      	beq.n	8001a56 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a1a:	f7ff fb81 	bl	8001120 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d302      	bcc.n	8001a30 <HAL_ADC_PollForConversion+0x9c>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d112      	bne.n	8001a56 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10b      	bne.n	8001a56 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e06b      	b.n	8001b2e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0d6      	beq.n	8001a12 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fc1f 	bl	80012b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01c      	beq.n	8001aba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7e5b      	ldrb	r3, [r3, #25]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d118      	bne.n	8001aba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d111      	bne.n	8001aba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_ADC_PollForConversion+0x1a8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d002      	beq.n	8001aca <HAL_ADC_PollForConversion+0x136>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	e000      	b.n	8001acc <HAL_ADC_PollForConversion+0x138>
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_ADC_PollForConversion+0x1ac>)
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d008      	beq.n	8001ae6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d002      	beq.n	8001ae6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d104      	bne.n	8001af0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	e00c      	b.n	8001b0a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <HAL_ADC_PollForConversion+0x1a8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d002      	beq.n	8001b00 <HAL_ADC_PollForConversion+0x16c>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e000      	b.n	8001b02 <HAL_ADC_PollForConversion+0x16e>
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_ADC_PollForConversion+0x1ac>)
 8001b02:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d104      	bne.n	8001b1a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2208      	movs	r2, #8
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	e008      	b.n	8001b2c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d103      	bne.n	8001b2c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	220c      	movs	r2, #12
 8001b2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	50040300 	.word	0x50040300
 8001b3c:	50040100 	.word	0x50040100
 8001b40:	50040000 	.word	0x50040000

08001b44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0b6      	sub	sp, #216	; 0xd8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x22>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e3e3      	b.n	800234a <HAL_ADC_ConfigChannel+0x7ea>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fcc5 	bl	800151e <LL_ADC_REG_IsConversionOngoing>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 83c4 	bne.w	8002324 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d824      	bhi.n	8001bee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	3b02      	subs	r3, #2
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d81b      	bhi.n	8001be6 <HAL_ADC_ConfigChannel+0x86>
 8001bae:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <HAL_ADC_ConfigChannel+0x54>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001bc5 	.word	0x08001bc5
 8001bb8:	08001bcd 	.word	0x08001bcd
 8001bbc:	08001bd5 	.word	0x08001bd5
 8001bc0:	08001bdd 	.word	0x08001bdd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	605a      	str	r2, [r3, #4]
          break;
 8001bca:	e011      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2212      	movs	r2, #18
 8001bd0:	605a      	str	r2, [r3, #4]
          break;
 8001bd2:	e00d      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2218      	movs	r2, #24
 8001bd8:	605a      	str	r2, [r3, #4]
          break;
 8001bda:	e009      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be2:	605a      	str	r2, [r3, #4]
          break;
 8001be4:	e004      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2206      	movs	r2, #6
 8001bea:	605a      	str	r2, [r3, #4]
          break;
 8001bec:	e000      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001bee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f7ff fb6e 	bl	80012de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fc89 	bl	800151e <LL_ADC_REG_IsConversionOngoing>
 8001c0c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fc95 	bl	8001544 <LL_ADC_INJ_IsConversionOngoing>
 8001c1a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 81c1 	bne.w	8001faa <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f040 81bc 	bne.w	8001faa <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c3a:	d10f      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7ff fb75 	bl	8001336 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fb1c 	bl	8001292 <LL_ADC_SetSamplingTimeCommonConfig>
 8001c5a:	e00e      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6819      	ldr	r1, [r3, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f7ff fb64 	bl	8001336 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fb0c 	bl	8001292 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	08db      	lsrs	r3, r3, #3
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d00a      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6919      	ldr	r1, [r3, #16]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cac:	f7ff fa9c 	bl	80011e8 <LL_ADC_SetOffset>
 8001cb0:	e17b      	b.n	8001faa <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fab9 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10a      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x17e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff faae 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	0e9b      	lsrs	r3, r3, #26
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	e01e      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x1bc>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff faa3 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	e004      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001d10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1d4>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0e9b      	lsrs	r3, r3, #26
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	e018      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x206>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	e004      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001d5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d106      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fa72 	bl	800125c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fa56 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10a      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x244>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2101      	movs	r1, #1
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fa4b 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	0e9b      	lsrs	r3, r3, #26
 8001d9e:	f003 021f 	and.w	r2, r3, #31
 8001da2:	e01e      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x282>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fa40 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001dc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001dd2:	2320      	movs	r3, #32
 8001dd4:	e004      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001dd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x29a>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	0e9b      	lsrs	r3, r3, #26
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	e018      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x2cc>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	e004      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001e22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d106      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2200      	movs	r2, #0
 8001e36:	2101      	movs	r1, #1
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fa0f 	bl	800125c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2102      	movs	r1, #2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f9f3 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10a      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x30a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2102      	movs	r1, #2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f9e8 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001e60:	4603      	mov	r3, r0
 8001e62:	0e9b      	lsrs	r3, r3, #26
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	e01e      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x348>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2102      	movs	r1, #2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f9dd 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	e004      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x360>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0e9b      	lsrs	r3, r3, #26
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	e016      	b.n	8001eee <HAL_ADC_ConfigChannel+0x38e>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ed2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	e004      	b.n	8001eee <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d106      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f9ae 	bl	800125c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2103      	movs	r1, #3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f992 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10a      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x3cc>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f987 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	f003 021f 	and.w	r2, r3, #31
 8001f2a:	e017      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x3fc>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2103      	movs	r1, #3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f97c 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f46:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e003      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d105      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x414>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	e011      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x438>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f84:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	e003      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d106      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2103      	movs	r1, #3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f959 	bl	800125c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fa8e 	bl	80014d0 <LL_ADC_IsEnabled>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 8140 	bne.w	800223c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f7ff f9df 	bl	800138c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	4a8f      	ldr	r2, [pc, #572]	; (8002210 <HAL_ADC_ConfigChannel+0x6b0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	f040 8131 	bne.w	800223c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10b      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x4a2>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0e9b      	lsrs	r3, r3, #26
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	2b09      	cmp	r3, #9
 8001ff8:	bf94      	ite	ls
 8001ffa:	2301      	movls	r3, #1
 8001ffc:	2300      	movhi	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	e019      	b.n	8002036 <HAL_ADC_ConfigChannel+0x4d6>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002012:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800201a:	2320      	movs	r3, #32
 800201c:	e003      	b.n	8002026 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800201e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	3301      	adds	r3, #1
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	2b09      	cmp	r3, #9
 800202e:	bf94      	ite	ls
 8002030:	2301      	movls	r3, #1
 8002032:	2300      	movhi	r3, #0
 8002034:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002036:	2b00      	cmp	r3, #0
 8002038:	d079      	beq.n	800212e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002042:	2b00      	cmp	r3, #0
 8002044:	d107      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x4f6>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	3301      	adds	r3, #1
 800204e:	069b      	lsls	r3, r3, #26
 8002050:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002054:	e015      	b.n	8002082 <HAL_ADC_ConfigChannel+0x522>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002066:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800206e:	2320      	movs	r3, #32
 8002070:	e003      	b.n	800207a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	3301      	adds	r3, #1
 800207c:	069b      	lsls	r3, r3, #26
 800207e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x542>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0e9b      	lsrs	r3, r3, #26
 8002094:	3301      	adds	r3, #1
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	e017      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x572>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80020b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80020b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80020ba:	2320      	movs	r3, #32
 80020bc:	e003      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80020be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	ea42 0103 	orr.w	r1, r2, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10a      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x598>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	3301      	adds	r3, #1
 80020ea:	f003 021f 	and.w	r2, r3, #31
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	051b      	lsls	r3, r3, #20
 80020f6:	e018      	b.n	800212a <HAL_ADC_ConfigChannel+0x5ca>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002108:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800210a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002110:	2320      	movs	r3, #32
 8002112:	e003      	b.n	800211c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3301      	adds	r3, #1
 800211e:	f003 021f 	and.w	r2, r3, #31
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800212a:	430b      	orrs	r3, r1
 800212c:	e081      	b.n	8002232 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002136:	2b00      	cmp	r3, #0
 8002138:	d107      	bne.n	800214a <HAL_ADC_ConfigChannel+0x5ea>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0e9b      	lsrs	r3, r3, #26
 8002140:	3301      	adds	r3, #1
 8002142:	069b      	lsls	r3, r3, #26
 8002144:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002148:	e015      	b.n	8002176 <HAL_ADC_ConfigChannel+0x616>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800215c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e003      	b.n	800216e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	3301      	adds	r3, #1
 8002170:	069b      	lsls	r3, r3, #26
 8002172:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x636>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	0e9b      	lsrs	r3, r3, #26
 8002188:	3301      	adds	r3, #1
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2101      	movs	r1, #1
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	e017      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x666>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	61fb      	str	r3, [r7, #28]
  return result;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80021ae:	2320      	movs	r3, #32
 80021b0:	e003      	b.n	80021ba <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	3301      	adds	r3, #1
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	2101      	movs	r1, #1
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	ea42 0103 	orr.w	r1, r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10d      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x692>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0e9b      	lsrs	r3, r3, #26
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 021f 	and.w	r2, r3, #31
 80021e2:	4613      	mov	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4413      	add	r3, r2
 80021e8:	3b1e      	subs	r3, #30
 80021ea:	051b      	lsls	r3, r3, #20
 80021ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021f0:	e01e      	b.n	8002230 <HAL_ADC_ConfigChannel+0x6d0>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	613b      	str	r3, [r7, #16]
  return result;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d104      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800220a:	2320      	movs	r3, #32
 800220c:	e006      	b.n	800221c <HAL_ADC_ConfigChannel+0x6bc>
 800220e:	bf00      	nop
 8002210:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f003 021f 	and.w	r2, r3, #31
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	3b1e      	subs	r3, #30
 800222a:	051b      	lsls	r3, r3, #20
 800222c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002230:	430b      	orrs	r3, r1
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	6892      	ldr	r2, [r2, #8]
 8002236:	4619      	mov	r1, r3
 8002238:	f7ff f87d 	bl	8001336 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b44      	ldr	r3, [pc, #272]	; (8002354 <HAL_ADC_ConfigChannel+0x7f4>)
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d07a      	beq.n	800233e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002248:	4843      	ldr	r0, [pc, #268]	; (8002358 <HAL_ADC_ConfigChannel+0x7f8>)
 800224a:	f7fe ffbf 	bl	80011cc <LL_ADC_GetCommonPathInternalCh>
 800224e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a41      	ldr	r2, [pc, #260]	; (800235c <HAL_ADC_ConfigChannel+0x7fc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d12c      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800225c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d126      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a3c      	ldr	r2, [pc, #240]	; (8002360 <HAL_ADC_ConfigChannel+0x800>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d004      	beq.n	800227c <HAL_ADC_ConfigChannel+0x71c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a3b      	ldr	r2, [pc, #236]	; (8002364 <HAL_ADC_ConfigChannel+0x804>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d15d      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800227c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002280:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002284:	4619      	mov	r1, r3
 8002286:	4834      	ldr	r0, [pc, #208]	; (8002358 <HAL_ADC_ConfigChannel+0x7f8>)
 8002288:	f7fe ff8d 	bl	80011a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <HAL_ADC_ConfigChannel+0x808>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	4a36      	ldr	r2, [pc, #216]	; (800236c <HAL_ADC_ConfigChannel+0x80c>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022a6:	e002      	b.n	80022ae <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f9      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022b4:	e040      	b.n	8002338 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2d      	ldr	r2, [pc, #180]	; (8002370 <HAL_ADC_ConfigChannel+0x810>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d118      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x792>
 80022c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d112      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a23      	ldr	r2, [pc, #140]	; (8002360 <HAL_ADC_ConfigChannel+0x800>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d004      	beq.n	80022e0 <HAL_ADC_ConfigChannel+0x780>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a22      	ldr	r2, [pc, #136]	; (8002364 <HAL_ADC_ConfigChannel+0x804>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d12d      	bne.n	800233c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e8:	4619      	mov	r1, r3
 80022ea:	481b      	ldr	r0, [pc, #108]	; (8002358 <HAL_ADC_ConfigChannel+0x7f8>)
 80022ec:	f7fe ff5b 	bl	80011a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022f0:	e024      	b.n	800233c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <HAL_ADC_ConfigChannel+0x814>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d120      	bne.n	800233e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d11a      	bne.n	800233e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_ADC_ConfigChannel+0x800>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d115      	bne.n	800233e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002312:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002316:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800231a:	4619      	mov	r1, r3
 800231c:	480e      	ldr	r0, [pc, #56]	; (8002358 <HAL_ADC_ConfigChannel+0x7f8>)
 800231e:	f7fe ff42 	bl	80011a6 <LL_ADC_SetCommonPathInternalCh>
 8002322:	e00c      	b.n	800233e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	f043 0220 	orr.w	r2, r3, #32
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002336:	e002      	b.n	800233e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002338:	bf00      	nop
 800233a:	e000      	b.n	800233e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800233c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002346:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800234a:	4618      	mov	r0, r3
 800234c:	37d8      	adds	r7, #216	; 0xd8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	80080000 	.word	0x80080000
 8002358:	50040300 	.word	0x50040300
 800235c:	c7520000 	.word	0xc7520000
 8002360:	50040000 	.word	0x50040000
 8002364:	50040200 	.word	0x50040200
 8002368:	20000000 	.word	0x20000000
 800236c:	053e2d63 	.word	0x053e2d63
 8002370:	cb840000 	.word	0xcb840000
 8002374:	80000001 	.word	0x80000001

08002378 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff f8a1 	bl	80014d0 <LL_ADC_IsEnabled>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d169      	bne.n	8002468 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	4b36      	ldr	r3, [pc, #216]	; (8002474 <ADC_Enable+0xfc>)
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00d      	beq.n	80023be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	f043 0210 	orr.w	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e055      	b.n	800246a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f870 	bl	80014a8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023c8:	482b      	ldr	r0, [pc, #172]	; (8002478 <ADC_Enable+0x100>)
 80023ca:	f7fe feff 	bl	80011cc <LL_ADC_GetCommonPathInternalCh>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d8:	4b28      	ldr	r3, [pc, #160]	; (800247c <ADC_Enable+0x104>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	4a28      	ldr	r2, [pc, #160]	; (8002480 <ADC_Enable+0x108>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	099b      	lsrs	r3, r3, #6
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80023f2:	e002      	b.n	80023fa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f9      	bne.n	80023f4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002400:	f7fe fe8e 	bl	8001120 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002406:	e028      	b.n	800245a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f85f 	bl	80014d0 <LL_ADC_IsEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d104      	bne.n	8002422 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f843 	bl	80014a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002422:	f7fe fe7d 	bl	8001120 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d914      	bls.n	800245a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b01      	cmp	r3, #1
 800243c:	d00d      	beq.n	800245a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f043 0210 	orr.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e007      	b.n	800246a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d1cf      	bne.n	8002408 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	8000003f 	.word	0x8000003f
 8002478:	50040300 	.word	0x50040300
 800247c:	20000000 	.word	0x20000000
 8002480:	053e2d63 	.word	0x053e2d63

08002484 <LL_ADC_IsEnabled>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <LL_ADC_IsEnabled+0x18>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <LL_ADC_IsEnabled+0x1a>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_REG_IsConversionOngoing>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d101      	bne.n	80024c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b0a1      	sub	sp, #132	; 0x84
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e093      	b.n	8002616 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80024f6:	2300      	movs	r3, #0
 80024f8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80024fa:	2300      	movs	r3, #0
 80024fc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a47      	ldr	r2, [pc, #284]	; (8002620 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d102      	bne.n	800250e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002508:	4b46      	ldr	r3, [pc, #280]	; (8002624 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e001      	b.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e072      	b.n	8002616 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ffb9 	bl	80024aa <LL_ADC_REG_IsConversionOngoing>
 8002538:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ffb3 	bl	80024aa <LL_ADC_REG_IsConversionOngoing>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d154      	bne.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800254a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254c:	2b00      	cmp	r3, #0
 800254e:	d151      	bne.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002552:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d02c      	beq.n	80025b6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800255c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256e:	035b      	lsls	r3, r3, #13
 8002570:	430b      	orrs	r3, r1
 8002572:	431a      	orrs	r2, r3
 8002574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002576:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002578:	4829      	ldr	r0, [pc, #164]	; (8002620 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800257a:	f7ff ff83 	bl	8002484 <LL_ADC_IsEnabled>
 800257e:	4604      	mov	r4, r0
 8002580:	4828      	ldr	r0, [pc, #160]	; (8002624 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002582:	f7ff ff7f 	bl	8002484 <LL_ADC_IsEnabled>
 8002586:	4603      	mov	r3, r0
 8002588:	431c      	orrs	r4, r3
 800258a:	4828      	ldr	r0, [pc, #160]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800258c:	f7ff ff7a 	bl	8002484 <LL_ADC_IsEnabled>
 8002590:	4603      	mov	r3, r0
 8002592:	4323      	orrs	r3, r4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d137      	bne.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025a0:	f023 030f 	bic.w	r3, r3, #15
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	6811      	ldr	r1, [r2, #0]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	6892      	ldr	r2, [r2, #8]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025b4:	e028      	b.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c2:	4817      	ldr	r0, [pc, #92]	; (8002620 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025c4:	f7ff ff5e 	bl	8002484 <LL_ADC_IsEnabled>
 80025c8:	4604      	mov	r4, r0
 80025ca:	4816      	ldr	r0, [pc, #88]	; (8002624 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025cc:	f7ff ff5a 	bl	8002484 <LL_ADC_IsEnabled>
 80025d0:	4603      	mov	r3, r0
 80025d2:	431c      	orrs	r4, r3
 80025d4:	4815      	ldr	r0, [pc, #84]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80025d6:	f7ff ff55 	bl	8002484 <LL_ADC_IsEnabled>
 80025da:	4603      	mov	r3, r0
 80025dc:	4323      	orrs	r3, r4
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d112      	bne.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025ea:	f023 030f 	bic.w	r3, r3, #15
 80025ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025f2:	e009      	b.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002606:	e000      	b.n	800260a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002608:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002612:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002616:	4618      	mov	r0, r3
 8002618:	3784      	adds	r7, #132	; 0x84
 800261a:	46bd      	mov	sp, r7
 800261c:	bd90      	pop	{r4, r7, pc}
 800261e:	bf00      	nop
 8002620:	50040000 	.word	0x50040000
 8002624:	50040100 	.word	0x50040100
 8002628:	50040300 	.word	0x50040300
 800262c:	50040200 	.word	0x50040200

08002630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60d3      	str	r3, [r2, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0b      	blt.n	80026be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <__NVIC_EnableIRQ+0x38>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800279c:	d301      	bcc.n	80027a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279e:	2301      	movs	r3, #1
 80027a0:	e00f      	b.n	80027c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <SysTick_Config+0x40>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027aa:	210f      	movs	r1, #15
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027b0:	f7ff ff8e 	bl	80026d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <SysTick_Config+0x40>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <SysTick_Config+0x40>)
 80027bc:	2207      	movs	r2, #7
 80027be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	e000e010 	.word	0xe000e010

080027d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff29 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027f8:	f7ff ff3e 	bl	8002678 <__NVIC_GetPriorityGrouping>
 80027fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7ff ff8e 	bl	8002724 <NVIC_EncodePriority>
 8002808:	4602      	mov	r2, r0
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff5d 	bl	80026d0 <__NVIC_SetPriority>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff31 	bl	8002694 <__NVIC_EnableIRQ>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ffa2 	bl	800278c <SysTick_Config>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d008      	beq.n	800287c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2204      	movs	r2, #4
 800286e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e022      	b.n	80028c2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 020e 	bic.w	r2, r2, #14
 800288a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a0:	f003 021c 	and.w	r2, r3, #28
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f202 	lsl.w	r2, r1, r2
 80028ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d005      	beq.n	80028f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2204      	movs	r2, #4
 80028ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
 80028f0:	e029      	b.n	8002946 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 020e 	bic.w	r2, r2, #14
 8002900:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f003 021c 	and.w	r2, r3, #28
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f202 	lsl.w	r2, r1, r2
 8002924:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4798      	blx	r3
    }
  }
  return status;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295e:	e166      	b.n	8002c2e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	4013      	ands	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8158 	beq.w	8002c28 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d005      	beq.n	8002990 <HAL_GPIO_Init+0x40>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d130      	bne.n	80029f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029c6:	2201      	movs	r2, #1
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f003 0201 	and.w	r2, r3, #1
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d017      	beq.n	8002a2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	2203      	movs	r2, #3
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d123      	bne.n	8002a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	08da      	lsrs	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	08da      	lsrs	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	6939      	ldr	r1, [r7, #16]
 8002a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0203 	and.w	r2, r3, #3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80b2 	beq.w	8002c28 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac4:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac8:	4a60      	ldr	r2, [pc, #384]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6613      	str	r3, [r2, #96]	; 0x60
 8002ad0:	4b5e      	ldr	r3, [pc, #376]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002adc:	4a5c      	ldr	r2, [pc, #368]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b06:	d02b      	beq.n	8002b60 <HAL_GPIO_Init+0x210>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d025      	beq.n	8002b5c <HAL_GPIO_Init+0x20c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a51      	ldr	r2, [pc, #324]	; (8002c58 <HAL_GPIO_Init+0x308>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d01f      	beq.n	8002b58 <HAL_GPIO_Init+0x208>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <HAL_GPIO_Init+0x30c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d019      	beq.n	8002b54 <HAL_GPIO_Init+0x204>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_GPIO_Init+0x310>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d013      	beq.n	8002b50 <HAL_GPIO_Init+0x200>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a4e      	ldr	r2, [pc, #312]	; (8002c64 <HAL_GPIO_Init+0x314>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00d      	beq.n	8002b4c <HAL_GPIO_Init+0x1fc>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a4d      	ldr	r2, [pc, #308]	; (8002c68 <HAL_GPIO_Init+0x318>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d007      	beq.n	8002b48 <HAL_GPIO_Init+0x1f8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a4c      	ldr	r2, [pc, #304]	; (8002c6c <HAL_GPIO_Init+0x31c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_GPIO_Init+0x1f4>
 8002b40:	2307      	movs	r3, #7
 8002b42:	e00e      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b44:	2308      	movs	r3, #8
 8002b46:	e00c      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b48:	2306      	movs	r3, #6
 8002b4a:	e00a      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b4c:	2305      	movs	r3, #5
 8002b4e:	e008      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e006      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b54:	2303      	movs	r3, #3
 8002b56:	e004      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e002      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b60:	2300      	movs	r3, #0
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	f002 0203 	and.w	r2, r2, #3
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	4093      	lsls	r3, r2
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b72:	4937      	ldr	r1, [pc, #220]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b80:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ba4:	4a32      	ldr	r2, [pc, #200]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bce:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bd4:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f47f ae91 	bne.w	8002960 <HAL_GPIO_Init+0x10>
  }
}
 8002c3e:	bf00      	nop
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010000 	.word	0x40010000
 8002c54:	48000400 	.word	0x48000400
 8002c58:	48000800 	.word	0x48000800
 8002c5c:	48000c00 	.word	0x48000c00
 8002c60:	48001000 	.word	0x48001000
 8002c64:	48001400 	.word	0x48001400
 8002c68:	48001800 	.word	0x48001800
 8002c6c:	48001c00 	.word	0x48001c00
 8002c70:	40010400 	.word	0x40010400

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca6:	b08f      	sub	sp, #60	; 0x3c
 8002ca8:	af0a      	add	r7, sp, #40	; 0x28
 8002caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e116      	b.n	8002ee4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f007 f803 	bl	8009cdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2203      	movs	r2, #3
 8002cda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 ff12 	bl	8006b1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	687e      	ldr	r6, [r7, #4]
 8002d02:	466d      	mov	r5, sp
 8002d04:	f106 0410 	add.w	r4, r6, #16
 8002d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d14:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d18:	1d33      	adds	r3, r6, #4
 8002d1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d1c:	6838      	ldr	r0, [r7, #0]
 8002d1e:	f003 fe25 	bl	800696c <USB_CoreInit>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0d7      	b.n	8002ee4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f003 ff00 	bl	8006b40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	e04a      	b.n	8002ddc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d46:	7bfa      	ldrb	r2, [r7, #15]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	333d      	adds	r3, #61	; 0x3d
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	333c      	adds	r3, #60	; 0x3c
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	b298      	uxth	r0, r3
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3344      	adds	r3, #68	; 0x44
 8002d82:	4602      	mov	r2, r0
 8002d84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3340      	adds	r3, #64	; 0x40
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	3348      	adds	r3, #72	; 0x48
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	334c      	adds	r3, #76	; 0x4c
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3354      	adds	r3, #84	; 0x54
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d3af      	bcc.n	8002d46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	e044      	b.n	8002e76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e14:	7bfa      	ldrb	r2, [r7, #15]
 8002e16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	3301      	adds	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	7bfa      	ldrb	r2, [r7, #15]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d3b5      	bcc.n	8002dec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	687e      	ldr	r6, [r7, #4]
 8002e88:	466d      	mov	r5, sp
 8002e8a:	f106 0410 	add.w	r4, r6, #16
 8002e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e9e:	1d33      	adds	r3, r6, #4
 8002ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f003 fe98 	bl	8006bd8 <USB_DevInit>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e014      	b.n	8002ee4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f001 f882 	bl	8003fdc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f004 ff20 	bl	8007d22 <USB_DevDisconnect>

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_PCD_Start+0x1c>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e01c      	b.n	8002f42 <HAL_PCD_Start+0x56>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d105      	bne.n	8002f24 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 fde7 	bl	8006afc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 fed4 	bl	8007ce0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f4a:	b590      	push	{r4, r7, lr}
 8002f4c:	b08d      	sub	sp, #52	; 0x34
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f004 ff92 	bl	8007e8a <USB_GetMode>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 847e 	bne.w	800386a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f004 fef6 	bl	8007d64 <USB_ReadInterrupts>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8474 	beq.w	8003868 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f004 fee3 	bl	8007d64 <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d107      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f002 0202 	and.w	r2, r2, #2
 8002fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f004 fed1 	bl	8007d64 <USB_ReadInterrupts>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d161      	bne.n	8003090 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0210 	bic.w	r2, r2, #16
 8002fda:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	0c5b      	lsrs	r3, r3, #17
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	2b02      	cmp	r3, #2
 8003006:	d124      	bne.n	8003052 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d035      	beq.n	8003080 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800301e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003022:	b29b      	uxth	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	6a38      	ldr	r0, [r7, #32]
 8003028:	f004 fd08 	bl	8007a3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003038:	441a      	add	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	6a1a      	ldr	r2, [r3, #32]
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800304a:	441a      	add	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	621a      	str	r2, [r3, #32]
 8003050:	e016      	b.n	8003080 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	0c5b      	lsrs	r3, r3, #17
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	2b06      	cmp	r3, #6
 800305c:	d110      	bne.n	8003080 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003064:	2208      	movs	r2, #8
 8003066:	4619      	mov	r1, r3
 8003068:	6a38      	ldr	r0, [r7, #32]
 800306a:	f004 fce7 	bl	8007a3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	6a1a      	ldr	r2, [r3, #32]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800307a:	441a      	add	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0210 	orr.w	r2, r2, #16
 800308e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f004 fe65 	bl	8007d64 <USB_ReadInterrupts>
 800309a:	4603      	mov	r3, r0
 800309c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030a4:	f040 80a7 	bne.w	80031f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f004 fe6a 	bl	8007d8a <USB_ReadDevAllOutEpInterrupt>
 80030b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030b8:	e099      	b.n	80031ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 808e 	beq.w	80031e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f004 fe8e 	bl	8007df2 <USB_ReadDevOutEPInterrupt>
 80030d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ee:	461a      	mov	r2, r3
 80030f0:	2301      	movs	r3, #1
 80030f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fe96 	bl	8003e28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00c      	beq.n	8003120 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003112:	461a      	mov	r2, r3
 8003114:	2308      	movs	r3, #8
 8003116:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fed2 	bl	8003ec4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	461a      	mov	r2, r3
 8003138:	2310      	movs	r3, #16
 800313a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d030      	beq.n	80031a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314e:	2b80      	cmp	r3, #128	; 0x80
 8003150:	d109      	bne.n	8003166 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003160:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003164:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	3304      	adds	r3, #4
 800317a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	78db      	ldrb	r3, [r3, #3]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d108      	bne.n	8003196 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2200      	movs	r2, #0
 8003188:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	b2db      	uxtb	r3, r3
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f006 fed9 	bl	8009f48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a2:	461a      	mov	r2, r3
 80031a4:	2302      	movs	r3, #2
 80031a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031be:	461a      	mov	r2, r3
 80031c0:	2320      	movs	r3, #32
 80031c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031da:	461a      	mov	r2, r3
 80031dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	3301      	adds	r3, #1
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f47f af62 	bne.w	80030ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f004 fdb2 	bl	8007d64 <USB_ReadInterrupts>
 8003200:	4603      	mov	r3, r0
 8003202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003206:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800320a:	f040 80a4 	bne.w	8003356 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f004 fdd3 	bl	8007dbe <USB_ReadDevAllInEpInterrupt>
 8003218:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800321e:	e096      	b.n	800334e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 808b 	beq.w	8003342 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f004 fdf9 	bl	8007e2e <USB_ReadDevInEPInterrupt>
 800323c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	2201      	movs	r2, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	43db      	mvns	r3, r3
 8003262:	69f9      	ldr	r1, [r7, #28]
 8003264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003268:	4013      	ands	r3, r2
 800326a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003278:	461a      	mov	r2, r3
 800327a:	2301      	movs	r3, #1
 800327c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	b2db      	uxtb	r3, r3
 8003282:	4619      	mov	r1, r3
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f006 fdca 	bl	8009e1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a0:	461a      	mov	r2, r3
 80032a2:	2308      	movs	r3, #8
 80032a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032bc:	461a      	mov	r2, r3
 80032be:	2310      	movs	r3, #16
 80032c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d8:	461a      	mov	r2, r3
 80032da:	2340      	movs	r3, #64	; 0x40
 80032dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d023      	beq.n	8003330 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80032e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ea:	6a38      	ldr	r0, [r7, #32]
 80032ec:	f003 fdc0 	bl	8006e70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	3338      	adds	r3, #56	; 0x38
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	3304      	adds	r3, #4
 8003302:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	78db      	ldrb	r3, [r3, #3]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d108      	bne.n	800331e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2200      	movs	r2, #0
 8003310:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	b2db      	uxtb	r3, r3
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f006 fe27 	bl	8009f6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332a:	461a      	mov	r2, r3
 800332c:	2302      	movs	r3, #2
 800332e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800333a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fcea 	bl	8003d16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	3301      	adds	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	2b00      	cmp	r3, #0
 8003352:	f47f af65 	bne.w	8003220 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f004 fd02 	bl	8007d64 <USB_ReadInterrupts>
 8003360:	4603      	mov	r3, r0
 8003362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800336a:	d122      	bne.n	80033b2 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003386:	2b01      	cmp	r3, #1
 8003388:	d108      	bne.n	800339c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003392:	2100      	movs	r1, #0
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f007 f85b 	bl	800a450 <HAL_PCDEx_LPM_Callback>
 800339a:	e002      	b.n	80033a2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f006 fdab 	bl	8009ef8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80033b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f004 fcd4 	bl	8007d64 <USB_ReadInterrupts>
 80033bc:	4603      	mov	r3, r0
 80033be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c6:	d112      	bne.n	80033ee <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d102      	bne.n	80033de <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f006 fd67 	bl	8009eac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 fcb6 	bl	8007d64 <USB_ReadInterrupts>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003402:	d121      	bne.n	8003448 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003412:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d111      	bne.n	8003442 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	f003 020f 	and.w	r2, r3, #15
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003438:	2101      	movs	r1, #1
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f007 f808 	bl	800a450 <HAL_PCDEx_LPM_Callback>
 8003440:	e002      	b.n	8003448 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f006 fd32 	bl	8009eac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f004 fc89 	bl	8007d64 <USB_ReadInterrupts>
 8003452:	4603      	mov	r3, r0
 8003454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345c:	f040 80b5 	bne.w	80035ca <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2110      	movs	r1, #16
 800347a:	4618      	mov	r0, r3
 800347c:	f003 fcf8 	bl	8006e70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003480:	2300      	movs	r3, #0
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003484:	e046      	b.n	8003514 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003492:	461a      	mov	r2, r3
 8003494:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003498:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034aa:	0151      	lsls	r1, r2, #5
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	440a      	add	r2, r1
 80034b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034de:	0151      	lsls	r1, r2, #5
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	440a      	add	r2, r1
 80034e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034fe:	0151      	lsls	r1, r2, #5
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	440a      	add	r2, r1
 8003504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003508:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800350c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	3301      	adds	r3, #1
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800351a:	429a      	cmp	r2, r3
 800351c:	d3b3      	bcc.n	8003486 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800352c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003530:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800354a:	f043 030b 	orr.w	r3, r3, #11
 800354e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003560:	f043 030b 	orr.w	r3, r3, #11
 8003564:	6453      	str	r3, [r2, #68]	; 0x44
 8003566:	e015      	b.n	8003594 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003576:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800357a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800357e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800358e:	f043 030b 	orr.w	r3, r3, #11
 8003592:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80035a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f004 fc99 	bl	8007eec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80035c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fbc8 	bl	8007d64 <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035de:	d124      	bne.n	800362a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f004 fc5e 	bl	8007ea6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f003 fcbb 	bl	8006f6a <USB_GetDevSpeed>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681c      	ldr	r4, [r3, #0]
 8003600:	f001 fb4a 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8003604:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	4620      	mov	r0, r4
 8003610:	f003 f9d8 	bl	80069c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f006 fc2a 	bl	8009e6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003628:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f004 fb98 	bl	8007d64 <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b08      	cmp	r3, #8
 800363c:	d10a      	bne.n	8003654 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f006 fc07 	bl	8009e52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f002 0208 	and.w	r2, r2, #8
 8003652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f004 fb83 	bl	8007d64 <USB_ReadInterrupts>
 800365e:	4603      	mov	r3, r0
 8003660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003664:	2b80      	cmp	r3, #128	; 0x80
 8003666:	d122      	bne.n	80036ae <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003674:	2301      	movs	r3, #1
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
 8003678:	e014      	b.n	80036a4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d105      	bne.n	800369e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	b2db      	uxtb	r3, r3
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fb0b 	bl	8003cb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	3301      	adds	r3, #1
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d3e5      	bcc.n	800367a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f004 fb56 	bl	8007d64 <USB_ReadInterrupts>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c2:	d13b      	bne.n	800373c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036c4:	2301      	movs	r3, #1
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	e02b      	b.n	8003722 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3340      	adds	r3, #64	; 0x40
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d115      	bne.n	800371c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80036f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da12      	bge.n	800371c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	333f      	adds	r3, #63	; 0x3f
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003712:	b2db      	uxtb	r3, r3
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 facc 	bl	8003cb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	3301      	adds	r3, #1
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003728:	429a      	cmp	r2, r3
 800372a:	d3ce      	bcc.n	80036ca <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800373a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f004 fb0f 	bl	8007d64 <USB_ReadInterrupts>
 8003746:	4603      	mov	r3, r0
 8003748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003750:	d155      	bne.n	80037fe <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003752:	2301      	movs	r3, #1
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
 8003756:	e045      	b.n	80037e4 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d12e      	bne.n	80037de <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003780:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003782:	2b00      	cmp	r3, #0
 8003784:	da2b      	bge.n	80037de <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003792:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003796:	429a      	cmp	r2, r3
 8003798:	d121      	bne.n	80037de <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037da:	6053      	str	r3, [r2, #4]
            break;
 80037dc:	e007      	b.n	80037ee <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	3301      	adds	r3, #1
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d3b4      	bcc.n	8003758 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80037fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f004 faae 	bl	8007d64 <USB_ReadInterrupts>
 8003808:	4603      	mov	r3, r0
 800380a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800380e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003812:	d10a      	bne.n	800382a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f006 fbbb 	bl	8009f90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f004 fa98 	bl	8007d64 <USB_ReadInterrupts>
 8003834:	4603      	mov	r3, r0
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d115      	bne.n	800386a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f006 fbab 	bl	8009fac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	e000      	b.n	800386a <HAL_PCD_IRQHandler+0x920>
      return;
 8003868:	bf00      	nop
    }
  }
}
 800386a:	3734      	adds	r7, #52	; 0x34
 800386c:	46bd      	mov	sp, r7
 800386e:	bd90      	pop	{r4, r7, pc}

08003870 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_PCD_SetAddress+0x1a>
 8003886:	2302      	movs	r3, #2
 8003888:	e013      	b.n	80038b2 <HAL_PCD_SetAddress+0x42>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	78fa      	ldrb	r2, [r7, #3]
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f004 f9f6 	bl	8007c94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	4608      	mov	r0, r1
 80038c4:	4611      	mov	r1, r2
 80038c6:	461a      	mov	r2, r3
 80038c8:	4603      	mov	r3, r0
 80038ca:	70fb      	strb	r3, [r7, #3]
 80038cc:	460b      	mov	r3, r1
 80038ce:	803b      	strh	r3, [r7, #0]
 80038d0:	4613      	mov	r3, r2
 80038d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	da0f      	bge.n	8003900 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	f003 020f 	and.w	r2, r3, #15
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	3338      	adds	r3, #56	; 0x38
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	3304      	adds	r3, #4
 80038f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2201      	movs	r2, #1
 80038fc:	705a      	strb	r2, [r3, #1]
 80038fe:	e00f      	b.n	8003920 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 020f 	and.w	r2, r3, #15
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	3304      	adds	r3, #4
 8003918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800392c:	883a      	ldrh	r2, [r7, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	78ba      	ldrb	r2, [r7, #2]
 8003936:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800394a:	78bb      	ldrb	r3, [r7, #2]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d102      	bne.n	8003956 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_PCD_EP_Open+0xaa>
 8003960:	2302      	movs	r3, #2
 8003962:	e00e      	b.n	8003982 <HAL_PCD_EP_Open+0xc8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68f9      	ldr	r1, [r7, #12]
 8003972:	4618      	mov	r0, r3
 8003974:	f003 fb18 	bl	8006fa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003980:	7afb      	ldrb	r3, [r7, #11]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800399a:	2b00      	cmp	r3, #0
 800399c:	da0f      	bge.n	80039be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	f003 020f 	and.w	r2, r3, #15
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	3338      	adds	r3, #56	; 0x38
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	3304      	adds	r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	705a      	strb	r2, [r3, #1]
 80039bc:	e00f      	b.n	80039de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	3304      	adds	r3, #4
 80039d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_PCD_EP_Close+0x6e>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e00e      	b.n	8003a16 <HAL_PCD_EP_Close+0x8c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f003 fb56 	bl	80070b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	f003 020f 	and.w	r2, r3, #15
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	3304      	adds	r3, #4
 8003a46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2200      	movs	r2, #0
 8003a58:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a60:	7afb      	ldrb	r3, [r7, #11]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a6c:	7afb      	ldrb	r3, [r7, #11]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6979      	ldr	r1, [r7, #20]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f003 fdd7 	bl	8007630 <USB_EP0StartXfer>
 8003a82:	e005      	b.n	8003a90 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6979      	ldr	r1, [r7, #20]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f003 fbf0 	bl	8007270 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	f003 020f 	and.w	r2, r3, #15
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003abc:	681b      	ldr	r3, [r3, #0]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ada:	7afb      	ldrb	r3, [r7, #11]
 8003adc:	f003 020f 	and.w	r2, r3, #15
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	3338      	adds	r3, #56	; 0x38
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	3304      	adds	r3, #4
 8003af0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2201      	movs	r2, #1
 8003b08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b16:	7afb      	ldrb	r3, [r7, #11]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6979      	ldr	r1, [r7, #20]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f003 fd82 	bl	8007630 <USB_EP0StartXfer>
 8003b2c:	e005      	b.n	8003b3a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6979      	ldr	r1, [r7, #20]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f003 fb9b 	bl	8007270 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	f003 020f 	and.w	r2, r3, #15
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d901      	bls.n	8003b62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e04e      	b.n	8003c00 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	da0f      	bge.n	8003b8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	f003 020f 	and.w	r2, r3, #15
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	3338      	adds	r3, #56	; 0x38
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3304      	adds	r3, #4
 8003b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	705a      	strb	r2, [r3, #1]
 8003b88:	e00d      	b.n	8003ba6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_PCD_EP_SetStall+0x82>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e01c      	b.n	8003c00 <HAL_PCD_EP_SetStall+0xbc>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68f9      	ldr	r1, [r7, #12]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f003 ff89 	bl	8007aec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f004 f97b 	bl	8007eec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 020f 	and.w	r2, r3, #15
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d901      	bls.n	8003c26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e042      	b.n	8003cac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	da0f      	bge.n	8003c4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	3338      	adds	r3, #56	; 0x38
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	3304      	adds	r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	705a      	strb	r2, [r3, #1]
 8003c4c:	e00f      	b.n	8003c6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	3304      	adds	r3, #4
 8003c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_PCD_EP_ClrStall+0x86>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e00e      	b.n	8003cac <HAL_PCD_EP_ClrStall+0xa4>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68f9      	ldr	r1, [r7, #12]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f003 ff93 	bl	8007bc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	da0c      	bge.n	8003ce2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	3338      	adds	r3, #56	; 0x38
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	4413      	add	r3, r2
 8003cdc:	3304      	adds	r3, #4
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e00c      	b.n	8003cfc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 020f 	and.w	r2, r3, #15
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68f9      	ldr	r1, [r7, #12]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f003 fdb6 	bl	8007874 <USB_EPStopXfer>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d0c:	7afb      	ldrb	r3, [r7, #11]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b088      	sub	sp, #32
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	3338      	adds	r3, #56	; 0x38
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d901      	bls.n	8003d4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e067      	b.n	8003e1e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d902      	bls.n	8003d6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3303      	adds	r3, #3
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d72:	e026      	b.n	8003dc2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d902      	bls.n	8003d90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	3303      	adds	r3, #3
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6919      	ldr	r1, [r3, #16]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	6978      	ldr	r0, [r7, #20]
 8003da6:	f003 fe0f 	bl	80079c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	441a      	add	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1a      	ldr	r2, [r3, #32]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	441a      	add	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d809      	bhi.n	8003dec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1a      	ldr	r2, [r3, #32]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d203      	bcs.n	8003dec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1c3      	bne.n	8003d74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	699a      	ldr	r2, [r3, #24]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d811      	bhi.n	8003e1c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	2201      	movs	r2, #1
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	6939      	ldr	r1, [r7, #16]
 8003e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e18:	4013      	ands	r3, r2
 8003e1a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	333c      	adds	r3, #60	; 0x3c
 8003e40:	3304      	adds	r3, #4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <PCD_EP_OutXfrComplete_int+0x98>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d124      	bne.n	8003ea8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	461a      	mov	r2, r3
 8003e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7a:	6093      	str	r3, [r2, #8]
 8003e7c:	e01a      	b.n	8003eb4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	461a      	mov	r2, r3
 8003e96:	2320      	movs	r3, #32
 8003e98:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f005 ffa1 	bl	8009de8 <HAL_PCD_DataOutStageCallback>
 8003ea6:	e005      	b.n	8003eb4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f005 ff9a 	bl	8009de8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	4f54310a 	.word	0x4f54310a

08003ec4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	333c      	adds	r3, #60	; 0x3c
 8003edc:	3304      	adds	r3, #4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a0c      	ldr	r2, [pc, #48]	; (8003f28 <PCD_EP_OutSetupPacket_int+0x64>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d90e      	bls.n	8003f18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d009      	beq.n	8003f18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f10:	461a      	mov	r2, r3
 8003f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f005 ff53 	bl	8009dc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	4f54300a 	.word	0x4f54300a

08003f2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d107      	bne.n	8003f5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f4a:	883b      	ldrh	r3, [r7, #0]
 8003f4c:	0419      	lsls	r1, r3, #16
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28
 8003f58:	e028      	b.n	8003fac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	4413      	add	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
 8003f6c:	e00d      	b.n	8003f8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	3340      	adds	r3, #64	; 0x40
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	0c1b      	lsrs	r3, r3, #16
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	4413      	add	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	3301      	adds	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d3ec      	bcc.n	8003f6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f94:	883b      	ldrh	r3, [r7, #0]
 8003f96:	0418      	lsls	r0, r3, #16
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6819      	ldr	r1, [r3, #0]
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	4302      	orrs	r2, r0
 8003fa4:	3340      	adds	r3, #64	; 0x40
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	887a      	ldrh	r2, [r7, #2]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400e:	f043 0303 	orr.w	r3, r3, #3
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a04      	ldr	r2, [pc, #16]	; (8004040 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800402e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004032:	6013      	str	r3, [r2, #0]
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40007000 	.word	0x40007000

08004044 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <HAL_PWREx_GetVoltageRange+0x18>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40007000 	.word	0x40007000

08004060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800406e:	d130      	bne.n	80040d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004070:	4b23      	ldr	r3, [pc, #140]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407c:	d038      	beq.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004086:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800408c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800408e:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2232      	movs	r2, #50	; 0x32
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0c9b      	lsrs	r3, r3, #18
 80040a0:	3301      	adds	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a4:	e002      	b.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ac:	4b14      	ldr	r3, [pc, #80]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b8:	d102      	bne.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f2      	bne.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040cc:	d110      	bne.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e00f      	b.n	80040f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040d2:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040de:	d007      	beq.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040e8:	4a05      	ldr	r2, [pc, #20]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40007000 	.word	0x40007000
 8004104:	20000000 	.word	0x20000000
 8004108:	431bde83 	.word	0x431bde83

0800410c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4a04      	ldr	r2, [pc, #16]	; (8004128 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800411a:	6053      	str	r3, [r2, #4]
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40007000 	.word	0x40007000

0800412c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800413a:	6053      	str	r3, [r2, #4]
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40007000 	.word	0x40007000

0800414c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f000 bc08 	b.w	8004970 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004160:	4b96      	ldr	r3, [pc, #600]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800416a:	4b94      	ldr	r3, [pc, #592]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80e4 	beq.w	800434a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d007      	beq.n	8004198 <HAL_RCC_OscConfig+0x4c>
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b0c      	cmp	r3, #12
 800418c:	f040 808b 	bne.w	80042a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b01      	cmp	r3, #1
 8004194:	f040 8087 	bne.w	80042a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004198:	4b88      	ldr	r3, [pc, #544]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_OscConfig+0x64>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e3df      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1a      	ldr	r2, [r3, #32]
 80041b4:	4b81      	ldr	r3, [pc, #516]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d004      	beq.n	80041ca <HAL_RCC_OscConfig+0x7e>
 80041c0:	4b7e      	ldr	r3, [pc, #504]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c8:	e005      	b.n	80041d6 <HAL_RCC_OscConfig+0x8a>
 80041ca:	4b7c      	ldr	r3, [pc, #496]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80041cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d223      	bcs.n	8004222 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fd92 	bl	8004d08 <RCC_SetFlashLatencyFromMSIRange>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e3c0      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ee:	4b73      	ldr	r3, [pc, #460]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a72      	ldr	r2, [pc, #456]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80041f4:	f043 0308 	orr.w	r3, r3, #8
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	4b70      	ldr	r3, [pc, #448]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	496d      	ldr	r1, [pc, #436]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800420c:	4b6b      	ldr	r3, [pc, #428]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	4968      	ldr	r1, [pc, #416]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
 8004220:	e025      	b.n	800426e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004222:	4b66      	ldr	r3, [pc, #408]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a65      	ldr	r2, [pc, #404]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004228:	f043 0308 	orr.w	r3, r3, #8
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	4b63      	ldr	r3, [pc, #396]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	4960      	ldr	r1, [pc, #384]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 800423c:	4313      	orrs	r3, r2
 800423e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004240:	4b5e      	ldr	r3, [pc, #376]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	495b      	ldr	r1, [pc, #364]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fd52 	bl	8004d08 <RCC_SetFlashLatencyFromMSIRange>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e380      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800426e:	f000 fc87 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8004272:	4602      	mov	r2, r0
 8004274:	4b51      	ldr	r3, [pc, #324]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	4950      	ldr	r1, [pc, #320]	; (80043c0 <HAL_RCC_OscConfig+0x274>)
 8004280:	5ccb      	ldrb	r3, [r1, r3]
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	fa22 f303 	lsr.w	r3, r2, r3
 800428a:	4a4e      	ldr	r2, [pc, #312]	; (80043c4 <HAL_RCC_OscConfig+0x278>)
 800428c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800428e:	4b4e      	ldr	r3, [pc, #312]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fc fef4 	bl	8001080 <HAL_InitTick>
 8004298:	4603      	mov	r3, r0
 800429a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d052      	beq.n	8004348 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	e364      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d032      	beq.n	8004314 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042ae:	4b43      	ldr	r3, [pc, #268]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a42      	ldr	r2, [pc, #264]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042ba:	f7fc ff31 	bl	8001120 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042c2:	f7fc ff2d 	bl	8001120 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e34d      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042e0:	4b36      	ldr	r3, [pc, #216]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a35      	ldr	r2, [pc, #212]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80042e6:	f043 0308 	orr.w	r3, r3, #8
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	4b33      	ldr	r3, [pc, #204]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4930      	ldr	r1, [pc, #192]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042fe:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	492b      	ldr	r1, [pc, #172]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 800430e:	4313      	orrs	r3, r2
 8004310:	604b      	str	r3, [r1, #4]
 8004312:	e01a      	b.n	800434a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004314:	4b29      	ldr	r3, [pc, #164]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a28      	ldr	r2, [pc, #160]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004320:	f7fc fefe 	bl	8001120 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004328:	f7fc fefa 	bl	8001120 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e31a      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800433a:	4b20      	ldr	r3, [pc, #128]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x1dc>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d073      	beq.n	800443e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d005      	beq.n	8004368 <HAL_RCC_OscConfig+0x21c>
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d10e      	bne.n	8004380 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d10b      	bne.n	8004380 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004368:	4b14      	ldr	r3, [pc, #80]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d063      	beq.n	800443c <HAL_RCC_OscConfig+0x2f0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d15f      	bne.n	800443c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e2f7      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004388:	d106      	bne.n	8004398 <HAL_RCC_OscConfig+0x24c>
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a0b      	ldr	r2, [pc, #44]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e025      	b.n	80043e4 <HAL_RCC_OscConfig+0x298>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a0:	d114      	bne.n	80043cc <HAL_RCC_OscConfig+0x280>
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a05      	ldr	r2, [pc, #20]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80043a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a02      	ldr	r2, [pc, #8]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e013      	b.n	80043e4 <HAL_RCC_OscConfig+0x298>
 80043bc:	40021000 	.word	0x40021000
 80043c0:	0800aed0 	.word	0x0800aed0
 80043c4:	20000000 	.word	0x20000000
 80043c8:	20000004 	.word	0x20000004
 80043cc:	4ba0      	ldr	r3, [pc, #640]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a9f      	ldr	r2, [pc, #636]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80043d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b9d      	ldr	r3, [pc, #628]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a9c      	ldr	r2, [pc, #624]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80043de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d013      	beq.n	8004414 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fc fe98 	bl	8001120 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f4:	f7fc fe94 	bl	8001120 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e2b4      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004406:	4b92      	ldr	r3, [pc, #584]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x2a8>
 8004412:	e014      	b.n	800443e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fc fe84 	bl	8001120 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800441c:	f7fc fe80 	bl	8001120 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e2a0      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800442e:	4b88      	ldr	r3, [pc, #544]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x2d0>
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d060      	beq.n	800450c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d005      	beq.n	800445c <HAL_RCC_OscConfig+0x310>
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b0c      	cmp	r3, #12
 8004454:	d119      	bne.n	800448a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d116      	bne.n	800448a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800445c:	4b7c      	ldr	r3, [pc, #496]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_OscConfig+0x328>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e27d      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	4b76      	ldr	r3, [pc, #472]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	4973      	ldr	r1, [pc, #460]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004488:	e040      	b.n	800450c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d023      	beq.n	80044da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004492:	4b6f      	ldr	r3, [pc, #444]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6e      	ldr	r2, [pc, #440]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fc fe3f 	bl	8001120 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a6:	f7fc fe3b 	bl	8001120 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e25b      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b8:	4b65      	ldr	r3, [pc, #404]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c4:	4b62      	ldr	r3, [pc, #392]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	495f      	ldr	r1, [pc, #380]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
 80044d8:	e018      	b.n	800450c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044da:	4b5d      	ldr	r3, [pc, #372]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a5c      	ldr	r2, [pc, #368]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80044e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e6:	f7fc fe1b 	bl	8001120 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ee:	f7fc fe17 	bl	8001120 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e237      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004500:	4b53      	ldr	r3, [pc, #332]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f0      	bne.n	80044ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d03c      	beq.n	8004592 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01c      	beq.n	800455a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004520:	4b4b      	ldr	r3, [pc, #300]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004526:	4a4a      	ldr	r2, [pc, #296]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004530:	f7fc fdf6 	bl	8001120 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004538:	f7fc fdf2 	bl	8001120 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e212      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800454a:	4b41      	ldr	r3, [pc, #260]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 800454c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ef      	beq.n	8004538 <HAL_RCC_OscConfig+0x3ec>
 8004558:	e01b      	b.n	8004592 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800455a:	4b3d      	ldr	r3, [pc, #244]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 800455c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004560:	4a3b      	ldr	r2, [pc, #236]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456a:	f7fc fdd9 	bl	8001120 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004572:	f7fc fdd5 	bl	8001120 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e1f5      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004584:	4b32      	ldr	r3, [pc, #200]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1ef      	bne.n	8004572 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80a6 	beq.w	80046ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a0:	2300      	movs	r3, #0
 80045a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045a4:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10d      	bne.n	80045cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b0:	4b27      	ldr	r3, [pc, #156]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b4:	4a26      	ldr	r2, [pc, #152]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80045b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ba:	6593      	str	r3, [r2, #88]	; 0x58
 80045bc:	4b24      	ldr	r3, [pc, #144]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 80045be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c8:	2301      	movs	r3, #1
 80045ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045cc:	4b21      	ldr	r3, [pc, #132]	; (8004654 <HAL_RCC_OscConfig+0x508>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d118      	bne.n	800460a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d8:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <HAL_RCC_OscConfig+0x508>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <HAL_RCC_OscConfig+0x508>)
 80045de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e4:	f7fc fd9c 	bl	8001120 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ec:	f7fc fd98 	bl	8001120 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e1b8      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045fe:	4b15      	ldr	r3, [pc, #84]	; (8004654 <HAL_RCC_OscConfig+0x508>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d108      	bne.n	8004624 <HAL_RCC_OscConfig+0x4d8>
 8004612:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	4a0d      	ldr	r2, [pc, #52]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004622:	e029      	b.n	8004678 <HAL_RCC_OscConfig+0x52c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b05      	cmp	r3, #5
 800462a:	d115      	bne.n	8004658 <HAL_RCC_OscConfig+0x50c>
 800462c:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	4a07      	ldr	r2, [pc, #28]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	4a03      	ldr	r2, [pc, #12]	; (8004650 <HAL_RCC_OscConfig+0x504>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800464c:	e014      	b.n	8004678 <HAL_RCC_OscConfig+0x52c>
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
 8004654:	40007000 	.word	0x40007000
 8004658:	4b9d      	ldr	r3, [pc, #628]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	4a9c      	ldr	r2, [pc, #624]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004668:	4b99      	ldr	r3, [pc, #612]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466e:	4a98      	ldr	r2, [pc, #608]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004670:	f023 0304 	bic.w	r3, r3, #4
 8004674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d016      	beq.n	80046ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004680:	f7fc fd4e 	bl	8001120 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004686:	e00a      	b.n	800469e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004688:	f7fc fd4a 	bl	8001120 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e168      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800469e:	4b8c      	ldr	r3, [pc, #560]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0ed      	beq.n	8004688 <HAL_RCC_OscConfig+0x53c>
 80046ac:	e015      	b.n	80046da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ae:	f7fc fd37 	bl	8001120 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046b4:	e00a      	b.n	80046cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f7fc fd33 	bl	8001120 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e151      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046cc:	4b80      	ldr	r3, [pc, #512]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ed      	bne.n	80046b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046da:	7ffb      	ldrb	r3, [r7, #31]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d105      	bne.n	80046ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e0:	4b7b      	ldr	r3, [pc, #492]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 80046e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e4:	4a7a      	ldr	r2, [pc, #488]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 80046e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d03c      	beq.n	8004772 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01c      	beq.n	800473a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004700:	4b73      	ldr	r3, [pc, #460]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004706:	4a72      	ldr	r2, [pc, #456]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fc fd06 	bl	8001120 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004718:	f7fc fd02 	bl	8001120 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e122      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800472a:	4b69      	ldr	r3, [pc, #420]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 800472c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0ef      	beq.n	8004718 <HAL_RCC_OscConfig+0x5cc>
 8004738:	e01b      	b.n	8004772 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800473a:	4b65      	ldr	r3, [pc, #404]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 800473c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004740:	4a63      	ldr	r2, [pc, #396]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474a:	f7fc fce9 	bl	8001120 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004752:	f7fc fce5 	bl	8001120 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e105      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004764:	4b5a      	ldr	r3, [pc, #360]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1ef      	bne.n	8004752 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80f9 	beq.w	800496e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	2b02      	cmp	r3, #2
 8004782:	f040 80cf 	bne.w	8004924 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004786:	4b52      	ldr	r3, [pc, #328]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 0203 	and.w	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	429a      	cmp	r2, r3
 8004798:	d12c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	3b01      	subs	r3, #1
 80047a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d123      	bne.n	80047f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d11b      	bne.n	80047f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d113      	bne.n	80047f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	085b      	lsrs	r3, r3, #1
 80047d8:	3b01      	subs	r3, #1
 80047da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d109      	bne.n	80047f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	3b01      	subs	r3, #1
 80047ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d071      	beq.n	80048d8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	d068      	beq.n	80048cc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047fa:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d105      	bne.n	8004812 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004806:	4b32      	ldr	r3, [pc, #200]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e0ac      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004816:	4b2e      	ldr	r3, [pc, #184]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a2d      	ldr	r2, [pc, #180]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 800481c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004820:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004822:	f7fc fc7d 	bl	8001120 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482a:	f7fc fc79 	bl	8001120 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e099      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800483c:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f0      	bne.n	800482a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004848:	4b21      	ldr	r3, [pc, #132]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800484e:	4013      	ands	r3, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004858:	3a01      	subs	r2, #1
 800485a:	0112      	lsls	r2, r2, #4
 800485c:	4311      	orrs	r1, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004862:	0212      	lsls	r2, r2, #8
 8004864:	4311      	orrs	r1, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800486a:	0852      	lsrs	r2, r2, #1
 800486c:	3a01      	subs	r2, #1
 800486e:	0552      	lsls	r2, r2, #21
 8004870:	4311      	orrs	r1, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004876:	0852      	lsrs	r2, r2, #1
 8004878:	3a01      	subs	r2, #1
 800487a:	0652      	lsls	r2, r2, #25
 800487c:	4311      	orrs	r1, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004882:	06d2      	lsls	r2, r2, #27
 8004884:	430a      	orrs	r2, r1
 8004886:	4912      	ldr	r1, [pc, #72]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004888:	4313      	orrs	r3, r2
 800488a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0f      	ldr	r2, [pc, #60]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004896:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4a0c      	ldr	r2, [pc, #48]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 800489e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048a4:	f7fc fc3c 	bl	8001120 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ac:	f7fc fc38 	bl	8001120 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e058      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048be:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ca:	e050      	b.n	800496e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e04f      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
 80048d0:	40021000 	.word	0x40021000
 80048d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048d8:	4b27      	ldr	r3, [pc, #156]	; (8004978 <HAL_RCC_OscConfig+0x82c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d144      	bne.n	800496e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048e4:	4b24      	ldr	r3, [pc, #144]	; (8004978 <HAL_RCC_OscConfig+0x82c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a23      	ldr	r2, [pc, #140]	; (8004978 <HAL_RCC_OscConfig+0x82c>)
 80048ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048f0:	4b21      	ldr	r3, [pc, #132]	; (8004978 <HAL_RCC_OscConfig+0x82c>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4a20      	ldr	r2, [pc, #128]	; (8004978 <HAL_RCC_OscConfig+0x82c>)
 80048f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048fc:	f7fc fc10 	bl	8001120 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004904:	f7fc fc0c 	bl	8001120 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e02c      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004916:	4b18      	ldr	r3, [pc, #96]	; (8004978 <HAL_RCC_OscConfig+0x82c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x7b8>
 8004922:	e024      	b.n	800496e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b0c      	cmp	r3, #12
 8004928:	d01f      	beq.n	800496a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <HAL_RCC_OscConfig+0x82c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a12      	ldr	r2, [pc, #72]	; (8004978 <HAL_RCC_OscConfig+0x82c>)
 8004930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004936:	f7fc fbf3 	bl	8001120 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493e:	f7fc fbef 	bl	8001120 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e00f      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <HAL_RCC_OscConfig+0x82c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f0      	bne.n	800493e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <HAL_RCC_OscConfig+0x82c>)
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	4905      	ldr	r1, [pc, #20]	; (8004978 <HAL_RCC_OscConfig+0x82c>)
 8004962:	4b06      	ldr	r3, [pc, #24]	; (800497c <HAL_RCC_OscConfig+0x830>)
 8004964:	4013      	ands	r3, r2
 8004966:	60cb      	str	r3, [r1, #12]
 8004968:	e001      	b.n	800496e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40021000 	.word	0x40021000
 800497c:	feeefffc 	.word	0xfeeefffc

08004980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0e7      	b.n	8004b64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004994:	4b75      	ldr	r3, [pc, #468]	; (8004b6c <HAL_RCC_ClockConfig+0x1ec>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d910      	bls.n	80049c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b72      	ldr	r3, [pc, #456]	; (8004b6c <HAL_RCC_ClockConfig+0x1ec>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 0207 	bic.w	r2, r3, #7
 80049aa:	4970      	ldr	r1, [pc, #448]	; (8004b6c <HAL_RCC_ClockConfig+0x1ec>)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b6e      	ldr	r3, [pc, #440]	; (8004b6c <HAL_RCC_ClockConfig+0x1ec>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0cf      	b.n	8004b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d010      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	4b66      	ldr	r3, [pc, #408]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049dc:	429a      	cmp	r2, r3
 80049de:	d908      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e0:	4b63      	ldr	r3, [pc, #396]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4960      	ldr	r1, [pc, #384]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d04c      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d107      	bne.n	8004a16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a06:	4b5a      	ldr	r3, [pc, #360]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d121      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e0a6      	b.n	8004b64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d107      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a1e:	4b54      	ldr	r3, [pc, #336]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d115      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e09a      	b.n	8004b64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d107      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a36:	4b4e      	ldr	r3, [pc, #312]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e08e      	b.n	8004b64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a46:	4b4a      	ldr	r3, [pc, #296]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e086      	b.n	8004b64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a56:	4b46      	ldr	r3, [pc, #280]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f023 0203 	bic.w	r2, r3, #3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4943      	ldr	r1, [pc, #268]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a68:	f7fc fb5a 	bl	8001120 <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6e:	e00a      	b.n	8004a86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a70:	f7fc fb56 	bl	8001120 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e06e      	b.n	8004b64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a86:	4b3a      	ldr	r3, [pc, #232]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 020c 	and.w	r2, r3, #12
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d1eb      	bne.n	8004a70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d010      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d208      	bcs.n	8004ac6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab4:	4b2e      	ldr	r3, [pc, #184]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	492b      	ldr	r1, [pc, #172]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac6:	4b29      	ldr	r3, [pc, #164]	; (8004b6c <HAL_RCC_ClockConfig+0x1ec>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d210      	bcs.n	8004af6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad4:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <HAL_RCC_ClockConfig+0x1ec>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f023 0207 	bic.w	r2, r3, #7
 8004adc:	4923      	ldr	r1, [pc, #140]	; (8004b6c <HAL_RCC_ClockConfig+0x1ec>)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae4:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <HAL_RCC_ClockConfig+0x1ec>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d001      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e036      	b.n	8004b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b02:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	4918      	ldr	r1, [pc, #96]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b20:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4910      	ldr	r1, [pc, #64]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b34:	f000 f824 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	490b      	ldr	r1, [pc, #44]	; (8004b74 <HAL_RCC_ClockConfig+0x1f4>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b50:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <HAL_RCC_ClockConfig+0x1f8>)
 8004b52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b54:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <HAL_RCC_ClockConfig+0x1fc>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fc fa91 	bl	8001080 <HAL_InitTick>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b62:	7afb      	ldrb	r3, [r7, #11]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40022000 	.word	0x40022000
 8004b70:	40021000 	.word	0x40021000
 8004b74:	0800aed0 	.word	0x0800aed0
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	20000004 	.word	0x20000004

08004b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b089      	sub	sp, #36	; 0x24
 8004b84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b8e:	4b3e      	ldr	r3, [pc, #248]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b98:	4b3b      	ldr	r3, [pc, #236]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b0c      	cmp	r3, #12
 8004bac:	d121      	bne.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d11e      	bne.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bb4:	4b34      	ldr	r3, [pc, #208]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bc0:	4b31      	ldr	r3, [pc, #196]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	e005      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004bd0:	4b2d      	ldr	r3, [pc, #180]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004bdc:	4a2b      	ldr	r2, [pc, #172]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10d      	bne.n	8004c08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bf0:	e00a      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d102      	bne.n	8004bfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bf8:	4b25      	ldr	r3, [pc, #148]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	e004      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c04:	4b23      	ldr	r3, [pc, #140]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	2b0c      	cmp	r3, #12
 8004c0c:	d134      	bne.n	8004c78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCC_GetSysClockFreq+0xa6>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d003      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0xac>
 8004c24:	e005      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c26:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c28:	617b      	str	r3, [r7, #20]
      break;
 8004c2a:	e005      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c2c:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c2e:	617b      	str	r3, [r7, #20]
      break;
 8004c30:	e002      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	617b      	str	r3, [r7, #20]
      break;
 8004c36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c38:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	091b      	lsrs	r3, r3, #4
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	3301      	adds	r3, #1
 8004c44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	fb03 f202 	mul.w	r2, r3, r2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	0e5b      	lsrs	r3, r3, #25
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	3301      	adds	r3, #1
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c78:	69bb      	ldr	r3, [r7, #24]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3724      	adds	r7, #36	; 0x24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	0800aee8 	.word	0x0800aee8
 8004c90:	00f42400 	.word	0x00f42400
 8004c94:	007a1200 	.word	0x007a1200

08004c98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <HAL_RCC_GetHCLKFreq+0x14>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000000 	.word	0x20000000

08004cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cb4:	f7ff fff0 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4904      	ldr	r1, [pc, #16]	; (8004cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	0800aee0 	.word	0x0800aee0

08004cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ce0:	f7ff ffda 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	0adb      	lsrs	r3, r3, #11
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	4904      	ldr	r1, [pc, #16]	; (8004d04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021000 	.word	0x40021000
 8004d04:	0800aee0 	.word	0x0800aee0

08004d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d14:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d20:	f7ff f990 	bl	8004044 <HAL_PWREx_GetVoltageRange>
 8004d24:	6178      	str	r0, [r7, #20]
 8004d26:	e014      	b.n	8004d52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	4a24      	ldr	r2, [pc, #144]	; (8004dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d32:	6593      	str	r3, [r2, #88]	; 0x58
 8004d34:	4b22      	ldr	r3, [pc, #136]	; (8004dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d40:	f7ff f980 	bl	8004044 <HAL_PWREx_GetVoltageRange>
 8004d44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d46:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4a:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d58:	d10b      	bne.n	8004d72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b80      	cmp	r3, #128	; 0x80
 8004d5e:	d919      	bls.n	8004d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2ba0      	cmp	r3, #160	; 0xa0
 8004d64:	d902      	bls.n	8004d6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d66:	2302      	movs	r3, #2
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	e013      	b.n	8004d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	e010      	b.n	8004d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b80      	cmp	r3, #128	; 0x80
 8004d76:	d902      	bls.n	8004d7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d78:	2303      	movs	r3, #3
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	e00a      	b.n	8004d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b80      	cmp	r3, #128	; 0x80
 8004d82:	d102      	bne.n	8004d8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d84:	2302      	movs	r3, #2
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	e004      	b.n	8004d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b70      	cmp	r3, #112	; 0x70
 8004d8e:	d101      	bne.n	8004d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d90:	2301      	movs	r3, #1
 8004d92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f023 0207 	bic.w	r2, r3, #7
 8004d9c:	4909      	ldr	r1, [pc, #36]	; (8004dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004da4:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d001      	beq.n	8004db6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40022000 	.word	0x40022000

08004dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d041      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004dec:	d02a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004dee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004df2:	d824      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004df4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004df8:	d008      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004dfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dfe:	d81e      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e08:	d010      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e0a:	e018      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e0c:	4b86      	ldr	r3, [pc, #536]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4a85      	ldr	r2, [pc, #532]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e18:	e015      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fadd 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e2a:	e00c      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3320      	adds	r3, #32
 8004e30:	2100      	movs	r1, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fbc6 	bl	80055c4 <RCCEx_PLLSAI2_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e3c:	e003      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	74fb      	strb	r3, [r7, #19]
      break;
 8004e42:	e000      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e46:	7cfb      	ldrb	r3, [r7, #19]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10b      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e4c:	4b76      	ldr	r3, [pc, #472]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e5a:	4973      	ldr	r1, [pc, #460]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e62:	e001      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	7cfb      	ldrb	r3, [r7, #19]
 8004e66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d041      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e7c:	d02a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004e7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e82:	d824      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e88:	d008      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e8e:	d81e      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e98:	d010      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e9a:	e018      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e9c:	4b62      	ldr	r3, [pc, #392]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4a61      	ldr	r2, [pc, #388]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ea8:	e015      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3304      	adds	r3, #4
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fa95 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004eba:	e00c      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3320      	adds	r3, #32
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fb7e 	bl	80055c4 <RCCEx_PLLSAI2_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ecc:	e003      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ed2:	e000      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed6:	7cfb      	ldrb	r3, [r7, #19]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004edc:	4b52      	ldr	r3, [pc, #328]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eea:	494f      	ldr	r1, [pc, #316]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ef2:	e001      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80a0 	beq.w	8005046 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f06:	2300      	movs	r3, #0
 8004f08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f0a:	4b47      	ldr	r3, [pc, #284]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00d      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f20:	4b41      	ldr	r3, [pc, #260]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	4a40      	ldr	r2, [pc, #256]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f2c:	4b3e      	ldr	r3, [pc, #248]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f3c:	4b3b      	ldr	r3, [pc, #236]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a3a      	ldr	r2, [pc, #232]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f48:	f7fc f8ea 	bl	8001120 <HAL_GetTick>
 8004f4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f4e:	e009      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f50:	f7fc f8e6 	bl	8001120 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d902      	bls.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	74fb      	strb	r3, [r7, #19]
        break;
 8004f62:	e005      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f64:	4b31      	ldr	r3, [pc, #196]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0ef      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004f70:	7cfb      	ldrb	r3, [r7, #19]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d15c      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f76:	4b2c      	ldr	r3, [pc, #176]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01f      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d019      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f94:	4b24      	ldr	r3, [pc, #144]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fa0:	4b21      	ldr	r3, [pc, #132]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	4a20      	ldr	r2, [pc, #128]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fc0:	4a19      	ldr	r2, [pc, #100]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d016      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd2:	f7fc f8a5 	bl	8001120 <HAL_GetTick>
 8004fd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd8:	e00b      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fda:	f7fc f8a1 	bl	8001120 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d902      	bls.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	74fb      	strb	r3, [r7, #19]
            break;
 8004ff0:	e006      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff2:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0ec      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10c      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	4904      	ldr	r1, [pc, #16]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800501e:	e009      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005020:	7cfb      	ldrb	r3, [r7, #19]
 8005022:	74bb      	strb	r3, [r7, #18]
 8005024:	e006      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005026:	bf00      	nop
 8005028:	40021000 	.word	0x40021000
 800502c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	7cfb      	ldrb	r3, [r7, #19]
 8005032:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005034:	7c7b      	ldrb	r3, [r7, #17]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d105      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503a:	4ba6      	ldr	r3, [pc, #664]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800503c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503e:	4aa5      	ldr	r2, [pc, #660]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005044:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005052:	4ba0      	ldr	r3, [pc, #640]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005058:	f023 0203 	bic.w	r2, r3, #3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	499c      	ldr	r1, [pc, #624]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005074:	4b97      	ldr	r3, [pc, #604]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	f023 020c 	bic.w	r2, r3, #12
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	4994      	ldr	r1, [pc, #592]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005096:	4b8f      	ldr	r3, [pc, #572]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	498b      	ldr	r1, [pc, #556]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050b8:	4b86      	ldr	r3, [pc, #536]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	4983      	ldr	r1, [pc, #524]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050da:	4b7e      	ldr	r3, [pc, #504]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e8:	497a      	ldr	r1, [pc, #488]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050fc:	4b75      	ldr	r3, [pc, #468]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510a:	4972      	ldr	r1, [pc, #456]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800511e:	4b6d      	ldr	r3, [pc, #436]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512c:	4969      	ldr	r1, [pc, #420]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005140:	4b64      	ldr	r3, [pc, #400]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514e:	4961      	ldr	r1, [pc, #388]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005162:	4b5c      	ldr	r3, [pc, #368]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005170:	4958      	ldr	r1, [pc, #352]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005184:	4b53      	ldr	r3, [pc, #332]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	4950      	ldr	r1, [pc, #320]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051a6:	4b4b      	ldr	r3, [pc, #300]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	4947      	ldr	r1, [pc, #284]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051c8:	4b42      	ldr	r3, [pc, #264]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051ce:	f023 0203 	bic.w	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d6:	493f      	ldr	r1, [pc, #252]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d028      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ea:	4b3a      	ldr	r3, [pc, #232]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	4936      	ldr	r1, [pc, #216]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005208:	d106      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800520a:	4b32      	ldr	r3, [pc, #200]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	4a31      	ldr	r2, [pc, #196]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005214:	60d3      	str	r3, [r2, #12]
 8005216:	e011      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005220:	d10c      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3304      	adds	r3, #4
 8005226:	2101      	movs	r1, #1
 8005228:	4618      	mov	r0, r3
 800522a:	f000 f8d9 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 800522e:	4603      	mov	r3, r0
 8005230:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005232:	7cfb      	ldrb	r3, [r7, #19]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d028      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005248:	4b22      	ldr	r3, [pc, #136]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005256:	491f      	ldr	r1, [pc, #124]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005266:	d106      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005268:	4b1a      	ldr	r3, [pc, #104]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800526e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005272:	60d3      	str	r3, [r2, #12]
 8005274:	e011      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800527e:	d10c      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	2101      	movs	r1, #1
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f8aa 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005296:	7cfb      	ldrb	r3, [r7, #19]
 8005298:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d02a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052b4:	4907      	ldr	r1, [pc, #28]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c4:	d108      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c6:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	4a02      	ldr	r2, [pc, #8]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d0:	60d3      	str	r3, [r2, #12]
 80052d2:	e013      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x534>
 80052d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e0:	d10c      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3304      	adds	r3, #4
 80052e6:	2101      	movs	r1, #1
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 f879 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052f2:	7cfb      	ldrb	r3, [r7, #19]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80052f8:	7cfb      	ldrb	r3, [r7, #19]
 80052fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02f      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005308:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005316:	4929      	ldr	r1, [pc, #164]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005326:	d10d      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	2102      	movs	r1, #2
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f856 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 8005334:	4603      	mov	r3, r0
 8005336:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d014      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800533e:	7cfb      	ldrb	r3, [r7, #19]
 8005340:	74bb      	strb	r3, [r7, #18]
 8005342:	e011      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800534c:	d10c      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3320      	adds	r3, #32
 8005352:	2102      	movs	r1, #2
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f935 	bl	80055c4 <RCCEx_PLLSAI2_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00b      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005374:	4b11      	ldr	r3, [pc, #68]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005384:	490d      	ldr	r1, [pc, #52]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005398:	4b08      	ldr	r3, [pc, #32]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a8:	4904      	ldr	r1, [pc, #16]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40021000 	.word	0x40021000

080053c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a04      	ldr	r2, [pc, #16]	; (80053dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80053ca:	f043 0304 	orr.w	r3, r3, #4
 80053ce:	6013      	str	r3, [r2, #0]
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000

080053e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053ee:	4b74      	ldr	r3, [pc, #464]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d018      	beq.n	800542c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053fa:	4b71      	ldr	r3, [pc, #452]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0203 	and.w	r2, r3, #3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d10d      	bne.n	8005426 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
       ||
 800540e:	2b00      	cmp	r3, #0
 8005410:	d009      	beq.n	8005426 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005412:	4b6b      	ldr	r3, [pc, #428]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	091b      	lsrs	r3, r3, #4
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
       ||
 8005422:	429a      	cmp	r2, r3
 8005424:	d047      	beq.n	80054b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
 800542a:	e044      	b.n	80054b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b03      	cmp	r3, #3
 8005432:	d018      	beq.n	8005466 <RCCEx_PLLSAI1_Config+0x86>
 8005434:	2b03      	cmp	r3, #3
 8005436:	d825      	bhi.n	8005484 <RCCEx_PLLSAI1_Config+0xa4>
 8005438:	2b01      	cmp	r3, #1
 800543a:	d002      	beq.n	8005442 <RCCEx_PLLSAI1_Config+0x62>
 800543c:	2b02      	cmp	r3, #2
 800543e:	d009      	beq.n	8005454 <RCCEx_PLLSAI1_Config+0x74>
 8005440:	e020      	b.n	8005484 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005442:	4b5f      	ldr	r3, [pc, #380]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d11d      	bne.n	800548a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005452:	e01a      	b.n	800548a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005454:	4b5a      	ldr	r3, [pc, #360]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545c:	2b00      	cmp	r3, #0
 800545e:	d116      	bne.n	800548e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005464:	e013      	b.n	800548e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005466:	4b56      	ldr	r3, [pc, #344]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005472:	4b53      	ldr	r3, [pc, #332]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005482:	e006      	b.n	8005492 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
      break;
 8005488:	e004      	b.n	8005494 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800548a:	bf00      	nop
 800548c:	e002      	b.n	8005494 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005492:	bf00      	nop
    }

    if(status == HAL_OK)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10d      	bne.n	80054b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800549a:	4b49      	ldr	r3, [pc, #292]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6819      	ldr	r1, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	430b      	orrs	r3, r1
 80054b0:	4943      	ldr	r1, [pc, #268]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d17c      	bne.n	80055b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054bc:	4b40      	ldr	r3, [pc, #256]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a3f      	ldr	r2, [pc, #252]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c8:	f7fb fe2a 	bl	8001120 <HAL_GetTick>
 80054cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054ce:	e009      	b.n	80054e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054d0:	f7fb fe26 	bl	8001120 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d902      	bls.n	80054e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	73fb      	strb	r3, [r7, #15]
        break;
 80054e2:	e005      	b.n	80054f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054e4:	4b36      	ldr	r3, [pc, #216]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ef      	bne.n	80054d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d15f      	bne.n	80055b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d110      	bne.n	800551e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054fc:	4b30      	ldr	r3, [pc, #192]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005504:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6892      	ldr	r2, [r2, #8]
 800550c:	0211      	lsls	r1, r2, #8
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68d2      	ldr	r2, [r2, #12]
 8005512:	06d2      	lsls	r2, r2, #27
 8005514:	430a      	orrs	r2, r1
 8005516:	492a      	ldr	r1, [pc, #168]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005518:	4313      	orrs	r3, r2
 800551a:	610b      	str	r3, [r1, #16]
 800551c:	e027      	b.n	800556e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d112      	bne.n	800554a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005524:	4b26      	ldr	r3, [pc, #152]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800552c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6892      	ldr	r2, [r2, #8]
 8005534:	0211      	lsls	r1, r2, #8
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6912      	ldr	r2, [r2, #16]
 800553a:	0852      	lsrs	r2, r2, #1
 800553c:	3a01      	subs	r2, #1
 800553e:	0552      	lsls	r2, r2, #21
 8005540:	430a      	orrs	r2, r1
 8005542:	491f      	ldr	r1, [pc, #124]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005544:	4313      	orrs	r3, r2
 8005546:	610b      	str	r3, [r1, #16]
 8005548:	e011      	b.n	800556e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800554a:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005552:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6892      	ldr	r2, [r2, #8]
 800555a:	0211      	lsls	r1, r2, #8
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6952      	ldr	r2, [r2, #20]
 8005560:	0852      	lsrs	r2, r2, #1
 8005562:	3a01      	subs	r2, #1
 8005564:	0652      	lsls	r2, r2, #25
 8005566:	430a      	orrs	r2, r1
 8005568:	4915      	ldr	r1, [pc, #84]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800556a:	4313      	orrs	r3, r2
 800556c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a13      	ldr	r2, [pc, #76]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005574:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005578:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557a:	f7fb fdd1 	bl	8001120 <HAL_GetTick>
 800557e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005580:	e009      	b.n	8005596 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005582:	f7fb fdcd 	bl	8001120 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d902      	bls.n	8005596 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	73fb      	strb	r3, [r7, #15]
          break;
 8005594:	e005      	b.n	80055a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0ef      	beq.n	8005582 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	4903      	ldr	r1, [pc, #12]	; (80055c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40021000 	.word	0x40021000

080055c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055d2:	4b69      	ldr	r3, [pc, #420]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d018      	beq.n	8005610 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80055de:	4b66      	ldr	r3, [pc, #408]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0203 	and.w	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d10d      	bne.n	800560a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
       ||
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80055f6:	4b60      	ldr	r3, [pc, #384]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	091b      	lsrs	r3, r3, #4
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
       ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d047      	beq.n	800569a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	73fb      	strb	r3, [r7, #15]
 800560e:	e044      	b.n	800569a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b03      	cmp	r3, #3
 8005616:	d018      	beq.n	800564a <RCCEx_PLLSAI2_Config+0x86>
 8005618:	2b03      	cmp	r3, #3
 800561a:	d825      	bhi.n	8005668 <RCCEx_PLLSAI2_Config+0xa4>
 800561c:	2b01      	cmp	r3, #1
 800561e:	d002      	beq.n	8005626 <RCCEx_PLLSAI2_Config+0x62>
 8005620:	2b02      	cmp	r3, #2
 8005622:	d009      	beq.n	8005638 <RCCEx_PLLSAI2_Config+0x74>
 8005624:	e020      	b.n	8005668 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005626:	4b54      	ldr	r3, [pc, #336]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d11d      	bne.n	800566e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005636:	e01a      	b.n	800566e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005638:	4b4f      	ldr	r3, [pc, #316]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005640:	2b00      	cmp	r3, #0
 8005642:	d116      	bne.n	8005672 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005648:	e013      	b.n	8005672 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800564a:	4b4b      	ldr	r3, [pc, #300]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10f      	bne.n	8005676 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005656:	4b48      	ldr	r3, [pc, #288]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005666:	e006      	b.n	8005676 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
      break;
 800566c:	e004      	b.n	8005678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800566e:	bf00      	nop
 8005670:	e002      	b.n	8005678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005672:	bf00      	nop
 8005674:	e000      	b.n	8005678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005676:	bf00      	nop
    }

    if(status == HAL_OK)
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10d      	bne.n	800569a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800567e:	4b3e      	ldr	r3, [pc, #248]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6819      	ldr	r1, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	3b01      	subs	r3, #1
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	430b      	orrs	r3, r1
 8005694:	4938      	ldr	r1, [pc, #224]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005696:	4313      	orrs	r3, r2
 8005698:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d166      	bne.n	800576e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056a0:	4b35      	ldr	r3, [pc, #212]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a34      	ldr	r2, [pc, #208]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ac:	f7fb fd38 	bl	8001120 <HAL_GetTick>
 80056b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056b2:	e009      	b.n	80056c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056b4:	f7fb fd34 	bl	8001120 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d902      	bls.n	80056c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	73fb      	strb	r3, [r7, #15]
        break;
 80056c6:	e005      	b.n	80056d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056c8:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1ef      	bne.n	80056b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d149      	bne.n	800576e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d110      	bne.n	8005702 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056e0:	4b25      	ldr	r3, [pc, #148]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80056e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6892      	ldr	r2, [r2, #8]
 80056f0:	0211      	lsls	r1, r2, #8
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68d2      	ldr	r2, [r2, #12]
 80056f6:	06d2      	lsls	r2, r2, #27
 80056f8:	430a      	orrs	r2, r1
 80056fa:	491f      	ldr	r1, [pc, #124]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	614b      	str	r3, [r1, #20]
 8005700:	e011      	b.n	8005726 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005702:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800570a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6892      	ldr	r2, [r2, #8]
 8005712:	0211      	lsls	r1, r2, #8
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6912      	ldr	r2, [r2, #16]
 8005718:	0852      	lsrs	r2, r2, #1
 800571a:	3a01      	subs	r2, #1
 800571c:	0652      	lsls	r2, r2, #25
 800571e:	430a      	orrs	r2, r1
 8005720:	4915      	ldr	r1, [pc, #84]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005722:	4313      	orrs	r3, r2
 8005724:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005726:	4b14      	ldr	r3, [pc, #80]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a13      	ldr	r2, [pc, #76]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 800572c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005730:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005732:	f7fb fcf5 	bl	8001120 <HAL_GetTick>
 8005736:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005738:	e009      	b.n	800574e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800573a:	f7fb fcf1 	bl	8001120 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d902      	bls.n	800574e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	73fb      	strb	r3, [r7, #15]
          break;
 800574c:	e005      	b.n	800575a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800574e:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ef      	beq.n	800573a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005762:	695a      	ldr	r2, [r3, #20]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	4903      	ldr	r1, [pc, #12]	; (8005778 <RCCEx_PLLSAI2_Config+0x1b4>)
 800576a:	4313      	orrs	r3, r2
 800576c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800576e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40021000 	.word	0x40021000

0800577c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e040      	b.n	8005810 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fb fa8a 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2224      	movs	r2, #36	; 0x24
 80057a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0201 	bic.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fbc2 	bl	8005f44 <UART_SetConfig>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e022      	b.n	8005810 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fe6e 	bl	80064b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fef5 	bl	80065f8 <UART_CheckIdleState>
 800580e:	4603      	mov	r3, r0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af02      	add	r7, sp, #8
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	4613      	mov	r3, r2
 8005826:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800582c:	2b20      	cmp	r3, #32
 800582e:	f040 8082 	bne.w	8005936 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_UART_Transmit+0x26>
 8005838:	88fb      	ldrh	r3, [r7, #6]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e07a      	b.n	8005938 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_UART_Transmit+0x38>
 800584c:	2302      	movs	r3, #2
 800584e:	e073      	b.n	8005938 <HAL_UART_Transmit+0x120>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2221      	movs	r2, #33	; 0x21
 8005864:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005866:	f7fb fc5b 	bl	8001120 <HAL_GetTick>
 800586a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	88fa      	ldrh	r2, [r7, #6]
 8005878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005884:	d108      	bne.n	8005898 <HAL_UART_Transmit+0x80>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	e003      	b.n	80058a0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80058a8:	e02d      	b.n	8005906 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	2180      	movs	r1, #128	; 0x80
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fee8 	bl	800668a <UART_WaitOnFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e039      	b.n	8005938 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	881a      	ldrh	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d6:	b292      	uxth	r2, r2
 80058d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	3302      	adds	r3, #2
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	e008      	b.n	80058f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	b292      	uxth	r2, r2
 80058ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	3301      	adds	r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1cb      	bne.n	80058aa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2200      	movs	r2, #0
 800591a:	2140      	movs	r1, #64	; 0x40
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 feb4 	bl	800668a <UART_WaitOnFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e005      	b.n	8005938 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	e000      	b.n	8005938 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005936:	2302      	movs	r3, #2
  }
}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b0ba      	sub	sp, #232	; 0xe8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005966:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800596a:	f640 030f 	movw	r3, #2063	; 0x80f
 800596e:	4013      	ands	r3, r2
 8005970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d115      	bne.n	80059a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800597c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00f      	beq.n	80059a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 82a6 	beq.w	8005eea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
      }
      return;
 80059a6:	e2a0      	b.n	8005eea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80059a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8117 	beq.w	8005be0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80059b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80059be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80059c2:	4b85      	ldr	r3, [pc, #532]	; (8005bd8 <HAL_UART_IRQHandler+0x298>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 810a 	beq.w	8005be0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d011      	beq.n	80059fc <HAL_UART_IRQHandler+0xbc>
 80059d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00b      	beq.n	80059fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2201      	movs	r2, #1
 80059ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f2:	f043 0201 	orr.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d011      	beq.n	8005a2c <HAL_UART_IRQHandler+0xec>
 8005a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00b      	beq.n	8005a2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a22:	f043 0204 	orr.w	r2, r3, #4
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d011      	beq.n	8005a5c <HAL_UART_IRQHandler+0x11c>
 8005a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2204      	movs	r2, #4
 8005a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a52:	f043 0202 	orr.w	r2, r3, #2
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d017      	beq.n	8005a98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2208      	movs	r2, #8
 8005a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a8e:	f043 0208 	orr.w	r2, r3, #8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d012      	beq.n	8005aca <HAL_UART_IRQHandler+0x18a>
 8005aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00c      	beq.n	8005aca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ac0:	f043 0220 	orr.w	r2, r3, #32
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 820c 	beq.w	8005eee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00d      	beq.n	8005afe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b40      	cmp	r3, #64	; 0x40
 8005b14:	d005      	beq.n	8005b22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d04f      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fe75 	bl	8006812 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b32:	2b40      	cmp	r3, #64	; 0x40
 8005b34:	d141      	bne.n	8005bba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1d9      	bne.n	8005b36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d013      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	4a13      	ldr	r2, [pc, #76]	; (8005bdc <HAL_UART_IRQHandler+0x29c>)
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fc fe99 	bl	80028ce <HAL_DMA_Abort_IT>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d017      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005bac:	4610      	mov	r0, r2
 8005bae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb0:	e00f      	b.n	8005bd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9b0 	bl	8005f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb8:	e00b      	b.n	8005bd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9ac 	bl	8005f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc0:	e007      	b.n	8005bd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f9a8 	bl	8005f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005bd0:	e18d      	b.n	8005eee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd2:	bf00      	nop
    return;
 8005bd4:	e18b      	b.n	8005eee <HAL_UART_IRQHandler+0x5ae>
 8005bd6:	bf00      	nop
 8005bd8:	04000120 	.word	0x04000120
 8005bdc:	080068d9 	.word	0x080068d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	f040 8146 	bne.w	8005e76 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 813f 	beq.w	8005e76 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8138 	beq.w	8005e76 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2210      	movs	r2, #16
 8005c0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	f040 80b4 	bne.w	8005d86 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 815f 	beq.w	8005ef2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	f080 8157 	bcs.w	8005ef2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f040 8085 	bne.w	8005d6a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1da      	bne.n	8005c60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3308      	adds	r3, #8
 8005cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e1      	bne.n	8005caa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3308      	adds	r3, #8
 8005cec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3308      	adds	r3, #8
 8005d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e3      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d3a:	f023 0310 	bic.w	r3, r3, #16
 8005d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d4e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e4      	bne.n	8005d2a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fc fd74 	bl	8002852 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f8d4 	bl	8005f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d84:	e0b5      	b.n	8005ef2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80a7 	beq.w	8005ef6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80a2 	beq.w	8005ef6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e4      	bne.n	8005db2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3308      	adds	r3, #8
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	623b      	str	r3, [r7, #32]
   return(result);
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	f023 0301 	bic.w	r3, r3, #1
 8005dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3308      	adds	r3, #8
 8005e08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e0c:	633a      	str	r2, [r7, #48]	; 0x30
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e3      	bne.n	8005de8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2220      	movs	r2, #32
 8005e24:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0310 	bic.w	r3, r3, #16
 8005e46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	69b9      	ldr	r1, [r7, #24]
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	617b      	str	r3, [r7, #20]
   return(result);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e4      	bne.n	8005e32 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f85c 	bl	8005f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e74:	e03f      	b.n	8005ef6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00e      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x560>
 8005e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d008      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fd5d 	bl	8006958 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e9e:	e02d      	b.n	8005efc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00e      	beq.n	8005eca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01c      	beq.n	8005efa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	4798      	blx	r3
    }
    return;
 8005ec8:	e017      	b.n	8005efa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d012      	beq.n	8005efc <HAL_UART_IRQHandler+0x5bc>
 8005ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00c      	beq.n	8005efc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fd0e 	bl	8006904 <UART_EndTransmit_IT>
    return;
 8005ee8:	e008      	b.n	8005efc <HAL_UART_IRQHandler+0x5bc>
      return;
 8005eea:	bf00      	nop
 8005eec:	e006      	b.n	8005efc <HAL_UART_IRQHandler+0x5bc>
    return;
 8005eee:	bf00      	nop
 8005ef0:	e004      	b.n	8005efc <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ef2:	bf00      	nop
 8005ef4:	e002      	b.n	8005efc <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ef6:	bf00      	nop
 8005ef8:	e000      	b.n	8005efc <HAL_UART_IRQHandler+0x5bc>
    return;
 8005efa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005efc:	37e8      	adds	r7, #232	; 0xe8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop

08005f04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f48:	b08a      	sub	sp, #40	; 0x28
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4ba4      	ldr	r3, [pc, #656]	; (8006204 <UART_SetConfig+0x2c0>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a99      	ldr	r2, [pc, #612]	; (8006208 <UART_SetConfig+0x2c4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fac:	4313      	orrs	r3, r2
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a90      	ldr	r2, [pc, #576]	; (800620c <UART_SetConfig+0x2c8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d126      	bne.n	800601c <UART_SetConfig+0xd8>
 8005fce:	4b90      	ldr	r3, [pc, #576]	; (8006210 <UART_SetConfig+0x2cc>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d81b      	bhi.n	8006014 <UART_SetConfig+0xd0>
 8005fdc:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <UART_SetConfig+0xa0>)
 8005fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe2:	bf00      	nop
 8005fe4:	08005ff5 	.word	0x08005ff5
 8005fe8:	08006005 	.word	0x08006005
 8005fec:	08005ffd 	.word	0x08005ffd
 8005ff0:	0800600d 	.word	0x0800600d
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffa:	e116      	b.n	800622a <UART_SetConfig+0x2e6>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006002:	e112      	b.n	800622a <UART_SetConfig+0x2e6>
 8006004:	2304      	movs	r3, #4
 8006006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600a:	e10e      	b.n	800622a <UART_SetConfig+0x2e6>
 800600c:	2308      	movs	r3, #8
 800600e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006012:	e10a      	b.n	800622a <UART_SetConfig+0x2e6>
 8006014:	2310      	movs	r3, #16
 8006016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601a:	e106      	b.n	800622a <UART_SetConfig+0x2e6>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a7c      	ldr	r2, [pc, #496]	; (8006214 <UART_SetConfig+0x2d0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d138      	bne.n	8006098 <UART_SetConfig+0x154>
 8006026:	4b7a      	ldr	r3, [pc, #488]	; (8006210 <UART_SetConfig+0x2cc>)
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602c:	f003 030c 	and.w	r3, r3, #12
 8006030:	2b0c      	cmp	r3, #12
 8006032:	d82d      	bhi.n	8006090 <UART_SetConfig+0x14c>
 8006034:	a201      	add	r2, pc, #4	; (adr r2, 800603c <UART_SetConfig+0xf8>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	08006071 	.word	0x08006071
 8006040:	08006091 	.word	0x08006091
 8006044:	08006091 	.word	0x08006091
 8006048:	08006091 	.word	0x08006091
 800604c:	08006081 	.word	0x08006081
 8006050:	08006091 	.word	0x08006091
 8006054:	08006091 	.word	0x08006091
 8006058:	08006091 	.word	0x08006091
 800605c:	08006079 	.word	0x08006079
 8006060:	08006091 	.word	0x08006091
 8006064:	08006091 	.word	0x08006091
 8006068:	08006091 	.word	0x08006091
 800606c:	08006089 	.word	0x08006089
 8006070:	2300      	movs	r3, #0
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006076:	e0d8      	b.n	800622a <UART_SetConfig+0x2e6>
 8006078:	2302      	movs	r3, #2
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607e:	e0d4      	b.n	800622a <UART_SetConfig+0x2e6>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006086:	e0d0      	b.n	800622a <UART_SetConfig+0x2e6>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608e:	e0cc      	b.n	800622a <UART_SetConfig+0x2e6>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006096:	e0c8      	b.n	800622a <UART_SetConfig+0x2e6>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a5e      	ldr	r2, [pc, #376]	; (8006218 <UART_SetConfig+0x2d4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d125      	bne.n	80060ee <UART_SetConfig+0x1aa>
 80060a2:	4b5b      	ldr	r3, [pc, #364]	; (8006210 <UART_SetConfig+0x2cc>)
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060ac:	2b30      	cmp	r3, #48	; 0x30
 80060ae:	d016      	beq.n	80060de <UART_SetConfig+0x19a>
 80060b0:	2b30      	cmp	r3, #48	; 0x30
 80060b2:	d818      	bhi.n	80060e6 <UART_SetConfig+0x1a2>
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d00a      	beq.n	80060ce <UART_SetConfig+0x18a>
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d814      	bhi.n	80060e6 <UART_SetConfig+0x1a2>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <UART_SetConfig+0x182>
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d008      	beq.n	80060d6 <UART_SetConfig+0x192>
 80060c4:	e00f      	b.n	80060e6 <UART_SetConfig+0x1a2>
 80060c6:	2300      	movs	r3, #0
 80060c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060cc:	e0ad      	b.n	800622a <UART_SetConfig+0x2e6>
 80060ce:	2302      	movs	r3, #2
 80060d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d4:	e0a9      	b.n	800622a <UART_SetConfig+0x2e6>
 80060d6:	2304      	movs	r3, #4
 80060d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060dc:	e0a5      	b.n	800622a <UART_SetConfig+0x2e6>
 80060de:	2308      	movs	r3, #8
 80060e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e4:	e0a1      	b.n	800622a <UART_SetConfig+0x2e6>
 80060e6:	2310      	movs	r3, #16
 80060e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ec:	e09d      	b.n	800622a <UART_SetConfig+0x2e6>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a4a      	ldr	r2, [pc, #296]	; (800621c <UART_SetConfig+0x2d8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d125      	bne.n	8006144 <UART_SetConfig+0x200>
 80060f8:	4b45      	ldr	r3, [pc, #276]	; (8006210 <UART_SetConfig+0x2cc>)
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006102:	2bc0      	cmp	r3, #192	; 0xc0
 8006104:	d016      	beq.n	8006134 <UART_SetConfig+0x1f0>
 8006106:	2bc0      	cmp	r3, #192	; 0xc0
 8006108:	d818      	bhi.n	800613c <UART_SetConfig+0x1f8>
 800610a:	2b80      	cmp	r3, #128	; 0x80
 800610c:	d00a      	beq.n	8006124 <UART_SetConfig+0x1e0>
 800610e:	2b80      	cmp	r3, #128	; 0x80
 8006110:	d814      	bhi.n	800613c <UART_SetConfig+0x1f8>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <UART_SetConfig+0x1d8>
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d008      	beq.n	800612c <UART_SetConfig+0x1e8>
 800611a:	e00f      	b.n	800613c <UART_SetConfig+0x1f8>
 800611c:	2300      	movs	r3, #0
 800611e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006122:	e082      	b.n	800622a <UART_SetConfig+0x2e6>
 8006124:	2302      	movs	r3, #2
 8006126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800612a:	e07e      	b.n	800622a <UART_SetConfig+0x2e6>
 800612c:	2304      	movs	r3, #4
 800612e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006132:	e07a      	b.n	800622a <UART_SetConfig+0x2e6>
 8006134:	2308      	movs	r3, #8
 8006136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800613a:	e076      	b.n	800622a <UART_SetConfig+0x2e6>
 800613c:	2310      	movs	r3, #16
 800613e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006142:	e072      	b.n	800622a <UART_SetConfig+0x2e6>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a35      	ldr	r2, [pc, #212]	; (8006220 <UART_SetConfig+0x2dc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d12a      	bne.n	80061a4 <UART_SetConfig+0x260>
 800614e:	4b30      	ldr	r3, [pc, #192]	; (8006210 <UART_SetConfig+0x2cc>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800615c:	d01a      	beq.n	8006194 <UART_SetConfig+0x250>
 800615e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006162:	d81b      	bhi.n	800619c <UART_SetConfig+0x258>
 8006164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006168:	d00c      	beq.n	8006184 <UART_SetConfig+0x240>
 800616a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800616e:	d815      	bhi.n	800619c <UART_SetConfig+0x258>
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <UART_SetConfig+0x238>
 8006174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006178:	d008      	beq.n	800618c <UART_SetConfig+0x248>
 800617a:	e00f      	b.n	800619c <UART_SetConfig+0x258>
 800617c:	2300      	movs	r3, #0
 800617e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006182:	e052      	b.n	800622a <UART_SetConfig+0x2e6>
 8006184:	2302      	movs	r3, #2
 8006186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800618a:	e04e      	b.n	800622a <UART_SetConfig+0x2e6>
 800618c:	2304      	movs	r3, #4
 800618e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006192:	e04a      	b.n	800622a <UART_SetConfig+0x2e6>
 8006194:	2308      	movs	r3, #8
 8006196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619a:	e046      	b.n	800622a <UART_SetConfig+0x2e6>
 800619c:	2310      	movs	r3, #16
 800619e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a2:	e042      	b.n	800622a <UART_SetConfig+0x2e6>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a17      	ldr	r2, [pc, #92]	; (8006208 <UART_SetConfig+0x2c4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d13a      	bne.n	8006224 <UART_SetConfig+0x2e0>
 80061ae:	4b18      	ldr	r3, [pc, #96]	; (8006210 <UART_SetConfig+0x2cc>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061bc:	d01a      	beq.n	80061f4 <UART_SetConfig+0x2b0>
 80061be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061c2:	d81b      	bhi.n	80061fc <UART_SetConfig+0x2b8>
 80061c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c8:	d00c      	beq.n	80061e4 <UART_SetConfig+0x2a0>
 80061ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ce:	d815      	bhi.n	80061fc <UART_SetConfig+0x2b8>
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <UART_SetConfig+0x298>
 80061d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d8:	d008      	beq.n	80061ec <UART_SetConfig+0x2a8>
 80061da:	e00f      	b.n	80061fc <UART_SetConfig+0x2b8>
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e2:	e022      	b.n	800622a <UART_SetConfig+0x2e6>
 80061e4:	2302      	movs	r3, #2
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ea:	e01e      	b.n	800622a <UART_SetConfig+0x2e6>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f2:	e01a      	b.n	800622a <UART_SetConfig+0x2e6>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fa:	e016      	b.n	800622a <UART_SetConfig+0x2e6>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006202:	e012      	b.n	800622a <UART_SetConfig+0x2e6>
 8006204:	efff69f3 	.word	0xefff69f3
 8006208:	40008000 	.word	0x40008000
 800620c:	40013800 	.word	0x40013800
 8006210:	40021000 	.word	0x40021000
 8006214:	40004400 	.word	0x40004400
 8006218:	40004800 	.word	0x40004800
 800621c:	40004c00 	.word	0x40004c00
 8006220:	40005000 	.word	0x40005000
 8006224:	2310      	movs	r3, #16
 8006226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a9f      	ldr	r2, [pc, #636]	; (80064ac <UART_SetConfig+0x568>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d17a      	bne.n	800632a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006238:	2b08      	cmp	r3, #8
 800623a:	d824      	bhi.n	8006286 <UART_SetConfig+0x342>
 800623c:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <UART_SetConfig+0x300>)
 800623e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	08006269 	.word	0x08006269
 8006248:	08006287 	.word	0x08006287
 800624c:	08006271 	.word	0x08006271
 8006250:	08006287 	.word	0x08006287
 8006254:	08006277 	.word	0x08006277
 8006258:	08006287 	.word	0x08006287
 800625c:	08006287 	.word	0x08006287
 8006260:	08006287 	.word	0x08006287
 8006264:	0800627f 	.word	0x0800627f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006268:	f7fe fd22 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 800626c:	61f8      	str	r0, [r7, #28]
        break;
 800626e:	e010      	b.n	8006292 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006270:	4b8f      	ldr	r3, [pc, #572]	; (80064b0 <UART_SetConfig+0x56c>)
 8006272:	61fb      	str	r3, [r7, #28]
        break;
 8006274:	e00d      	b.n	8006292 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006276:	f7fe fc83 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 800627a:	61f8      	str	r0, [r7, #28]
        break;
 800627c:	e009      	b.n	8006292 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006282:	61fb      	str	r3, [r7, #28]
        break;
 8006284:	e005      	b.n	8006292 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006290:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80fb 	beq.w	8006490 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	4413      	add	r3, r2
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d305      	bcc.n	80062b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d903      	bls.n	80062be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062bc:	e0e8      	b.n	8006490 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	2200      	movs	r2, #0
 80062c2:	461c      	mov	r4, r3
 80062c4:	4615      	mov	r5, r2
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	f04f 0300 	mov.w	r3, #0
 80062ce:	022b      	lsls	r3, r5, #8
 80062d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80062d4:	0222      	lsls	r2, r4, #8
 80062d6:	68f9      	ldr	r1, [r7, #12]
 80062d8:	6849      	ldr	r1, [r1, #4]
 80062da:	0849      	lsrs	r1, r1, #1
 80062dc:	2000      	movs	r0, #0
 80062de:	4688      	mov	r8, r1
 80062e0:	4681      	mov	r9, r0
 80062e2:	eb12 0a08 	adds.w	sl, r2, r8
 80062e6:	eb43 0b09 	adc.w	fp, r3, r9
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	603b      	str	r3, [r7, #0]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f8:	4650      	mov	r0, sl
 80062fa:	4659      	mov	r1, fp
 80062fc:	f7f9 ffd0 	bl	80002a0 <__aeabi_uldivmod>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4613      	mov	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800630e:	d308      	bcc.n	8006322 <UART_SetConfig+0x3de>
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006316:	d204      	bcs.n	8006322 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	60da      	str	r2, [r3, #12]
 8006320:	e0b6      	b.n	8006490 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006328:	e0b2      	b.n	8006490 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006332:	d15e      	bne.n	80063f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006338:	2b08      	cmp	r3, #8
 800633a:	d828      	bhi.n	800638e <UART_SetConfig+0x44a>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <UART_SetConfig+0x400>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	08006369 	.word	0x08006369
 8006348:	08006371 	.word	0x08006371
 800634c:	08006379 	.word	0x08006379
 8006350:	0800638f 	.word	0x0800638f
 8006354:	0800637f 	.word	0x0800637f
 8006358:	0800638f 	.word	0x0800638f
 800635c:	0800638f 	.word	0x0800638f
 8006360:	0800638f 	.word	0x0800638f
 8006364:	08006387 	.word	0x08006387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006368:	f7fe fca2 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 800636c:	61f8      	str	r0, [r7, #28]
        break;
 800636e:	e014      	b.n	800639a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006370:	f7fe fcb4 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
 8006374:	61f8      	str	r0, [r7, #28]
        break;
 8006376:	e010      	b.n	800639a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006378:	4b4d      	ldr	r3, [pc, #308]	; (80064b0 <UART_SetConfig+0x56c>)
 800637a:	61fb      	str	r3, [r7, #28]
        break;
 800637c:	e00d      	b.n	800639a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637e:	f7fe fbff 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8006382:	61f8      	str	r0, [r7, #28]
        break;
 8006384:	e009      	b.n	800639a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800638a:	61fb      	str	r3, [r7, #28]
        break;
 800638c:	e005      	b.n	800639a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d077      	beq.n	8006490 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	005a      	lsls	r2, r3, #1
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	441a      	add	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b0f      	cmp	r3, #15
 80063ba:	d916      	bls.n	80063ea <UART_SetConfig+0x4a6>
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c2:	d212      	bcs.n	80063ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f023 030f 	bic.w	r3, r3, #15
 80063cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	085b      	lsrs	r3, r3, #1
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	b29a      	uxth	r2, r3
 80063da:	8afb      	ldrh	r3, [r7, #22]
 80063dc:	4313      	orrs	r3, r2
 80063de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	8afa      	ldrh	r2, [r7, #22]
 80063e6:	60da      	str	r2, [r3, #12]
 80063e8:	e052      	b.n	8006490 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063f0:	e04e      	b.n	8006490 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d827      	bhi.n	800644a <UART_SetConfig+0x506>
 80063fa:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <UART_SetConfig+0x4bc>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006425 	.word	0x08006425
 8006404:	0800642d 	.word	0x0800642d
 8006408:	08006435 	.word	0x08006435
 800640c:	0800644b 	.word	0x0800644b
 8006410:	0800643b 	.word	0x0800643b
 8006414:	0800644b 	.word	0x0800644b
 8006418:	0800644b 	.word	0x0800644b
 800641c:	0800644b 	.word	0x0800644b
 8006420:	08006443 	.word	0x08006443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006424:	f7fe fc44 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 8006428:	61f8      	str	r0, [r7, #28]
        break;
 800642a:	e014      	b.n	8006456 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800642c:	f7fe fc56 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
 8006430:	61f8      	str	r0, [r7, #28]
        break;
 8006432:	e010      	b.n	8006456 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006434:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <UART_SetConfig+0x56c>)
 8006436:	61fb      	str	r3, [r7, #28]
        break;
 8006438:	e00d      	b.n	8006456 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800643a:	f7fe fba1 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 800643e:	61f8      	str	r0, [r7, #28]
        break;
 8006440:	e009      	b.n	8006456 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006446:	61fb      	str	r3, [r7, #28]
        break;
 8006448:	e005      	b.n	8006456 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006454:	bf00      	nop
    }

    if (pclk != 0U)
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d019      	beq.n	8006490 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	085a      	lsrs	r2, r3, #1
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	441a      	add	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	fbb2 f3f3 	udiv	r3, r2, r3
 800646e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	2b0f      	cmp	r3, #15
 8006474:	d909      	bls.n	800648a <UART_SetConfig+0x546>
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647c:	d205      	bcs.n	800648a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60da      	str	r2, [r3, #12]
 8006488:	e002      	b.n	8006490 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800649c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3728      	adds	r7, #40	; 0x28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064aa:	bf00      	nop
 80064ac:	40008000 	.word	0x40008000
 80064b0:	00f42400 	.word	0x00f42400

080064b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01a      	beq.n	80065ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b2:	d10a      	bne.n	80065ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006608:	f7fa fd8a 	bl	8001120 <HAL_GetTick>
 800660c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0308 	and.w	r3, r3, #8
 8006618:	2b08      	cmp	r3, #8
 800661a:	d10e      	bne.n	800663a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800661c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f82d 	bl	800668a <UART_WaitOnFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e023      	b.n	8006682 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b04      	cmp	r3, #4
 8006646:	d10e      	bne.n	8006666 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f817 	bl	800668a <UART_WaitOnFlagUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e00d      	b.n	8006682 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b09c      	sub	sp, #112	; 0x70
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	4613      	mov	r3, r2
 8006698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669a:	e0a5      	b.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066a2:	f000 80a1 	beq.w	80067e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a6:	f7fa fd3b 	bl	8001120 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d302      	bcc.n	80066bc <UART_WaitOnFlagUntilTimeout+0x32>
 80066b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d13e      	bne.n	800673a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066d0:	667b      	str	r3, [r7, #100]	; 0x64
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e6      	bne.n	80066bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	f023 0301 	bic.w	r3, r3, #1
 8006704:	663b      	str	r3, [r7, #96]	; 0x60
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800670e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006710:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800671c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e5      	bne.n	80066ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e067      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d04f      	beq.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006756:	d147      	bne.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006760:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006776:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006780:	637b      	str	r3, [r7, #52]	; 0x34
 8006782:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e6      	bne.n	8006762 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3308      	adds	r3, #8
 800679a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	613b      	str	r3, [r7, #16]
   return(result);
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f023 0301 	bic.w	r3, r3, #1
 80067aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3308      	adds	r3, #8
 80067b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067b4:	623a      	str	r2, [r7, #32]
 80067b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	69f9      	ldr	r1, [r7, #28]
 80067ba:	6a3a      	ldr	r2, [r7, #32]
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e5      	bne.n	8006794 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e010      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69da      	ldr	r2, [r3, #28]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	4013      	ands	r3, r2
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	bf0c      	ite	eq
 80067f8:	2301      	moveq	r3, #1
 80067fa:	2300      	movne	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	429a      	cmp	r2, r3
 8006804:	f43f af4a 	beq.w	800669c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3770      	adds	r7, #112	; 0x70
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006812:	b480      	push	{r7}
 8006814:	b095      	sub	sp, #84	; 0x54
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800682e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006838:	643b      	str	r3, [r7, #64]	; 0x40
 800683a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800683e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3308      	adds	r3, #8
 8006852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	61fb      	str	r3, [r7, #28]
   return(result);
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f023 0301 	bic.w	r3, r3, #1
 8006862:	64bb      	str	r3, [r7, #72]	; 0x48
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3308      	adds	r3, #8
 800686a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800686c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e5      	bne.n	800684c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006884:	2b01      	cmp	r3, #1
 8006886:	d118      	bne.n	80068ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	60bb      	str	r3, [r7, #8]
   return(result);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f023 0310 	bic.w	r3, r3, #16
 800689c:	647b      	str	r3, [r7, #68]	; 0x44
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a6:	61bb      	str	r3, [r7, #24]
 80068a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6979      	ldr	r1, [r7, #20]
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	613b      	str	r3, [r7, #16]
   return(result);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e6      	bne.n	8006888 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	665a      	str	r2, [r3, #100]	; 0x64
}
 80068cc:	bf00      	nop
 80068ce:	3754      	adds	r7, #84	; 0x54
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff fb0e 	bl	8005f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	60bb      	str	r3, [r7, #8]
   return(result);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006920:	61fb      	str	r3, [r7, #28]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	461a      	mov	r2, r3
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	613b      	str	r3, [r7, #16]
   return(result);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e6      	bne.n	800690c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff fada 	bl	8005f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006950:	bf00      	nop
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800696c:	b084      	sub	sp, #16
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	f107 001c 	add.w	r0, r7, #28
 800697a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 faf6 	bl	8007f7c <USB_CoreReset>
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	639a      	str	r2, [r3, #56]	; 0x38
 80069a6:	e005      	b.n	80069b4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069c0:	b004      	add	sp, #16
 80069c2:	4770      	bx	lr

080069c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	4613      	mov	r3, r2
 80069d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80069d2:	79fb      	ldrb	r3, [r7, #7]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d165      	bne.n	8006aa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	4a3e      	ldr	r2, [pc, #248]	; (8006ad4 <USB_SetTurnaroundTime+0x110>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d906      	bls.n	80069ee <USB_SetTurnaroundTime+0x2a>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4a3d      	ldr	r2, [pc, #244]	; (8006ad8 <USB_SetTurnaroundTime+0x114>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d202      	bcs.n	80069ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80069e8:	230f      	movs	r3, #15
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	e05c      	b.n	8006aa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	4a39      	ldr	r2, [pc, #228]	; (8006ad8 <USB_SetTurnaroundTime+0x114>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d306      	bcc.n	8006a04 <USB_SetTurnaroundTime+0x40>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	4a38      	ldr	r2, [pc, #224]	; (8006adc <USB_SetTurnaroundTime+0x118>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d202      	bcs.n	8006a04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80069fe:	230e      	movs	r3, #14
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	e051      	b.n	8006aa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4a35      	ldr	r2, [pc, #212]	; (8006adc <USB_SetTurnaroundTime+0x118>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d306      	bcc.n	8006a1a <USB_SetTurnaroundTime+0x56>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4a34      	ldr	r2, [pc, #208]	; (8006ae0 <USB_SetTurnaroundTime+0x11c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d202      	bcs.n	8006a1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a14:	230d      	movs	r3, #13
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e046      	b.n	8006aa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4a30      	ldr	r2, [pc, #192]	; (8006ae0 <USB_SetTurnaroundTime+0x11c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d306      	bcc.n	8006a30 <USB_SetTurnaroundTime+0x6c>
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4a2f      	ldr	r2, [pc, #188]	; (8006ae4 <USB_SetTurnaroundTime+0x120>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d802      	bhi.n	8006a30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	e03b      	b.n	8006aa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4a2c      	ldr	r2, [pc, #176]	; (8006ae4 <USB_SetTurnaroundTime+0x120>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d906      	bls.n	8006a46 <USB_SetTurnaroundTime+0x82>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4a2b      	ldr	r2, [pc, #172]	; (8006ae8 <USB_SetTurnaroundTime+0x124>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d802      	bhi.n	8006a46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a40:	230b      	movs	r3, #11
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e030      	b.n	8006aa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4a27      	ldr	r2, [pc, #156]	; (8006ae8 <USB_SetTurnaroundTime+0x124>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d906      	bls.n	8006a5c <USB_SetTurnaroundTime+0x98>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4a26      	ldr	r2, [pc, #152]	; (8006aec <USB_SetTurnaroundTime+0x128>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d802      	bhi.n	8006a5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a56:	230a      	movs	r3, #10
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	e025      	b.n	8006aa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4a23      	ldr	r2, [pc, #140]	; (8006aec <USB_SetTurnaroundTime+0x128>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d906      	bls.n	8006a72 <USB_SetTurnaroundTime+0xae>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4a22      	ldr	r2, [pc, #136]	; (8006af0 <USB_SetTurnaroundTime+0x12c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d202      	bcs.n	8006a72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a6c:	2309      	movs	r3, #9
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e01a      	b.n	8006aa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4a1e      	ldr	r2, [pc, #120]	; (8006af0 <USB_SetTurnaroundTime+0x12c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d306      	bcc.n	8006a88 <USB_SetTurnaroundTime+0xc4>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <USB_SetTurnaroundTime+0x130>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d802      	bhi.n	8006a88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a82:	2308      	movs	r3, #8
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	e00f      	b.n	8006aa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <USB_SetTurnaroundTime+0x130>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d906      	bls.n	8006a9e <USB_SetTurnaroundTime+0xda>
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4a19      	ldr	r2, [pc, #100]	; (8006af8 <USB_SetTurnaroundTime+0x134>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d202      	bcs.n	8006a9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a98:	2307      	movs	r3, #7
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	e004      	b.n	8006aa8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a9e:	2306      	movs	r3, #6
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	e001      	b.n	8006aa8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006aa4:	2309      	movs	r3, #9
 8006aa6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	029b      	lsls	r3, r3, #10
 8006abc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	00d8acbf 	.word	0x00d8acbf
 8006ad8:	00e4e1c0 	.word	0x00e4e1c0
 8006adc:	00f42400 	.word	0x00f42400
 8006ae0:	01067380 	.word	0x01067380
 8006ae4:	011a499f 	.word	0x011a499f
 8006ae8:	01312cff 	.word	0x01312cff
 8006aec:	014ca43f 	.word	0x014ca43f
 8006af0:	016e3600 	.word	0x016e3600
 8006af4:	01a6ab1f 	.word	0x01a6ab1f
 8006af8:	01e84800 	.word	0x01e84800

08006afc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f043 0201 	orr.w	r2, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f023 0201 	bic.w	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d115      	bne.n	8006b8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b6e:	2001      	movs	r0, #1
 8006b70:	f7fa fae2 	bl	8001138 <HAL_Delay>
      ms++;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3301      	adds	r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 f985 	bl	8007e8a <USB_GetMode>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d01e      	beq.n	8006bc4 <USB_SetCurrentMode+0x84>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b31      	cmp	r3, #49	; 0x31
 8006b8a:	d9f0      	bls.n	8006b6e <USB_SetCurrentMode+0x2e>
 8006b8c:	e01a      	b.n	8006bc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b8e:	78fb      	ldrb	r3, [r7, #3]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d115      	bne.n	8006bc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	f7fa fac9 	bl	8001138 <HAL_Delay>
      ms++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 f96c 	bl	8007e8a <USB_GetMode>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <USB_SetCurrentMode+0x84>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b31      	cmp	r3, #49	; 0x31
 8006bbc:	d9f0      	bls.n	8006ba0 <USB_SetCurrentMode+0x60>
 8006bbe:	e001      	b.n	8006bc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e005      	b.n	8006bd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b32      	cmp	r3, #50	; 0x32
 8006bc8:	d101      	bne.n	8006bce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bd8:	b084      	sub	sp, #16
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	613b      	str	r3, [r7, #16]
 8006bf6:	e009      	b.n	8006c0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	3340      	adds	r3, #64	; 0x40
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	2200      	movs	r2, #0
 8006c04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	613b      	str	r3, [r7, #16]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2b0e      	cmp	r3, #14
 8006c10:	d9f2      	bls.n	8006bf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d11c      	bne.n	8006c52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c26:	f043 0302 	orr.w	r3, r3, #2
 8006c2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	e005      	b.n	8006c5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c64:	461a      	mov	r2, r3
 8006c66:	2300      	movs	r3, #0
 8006c68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c70:	4619      	mov	r1, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c78:	461a      	mov	r2, r3
 8006c7a:	680b      	ldr	r3, [r1, #0]
 8006c7c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c7e:	2103      	movs	r1, #3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f959 	bl	8006f38 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c86:	2110      	movs	r1, #16
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f8f1 	bl	8006e70 <USB_FlushTxFifo>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f91d 	bl	8006ed8 <USB_FlushRxFifo>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	461a      	mov	r2, r3
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	e043      	b.n	8006d5a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce8:	d118      	bne.n	8006d1c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	e013      	b.n	8006d2e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	461a      	mov	r2, r3
 8006d14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	e008      	b.n	8006d2e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	3301      	adds	r3, #1
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d3b7      	bcc.n	8006cd2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d62:	2300      	movs	r3, #0
 8006d64:	613b      	str	r3, [r7, #16]
 8006d66:	e043      	b.n	8006df0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d7e:	d118      	bne.n	8006db2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d92:	461a      	mov	r2, r3
 8006d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	e013      	b.n	8006dc4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	461a      	mov	r2, r3
 8006daa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	e008      	b.n	8006dc4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de2:	461a      	mov	r2, r3
 8006de4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006de8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3301      	adds	r3, #1
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d3b7      	bcc.n	8006d68 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f043 0210 	orr.w	r2, r3, #16
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <USB_DevInit+0x294>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	f043 0208 	orr.w	r2, r3, #8
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d107      	bne.n	8006e5a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e52:	f043 0304 	orr.w	r3, r3, #4
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e66:	b004      	add	sp, #16
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	803c3800 	.word	0x803c3800

08006e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3301      	adds	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <USB_FlushTxFifo+0x64>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d901      	bls.n	8006e90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e01b      	b.n	8006ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	daf2      	bge.n	8006e7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	019b      	lsls	r3, r3, #6
 8006ea0:	f043 0220 	orr.w	r2, r3, #32
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <USB_FlushTxFifo+0x64>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d901      	bls.n	8006eba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e006      	b.n	8006ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d0f0      	beq.n	8006ea8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	00030d40 	.word	0x00030d40

08006ed8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a11      	ldr	r2, [pc, #68]	; (8006f34 <USB_FlushRxFifo+0x5c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d901      	bls.n	8006ef6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e018      	b.n	8006f28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	daf2      	bge.n	8006ee4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2210      	movs	r2, #16
 8006f06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4a08      	ldr	r2, [pc, #32]	; (8006f34 <USB_FlushRxFifo+0x5c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d901      	bls.n	8006f1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e006      	b.n	8006f28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0310 	and.w	r3, r3, #16
 8006f22:	2b10      	cmp	r3, #16
 8006f24:	d0f0      	beq.n	8006f08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	00030d40 	.word	0x00030d40

08006f38 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b087      	sub	sp, #28
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 0306 	and.w	r3, r3, #6
 8006f82:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d002      	beq.n	8006f90 <USB_GetDevSpeed+0x26>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b06      	cmp	r3, #6
 8006f8e:	d102      	bne.n	8006f96 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f90:	2302      	movs	r3, #2
 8006f92:	75fb      	strb	r3, [r7, #23]
 8006f94:	e001      	b.n	8006f9a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006f96:	230f      	movs	r3, #15
 8006f98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d13a      	bne.n	800703a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d155      	bne.n	80070a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	791b      	ldrb	r3, [r3, #4]
 8007016:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007018:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	059b      	lsls	r3, r3, #22
 800701e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007020:	4313      	orrs	r3, r2
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	e036      	b.n	80070a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007040:	69da      	ldr	r2, [r3, #28]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	2101      	movs	r1, #1
 800704c:	fa01 f303 	lsl.w	r3, r1, r3
 8007050:	041b      	lsls	r3, r3, #16
 8007052:	68f9      	ldr	r1, [r7, #12]
 8007054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007058:	4313      	orrs	r3, r2
 800705a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d11a      	bne.n	80070a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	791b      	ldrb	r3, [r3, #4]
 800708c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800708e:	430b      	orrs	r3, r1
 8007090:	4313      	orrs	r3, r2
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	440a      	add	r2, r1
 800709a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d161      	bne.n	8007198 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ea:	d11f      	bne.n	800712c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	0151      	lsls	r1, r2, #5
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	440a      	add	r2, r1
 8007102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007106:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800710a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	0151      	lsls	r1, r2, #5
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	440a      	add	r2, r1
 8007122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007126:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800712a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f303 	lsl.w	r3, r1, r3
 8007142:	b29b      	uxth	r3, r3
 8007144:	43db      	mvns	r3, r3
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800714c:	4013      	ands	r3, r2
 800714e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007156:	69da      	ldr	r2, [r3, #28]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	2101      	movs	r1, #1
 8007162:	fa01 f303 	lsl.w	r3, r1, r3
 8007166:	b29b      	uxth	r3, r3
 8007168:	43db      	mvns	r3, r3
 800716a:	68f9      	ldr	r1, [r7, #12]
 800716c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007170:	4013      	ands	r3, r2
 8007172:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	0159      	lsls	r1, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	440b      	add	r3, r1
 800718a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718e:	4619      	mov	r1, r3
 8007190:	4b35      	ldr	r3, [pc, #212]	; (8007268 <USB_DeactivateEndpoint+0x1b0>)
 8007192:	4013      	ands	r3, r2
 8007194:	600b      	str	r3, [r1, #0]
 8007196:	e060      	b.n	800725a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ae:	d11f      	bne.n	80071f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	2101      	movs	r1, #1
 8007202:	fa01 f303 	lsl.w	r3, r1, r3
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	43db      	mvns	r3, r3
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007210:	4013      	ands	r3, r2
 8007212:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	f003 030f 	and.w	r3, r3, #15
 8007224:	2101      	movs	r1, #1
 8007226:	fa01 f303 	lsl.w	r3, r1, r3
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	43db      	mvns	r3, r3
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007234:	4013      	ands	r3, r2
 8007236:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	0159      	lsls	r1, r3, #5
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	440b      	add	r3, r1
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	4619      	mov	r1, r3
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <USB_DeactivateEndpoint+0x1b4>)
 8007256:	4013      	ands	r3, r2
 8007258:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	ec337800 	.word	0xec337800
 800726c:	eff37800 	.word	0xeff37800

08007270 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b01      	cmp	r3, #1
 800728a:	f040 810a 	bne.w	80074a2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d132      	bne.n	80072fc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	0151      	lsls	r1, r2, #5
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	440a      	add	r2, r1
 80072d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	0151      	lsls	r1, r2, #5
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	440a      	add	r2, r1
 80072f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f4:	0cdb      	lsrs	r3, r3, #19
 80072f6:	04db      	lsls	r3, r3, #19
 80072f8:	6113      	str	r3, [r2, #16]
 80072fa:	e074      	b.n	80073e6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	440a      	add	r2, r1
 8007312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007316:	0cdb      	lsrs	r3, r3, #19
 8007318:	04db      	lsls	r3, r3, #19
 800731a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	0151      	lsls	r1, r2, #5
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	440a      	add	r2, r1
 8007332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007336:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800733a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800733e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	6999      	ldr	r1, [r3, #24]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	440b      	add	r3, r1
 8007358:	1e59      	subs	r1, r3, #1
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007362:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007364:	4b9e      	ldr	r3, [pc, #632]	; (80075e0 <USB_EPStartXfer+0x370>)
 8007366:	400b      	ands	r3, r1
 8007368:	6939      	ldr	r1, [r7, #16]
 800736a:	0148      	lsls	r0, r1, #5
 800736c:	6979      	ldr	r1, [r7, #20]
 800736e:	4401      	add	r1, r0
 8007370:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007374:	4313      	orrs	r3, r2
 8007376:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007384:	691a      	ldr	r2, [r3, #16]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800738e:	6939      	ldr	r1, [r7, #16]
 8007390:	0148      	lsls	r0, r1, #5
 8007392:	6979      	ldr	r1, [r7, #20]
 8007394:	4401      	add	r1, r0
 8007396:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800739a:	4313      	orrs	r3, r2
 800739c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	791b      	ldrb	r3, [r3, #4]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d11f      	bne.n	80073e6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	0151      	lsls	r1, r2, #5
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	440a      	add	r2, r1
 80073bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80073c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073e4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	0151      	lsls	r1, r2, #5
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	440a      	add	r2, r1
 80073fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007400:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007404:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	791b      	ldrb	r3, [r3, #4]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d015      	beq.n	800743a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8106 	beq.w	8007624 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	f003 030f 	and.w	r3, r3, #15
 8007428:	2101      	movs	r1, #1
 800742a:	fa01 f303 	lsl.w	r3, r1, r3
 800742e:	6979      	ldr	r1, [r7, #20]
 8007430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007434:	4313      	orrs	r3, r2
 8007436:	634b      	str	r3, [r1, #52]	; 0x34
 8007438:	e0f4      	b.n	8007624 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007446:	2b00      	cmp	r3, #0
 8007448:	d110      	bne.n	800746c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	0151      	lsls	r1, r2, #5
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	440a      	add	r2, r1
 8007460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007464:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	e00f      	b.n	800748c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	0151      	lsls	r1, r2, #5
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	440a      	add	r2, r1
 8007482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800748a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	6919      	ldr	r1, [r3, #16]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	781a      	ldrb	r2, [r3, #0]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	b29b      	uxth	r3, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa94 	bl	80079c8 <USB_WritePacket>
 80074a0:	e0c0      	b.n	8007624 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074bc:	0cdb      	lsrs	r3, r3, #19
 80074be:	04db      	lsls	r3, r3, #19
 80074c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d123      	bne.n	8007536 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fa:	691a      	ldr	r2, [r3, #16]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007504:	6939      	ldr	r1, [r7, #16]
 8007506:	0148      	lsls	r0, r1, #5
 8007508:	6979      	ldr	r1, [r7, #20]
 800750a:	4401      	add	r1, r0
 800750c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007510:	4313      	orrs	r3, r2
 8007512:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	0151      	lsls	r1, r2, #5
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	440a      	add	r2, r1
 800752a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800752e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007532:	6113      	str	r3, [r2, #16]
 8007534:	e037      	b.n	80075a6 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	699a      	ldr	r2, [r3, #24]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	4413      	add	r3, r2
 8007540:	1e5a      	subs	r2, r3, #1
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	fbb2 f3f3 	udiv	r3, r2, r3
 800754a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	89fa      	ldrh	r2, [r7, #14]
 8007552:	fb03 f202 	mul.w	r2, r3, r2
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	89fb      	ldrh	r3, [r7, #14]
 800756a:	04d9      	lsls	r1, r3, #19
 800756c:	4b1c      	ldr	r3, [pc, #112]	; (80075e0 <USB_EPStartXfer+0x370>)
 800756e:	400b      	ands	r3, r1
 8007570:	6939      	ldr	r1, [r7, #16]
 8007572:	0148      	lsls	r0, r1, #5
 8007574:	6979      	ldr	r1, [r7, #20]
 8007576:	4401      	add	r1, r0
 8007578:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800757c:	4313      	orrs	r3, r2
 800757e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758c:	691a      	ldr	r2, [r3, #16]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007596:	6939      	ldr	r1, [r7, #16]
 8007598:	0148      	lsls	r0, r1, #5
 800759a:	6979      	ldr	r1, [r7, #20]
 800759c:	4401      	add	r1, r0
 800759e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075a2:	4313      	orrs	r3, r2
 80075a4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	791b      	ldrb	r3, [r3, #4]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d12a      	bne.n	8007604 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d112      	bne.n	80075e4 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	0151      	lsls	r1, r2, #5
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	440a      	add	r2, r1
 80075d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	e011      	b.n	8007604 <USB_EPStartXfer+0x394>
 80075e0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	0151      	lsls	r1, r2, #5
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	440a      	add	r2, r1
 80075fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007602:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	0151      	lsls	r1, r2, #5
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	440a      	add	r2, r1
 800761a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800761e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007622:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop

08007630 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b01      	cmp	r3, #1
 800764a:	f040 80ab 	bne.w	80077a4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d132      	bne.n	80076bc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	440a      	add	r2, r1
 800766c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007670:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007674:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007698:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	0151      	lsls	r1, r2, #5
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	440a      	add	r2, r1
 80076b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b4:	0cdb      	lsrs	r3, r3, #19
 80076b6:	04db      	lsls	r3, r3, #19
 80076b8:	6113      	str	r3, [r2, #16]
 80076ba:	e04e      	b.n	800775a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d6:	0cdb      	lsrs	r3, r3, #19
 80076d8:	04db      	lsls	r3, r3, #19
 80076da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	0151      	lsls	r1, r2, #5
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	440a      	add	r2, r1
 80076f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	699a      	ldr	r2, [r3, #24]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	429a      	cmp	r2, r3
 800770a:	d903      	bls.n	8007714 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	440a      	add	r2, r1
 800772a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800772e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	0148      	lsls	r0, r1, #5
 800774e:	68f9      	ldr	r1, [r7, #12]
 8007750:	4401      	add	r1, r0
 8007752:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007756:	4313      	orrs	r3, r2
 8007758:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	0151      	lsls	r1, r2, #5
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	440a      	add	r2, r1
 8007770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007774:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007778:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d071      	beq.n	8007866 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	2101      	movs	r1, #1
 8007794:	fa01 f303 	lsl.w	r3, r1, r3
 8007798:	68f9      	ldr	r1, [r7, #12]
 800779a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800779e:	4313      	orrs	r3, r2
 80077a0:	634b      	str	r3, [r1, #52]	; 0x34
 80077a2:	e060      	b.n	8007866 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	0151      	lsls	r1, r2, #5
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	440a      	add	r2, r1
 80077ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077be:	0cdb      	lsrs	r3, r3, #19
 80077c0:	04db      	lsls	r3, r3, #19
 80077c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	0151      	lsls	r1, r2, #5
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	440a      	add	r2, r1
 80077da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	0151      	lsls	r1, r2, #5
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	440a      	add	r2, r1
 8007816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800781e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007836:	68b9      	ldr	r1, [r7, #8]
 8007838:	0148      	lsls	r0, r1, #5
 800783a:	68f9      	ldr	r1, [r7, #12]
 800783c:	4401      	add	r1, r0
 800783e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007842:	4313      	orrs	r3, r2
 8007844:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	440a      	add	r2, r1
 800785c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007860:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007864:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d14a      	bne.n	8007928 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078aa:	f040 8086 	bne.w	80079ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	0151      	lsls	r1, r2, #5
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	440a      	add	r2, r1
 80078c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	7812      	ldrb	r2, [r2, #0]
 80078e6:	0151      	lsls	r1, r2, #5
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	440a      	add	r2, r1
 80078ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3301      	adds	r3, #1
 80078fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8007902:	4293      	cmp	r3, r2
 8007904:	d902      	bls.n	800790c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	75fb      	strb	r3, [r7, #23]
          break;
 800790a:	e056      	b.n	80079ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007924:	d0e7      	beq.n	80078f6 <USB_EPStopXfer+0x82>
 8007926:	e048      	b.n	80079ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800793c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007940:	d13b      	bne.n	80079ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	7812      	ldrb	r2, [r2, #0]
 8007956:	0151      	lsls	r1, r2, #5
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	440a      	add	r2, r1
 800795c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007960:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007964:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	7812      	ldrb	r2, [r2, #0]
 800797a:	0151      	lsls	r1, r2, #5
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	440a      	add	r2, r1
 8007980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007988:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3301      	adds	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f242 7210 	movw	r2, #10000	; 0x2710
 8007996:	4293      	cmp	r3, r2
 8007998:	d902      	bls.n	80079a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	75fb      	strb	r3, [r7, #23]
          break;
 800799e:	e00c      	b.n	80079ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b8:	d0e7      	beq.n	800798a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b089      	sub	sp, #36	; 0x24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	4611      	mov	r1, r2
 80079d4:	461a      	mov	r2, r3
 80079d6:	460b      	mov	r3, r1
 80079d8:	71fb      	strb	r3, [r7, #7]
 80079da:	4613      	mov	r3, r2
 80079dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80079e6:	88bb      	ldrh	r3, [r7, #4]
 80079e8:	3303      	adds	r3, #3
 80079ea:	089b      	lsrs	r3, r3, #2
 80079ec:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80079ee:	2300      	movs	r3, #0
 80079f0:	61bb      	str	r3, [r7, #24]
 80079f2:	e018      	b.n	8007a26 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	031a      	lsls	r2, r3, #12
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a00:	461a      	mov	r2, r3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3301      	adds	r3, #1
 8007a12:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	3301      	adds	r3, #1
 8007a18:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d3e2      	bcc.n	80079f4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3724      	adds	r7, #36	; 0x24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b08b      	sub	sp, #44	; 0x2c
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	089b      	lsrs	r3, r3, #2
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a5a:	88fb      	ldrh	r3, [r7, #6]
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a62:	2300      	movs	r3, #0
 8007a64:	623b      	str	r3, [r7, #32]
 8007a66:	e014      	b.n	8007a92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	3301      	adds	r3, #1
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	3301      	adds	r3, #1
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	3301      	adds	r3, #1
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	623b      	str	r3, [r7, #32]
 8007a92:	6a3a      	ldr	r2, [r7, #32]
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d3e6      	bcc.n	8007a68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a9a:	8bfb      	ldrh	r3, [r7, #30]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01e      	beq.n	8007ade <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f107 0310 	add.w	r3, r7, #16
 8007ab0:	6812      	ldr	r2, [r2, #0]
 8007ab2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	701a      	strb	r2, [r3, #0]
      i++;
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	623b      	str	r3, [r7, #32]
      pDest++;
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	3301      	adds	r3, #1
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007ad2:	8bfb      	ldrh	r3, [r7, #30]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ad8:	8bfb      	ldrh	r3, [r7, #30]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1ea      	bne.n	8007ab4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	372c      	adds	r7, #44	; 0x2c
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	785b      	ldrb	r3, [r3, #1]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d12c      	bne.n	8007b62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	db12      	blt.n	8007b40 <USB_EPSetStall+0x54>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00f      	beq.n	8007b40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	e02b      	b.n	8007bba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	db12      	blt.n	8007b9a <USB_EPSetStall+0xae>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00f      	beq.n	8007b9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	0151      	lsls	r1, r2, #5
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	440a      	add	r2, r1
 8007b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d128      	bne.n	8007c36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	0151      	lsls	r1, r2, #5
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	791b      	ldrb	r3, [r3, #4]
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d003      	beq.n	8007c14 <USB_EPClearStall+0x4c>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	791b      	ldrb	r3, [r3, #4]
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d138      	bne.n	8007c86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	e027      	b.n	8007c86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	0151      	lsls	r1, r2, #5
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	440a      	add	r2, r1
 8007c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	791b      	ldrb	r3, [r3, #4]
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d003      	beq.n	8007c66 <USB_EPClearStall+0x9e>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	791b      	ldrb	r3, [r3, #4]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d10f      	bne.n	8007c86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cb2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007cc8:	68f9      	ldr	r1, [r7, #12]
 8007cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cfa:	f023 0303 	bic.w	r3, r3, #3
 8007cfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d0e:	f023 0302 	bic.w	r3, r3, #2
 8007d12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d50:	f043 0302 	orr.w	r3, r3, #2
 8007d54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	4013      	ands	r3, r2
 8007dac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	0c1b      	lsrs	r3, r3, #16
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	4013      	ands	r3, r2
 8007de0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	b29b      	uxth	r3, r3
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e20:	68bb      	ldr	r3, [r7, #8]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b087      	sub	sp, #28
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5e:	01db      	lsls	r3, r3, #7
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	f003 0301 	and.w	r3, r3, #1
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ec4:	f023 0307 	bic.w	r3, r3, #7
 8007ec8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007edc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	333c      	adds	r3, #60	; 0x3c
 8007efe:	3304      	adds	r3, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4a1c      	ldr	r2, [pc, #112]	; (8007f78 <USB_EP0_OutStart+0x8c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d90a      	bls.n	8007f22 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f1c:	d101      	bne.n	8007f22 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e024      	b.n	8007f6c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f28:	461a      	mov	r2, r3
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f50:	f043 0318 	orr.w	r3, r3, #24
 8007f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f64:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f68:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	4f54300a 	.word	0x4f54300a

08007f7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4a13      	ldr	r2, [pc, #76]	; (8007fe0 <USB_CoreReset+0x64>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d901      	bls.n	8007f9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e01b      	b.n	8007fd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	daf2      	bge.n	8007f88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f043 0201 	orr.w	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4a09      	ldr	r2, [pc, #36]	; (8007fe0 <USB_CoreReset+0x64>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d901      	bls.n	8007fc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e006      	b.n	8007fd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d0f0      	beq.n	8007fb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	00030d40 	.word	0x00030d40

08007fe4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ff0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ff4:	f002 fa7a 	bl	800a4ec <USBD_static_malloc>
 8007ff8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008008:	2302      	movs	r3, #2
 800800a:	e066      	b.n	80080da <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	7c1b      	ldrb	r3, [r3, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d119      	bne.n	8008050 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800801c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008020:	2202      	movs	r2, #2
 8008022:	2181      	movs	r1, #129	; 0x81
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f002 f84d 	bl	800a0c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008034:	2202      	movs	r2, #2
 8008036:	2101      	movs	r1, #1
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f002 f843 	bl	800a0c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2210      	movs	r2, #16
 800804a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800804e:	e016      	b.n	800807e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008050:	2340      	movs	r3, #64	; 0x40
 8008052:	2202      	movs	r2, #2
 8008054:	2181      	movs	r1, #129	; 0x81
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f002 f834 	bl	800a0c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008062:	2340      	movs	r3, #64	; 0x40
 8008064:	2202      	movs	r2, #2
 8008066:	2101      	movs	r1, #1
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f002 f82b 	bl	800a0c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2210      	movs	r2, #16
 800807a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800807e:	2308      	movs	r3, #8
 8008080:	2203      	movs	r2, #3
 8008082:	2182      	movs	r1, #130	; 0x82
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f002 f81d 	bl	800a0c4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	7c1b      	ldrb	r3, [r3, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d109      	bne.n	80080c8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080be:	2101      	movs	r1, #1
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f002 f979 	bl	800a3b8 <USBD_LL_PrepareReceive>
 80080c6:	e007      	b.n	80080d8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080ce:	2340      	movs	r3, #64	; 0x40
 80080d0:	2101      	movs	r1, #1
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f002 f970 	bl	800a3b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80080ee:	2181      	movs	r1, #129	; 0x81
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f002 f825 	bl	800a140 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80080fc:	2101      	movs	r1, #1
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f002 f81e 	bl	800a140 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800810c:	2182      	movs	r1, #130	; 0x82
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f002 f816 	bl	800a140 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00e      	beq.n	800814c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800813e:	4618      	mov	r0, r3
 8008140:	f002 f9e2 	bl	800a508 <USBD_static_free>
    pdev->pClassData = NULL;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008168:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800817c:	2303      	movs	r3, #3
 800817e:	e0af      	b.n	80082e0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008188:	2b00      	cmp	r3, #0
 800818a:	d03f      	beq.n	800820c <USBD_CDC_Setup+0xb4>
 800818c:	2b20      	cmp	r3, #32
 800818e:	f040 809f 	bne.w	80082d0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	88db      	ldrh	r3, [r3, #6]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d02e      	beq.n	80081f8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	b25b      	sxtb	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	da16      	bge.n	80081d2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80081b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	88d2      	ldrh	r2, [r2, #6]
 80081b6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	88db      	ldrh	r3, [r3, #6]
 80081bc:	2b07      	cmp	r3, #7
 80081be:	bf28      	it	cs
 80081c0:	2307      	movcs	r3, #7
 80081c2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	89fa      	ldrh	r2, [r7, #14]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fb13 	bl	80097f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80081d0:	e085      	b.n	80082de <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	785a      	ldrb	r2, [r3, #1]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	88db      	ldrh	r3, [r3, #6]
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80081e8:	6939      	ldr	r1, [r7, #16]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	88db      	ldrh	r3, [r3, #6]
 80081ee:	461a      	mov	r2, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 fb2c 	bl	800984e <USBD_CtlPrepareRx>
      break;
 80081f6:	e072      	b.n	80082de <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	7850      	ldrb	r0, [r2, #1]
 8008204:	2200      	movs	r2, #0
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	4798      	blx	r3
      break;
 800820a:	e068      	b.n	80082de <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	2b0b      	cmp	r3, #11
 8008212:	d852      	bhi.n	80082ba <USBD_CDC_Setup+0x162>
 8008214:	a201      	add	r2, pc, #4	; (adr r2, 800821c <USBD_CDC_Setup+0xc4>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	0800824d 	.word	0x0800824d
 8008220:	080082c9 	.word	0x080082c9
 8008224:	080082bb 	.word	0x080082bb
 8008228:	080082bb 	.word	0x080082bb
 800822c:	080082bb 	.word	0x080082bb
 8008230:	080082bb 	.word	0x080082bb
 8008234:	080082bb 	.word	0x080082bb
 8008238:	080082bb 	.word	0x080082bb
 800823c:	080082bb 	.word	0x080082bb
 8008240:	080082bb 	.word	0x080082bb
 8008244:	08008277 	.word	0x08008277
 8008248:	080082a1 	.word	0x080082a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b03      	cmp	r3, #3
 8008256:	d107      	bne.n	8008268 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008258:	f107 030a 	add.w	r3, r7, #10
 800825c:	2202      	movs	r2, #2
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 fac8 	bl	80097f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008266:	e032      	b.n	80082ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f001 fa52 	bl	8009714 <USBD_CtlError>
            ret = USBD_FAIL;
 8008270:	2303      	movs	r3, #3
 8008272:	75fb      	strb	r3, [r7, #23]
          break;
 8008274:	e02b      	b.n	80082ce <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b03      	cmp	r3, #3
 8008280:	d107      	bne.n	8008292 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008282:	f107 030d 	add.w	r3, r7, #13
 8008286:	2201      	movs	r2, #1
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 fab3 	bl	80097f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008290:	e01d      	b.n	80082ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 fa3d 	bl	8009714 <USBD_CtlError>
            ret = USBD_FAIL;
 800829a:	2303      	movs	r3, #3
 800829c:	75fb      	strb	r3, [r7, #23]
          break;
 800829e:	e016      	b.n	80082ce <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d00f      	beq.n	80082cc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 fa30 	bl	8009714 <USBD_CtlError>
            ret = USBD_FAIL;
 80082b4:	2303      	movs	r3, #3
 80082b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082b8:	e008      	b.n	80082cc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 fa29 	bl	8009714 <USBD_CtlError>
          ret = USBD_FAIL;
 80082c2:	2303      	movs	r3, #3
 80082c4:	75fb      	strb	r3, [r7, #23]
          break;
 80082c6:	e002      	b.n	80082ce <USBD_CDC_Setup+0x176>
          break;
 80082c8:	bf00      	nop
 80082ca:	e008      	b.n	80082de <USBD_CDC_Setup+0x186>
          break;
 80082cc:	bf00      	nop
      }
      break;
 80082ce:	e006      	b.n	80082de <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fa1e 	bl	8009714 <USBD_CtlError>
      ret = USBD_FAIL;
 80082d8:	2303      	movs	r3, #3
 80082da:	75fb      	strb	r3, [r7, #23]
      break;
 80082dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80082de:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008306:	2303      	movs	r3, #3
 8008308:	e04f      	b.n	80083aa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008310:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008312:	78fa      	ldrb	r2, [r7, #3]
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	440b      	add	r3, r1
 8008320:	3318      	adds	r3, #24
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d029      	beq.n	800837c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008328:	78fa      	ldrb	r2, [r7, #3]
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	3318      	adds	r3, #24
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	78f9      	ldrb	r1, [r7, #3]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	460b      	mov	r3, r1
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	440b      	add	r3, r1
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4403      	add	r3, r0
 8008348:	3348      	adds	r3, #72	; 0x48
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008350:	fb01 f303 	mul.w	r3, r1, r3
 8008354:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008356:	2b00      	cmp	r3, #0
 8008358:	d110      	bne.n	800837c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800835a:	78fa      	ldrb	r2, [r7, #3]
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	3318      	adds	r3, #24
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800836e:	78f9      	ldrb	r1, [r7, #3]
 8008370:	2300      	movs	r3, #0
 8008372:	2200      	movs	r2, #0
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 ffe7 	bl	800a348 <USBD_LL_Transmit>
 800837a:	e015      	b.n	80083a8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80083a4:	78fa      	ldrb	r2, [r7, #3]
 80083a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	460b      	mov	r3, r1
 80083bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e015      	b.n	8008400 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f002 f825 	bl	800a428 <USBD_LL_GetRxDataSize>
 80083de:	4602      	mov	r2, r0
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80083fa:	4611      	mov	r1, r2
 80083fc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008416:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800841e:	2303      	movs	r3, #3
 8008420:	e01b      	b.n	800845a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d015      	beq.n	8008458 <USBD_CDC_EP0_RxReady+0x50>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008432:	2bff      	cmp	r3, #255	; 0xff
 8008434:	d010      	beq.n	8008458 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008444:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800844c:	b292      	uxth	r2, r2
 800844e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	22ff      	movs	r2, #255	; 0xff
 8008454:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2243      	movs	r2, #67	; 0x43
 8008470:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	20000094 	.word	0x20000094

08008484 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2243      	movs	r2, #67	; 0x43
 8008490:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008492:	4b03      	ldr	r3, [pc, #12]	; (80084a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	20000050 	.word	0x20000050

080084a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2243      	movs	r2, #67	; 0x43
 80084b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80084b2:	4b03      	ldr	r3, [pc, #12]	; (80084c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	200000d8 	.word	0x200000d8

080084c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	220a      	movs	r2, #10
 80084d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80084d2:	4b03      	ldr	r3, [pc, #12]	; (80084e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	2000000c 	.word	0x2000000c

080084e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e004      	b.n	8008502 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800850e:	b480      	push	{r7}
 8008510:	b087      	sub	sp, #28
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008520:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008528:	2303      	movs	r3, #3
 800852a:	e008      	b.n	800853e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	371c      	adds	r7, #28
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800855a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008562:	2303      	movs	r3, #3
 8008564:	e004      	b.n	8008570 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800858a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008596:	2303      	movs	r3, #3
 8008598:	e016      	b.n	80085c8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	7c1b      	ldrb	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d109      	bne.n	80085b6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085ac:	2101      	movs	r1, #1
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 ff02 	bl	800a3b8 <USBD_LL_PrepareReceive>
 80085b4:	e007      	b.n	80085c6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085bc:	2340      	movs	r3, #64	; 0x40
 80085be:	2101      	movs	r1, #1
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fef9 	bl	800a3b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	4613      	mov	r3, r2
 80085dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e01f      	b.n	8008628 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	79fa      	ldrb	r2, [r7, #7]
 800861a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f001 fcd3 	bl	8009fc8 <USBD_LL_Init>
 8008622:	4603      	mov	r3, r0
 8008624:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008644:	2303      	movs	r3, #3
 8008646:	e016      	b.n	8008676 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	f107 020e 	add.w	r2, r7, #14
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
 800866c:	4602      	mov	r2, r0
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 fcea 	bl	800a060 <USBD_LL_Start>
 800868c:	4603      	mov	r3, r0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80086b8:	2303      	movs	r3, #3
 80086ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	78fa      	ldrb	r2, [r7, #3]
 80086d0:	4611      	mov	r1, r2
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	4611      	mov	r1, r2
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
  }

  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	4618      	mov	r0, r3
 8008728:	f000 ffba 	bl	80096a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800873a:	461a      	mov	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008748:	f003 031f 	and.w	r3, r3, #31
 800874c:	2b02      	cmp	r3, #2
 800874e:	d01a      	beq.n	8008786 <USBD_LL_SetupStage+0x72>
 8008750:	2b02      	cmp	r3, #2
 8008752:	d822      	bhi.n	800879a <USBD_LL_SetupStage+0x86>
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <USBD_LL_SetupStage+0x4a>
 8008758:	2b01      	cmp	r3, #1
 800875a:	d00a      	beq.n	8008772 <USBD_LL_SetupStage+0x5e>
 800875c:	e01d      	b.n	800879a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fa62 	bl	8008c30 <USBD_StdDevReq>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
      break;
 8008770:	e020      	b.n	80087b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fac6 	bl	8008d0c <USBD_StdItfReq>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
      break;
 8008784:	e016      	b.n	80087b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fb05 	bl	8008d9e <USBD_StdEPReq>
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]
      break;
 8008798:	e00c      	b.n	80087b4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 fcff 	bl	800a1ac <USBD_LL_StallEP>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]
      break;
 80087b2:	bf00      	nop
  }

  return ret;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b086      	sub	sp, #24
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	460b      	mov	r3, r1
 80087c8:	607a      	str	r2, [r7, #4]
 80087ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d138      	bne.n	8008844 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80087d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d14a      	bne.n	800887a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d913      	bls.n	8008818 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	1ad2      	subs	r2, r2, r3
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	4293      	cmp	r3, r2
 8008808:	bf28      	it	cs
 800880a:	4613      	movcs	r3, r2
 800880c:	461a      	mov	r2, r3
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f001 f839 	bl	8009888 <USBD_CtlContinueRx>
 8008816:	e030      	b.n	800887a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b03      	cmp	r3, #3
 8008822:	d10b      	bne.n	800883c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d005      	beq.n	800883c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f001 f834 	bl	80098aa <USBD_CtlSendStatus>
 8008842:	e01a      	b.n	800887a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b03      	cmp	r3, #3
 800884e:	d114      	bne.n	800887a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00e      	beq.n	800887a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	7afa      	ldrb	r2, [r7, #11]
 8008866:	4611      	mov	r1, r2
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	4798      	blx	r3
 800886c:	4603      	mov	r3, r0
 800886e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	e000      	b.n	800887c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3718      	adds	r7, #24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	460b      	mov	r3, r1
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008892:	7afb      	ldrb	r3, [r7, #11]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d16b      	bne.n	8008970 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3314      	adds	r3, #20
 800889c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d156      	bne.n	8008956 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	689a      	ldr	r2, [r3, #8]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d914      	bls.n	80088de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	1ad2      	subs	r2, r2, r3
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	461a      	mov	r2, r3
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 ffae 	bl	800982c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088d0:	2300      	movs	r3, #0
 80088d2:	2200      	movs	r2, #0
 80088d4:	2100      	movs	r1, #0
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f001 fd6e 	bl	800a3b8 <USBD_LL_PrepareReceive>
 80088dc:	e03b      	b.n	8008956 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	68da      	ldr	r2, [r3, #12]
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d11c      	bne.n	8008924 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d316      	bcc.n	8008924 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008900:	429a      	cmp	r2, r3
 8008902:	d20f      	bcs.n	8008924 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008904:	2200      	movs	r2, #0
 8008906:	2100      	movs	r1, #0
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 ff8f 	bl	800982c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008916:	2300      	movs	r3, #0
 8008918:	2200      	movs	r2, #0
 800891a:	2100      	movs	r1, #0
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f001 fd4b 	bl	800a3b8 <USBD_LL_PrepareReceive>
 8008922:	e018      	b.n	8008956 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b03      	cmp	r3, #3
 800892e:	d10b      	bne.n	8008948 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008948:	2180      	movs	r1, #128	; 0x80
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f001 fc2e 	bl	800a1ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 ffbd 	bl	80098d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800895c:	2b01      	cmp	r3, #1
 800895e:	d122      	bne.n	80089a6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f7ff fe98 	bl	8008696 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800896e:	e01a      	b.n	80089a6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b03      	cmp	r3, #3
 800897a:	d114      	bne.n	80089a6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00e      	beq.n	80089a6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	7afa      	ldrb	r2, [r7, #11]
 8008992:	4611      	mov	r1, r2
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	4798      	blx	r3
 8008998:	4603      	mov	r3, r0
 800899a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	e000      	b.n	80089a8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e02f      	b.n	8008a44 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00f      	beq.n	8008a0e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d009      	beq.n	8008a0e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	6852      	ldr	r2, [r2, #4]
 8008a06:	b2d2      	uxtb	r2, r2
 8008a08:	4611      	mov	r1, r2
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a0e:	2340      	movs	r3, #64	; 0x40
 8008a10:	2200      	movs	r2, #0
 8008a12:	2100      	movs	r1, #0
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 fb55 	bl	800a0c4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2240      	movs	r2, #64	; 0x40
 8008a26:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a2a:	2340      	movs	r3, #64	; 0x40
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2180      	movs	r1, #128	; 0x80
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f001 fb47 	bl	800a0c4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2240      	movs	r2, #64	; 0x40
 8008a40:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2204      	movs	r2, #4
 8008a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d106      	bne.n	8008aba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e012      	b.n	8008b04 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d10b      	bne.n	8008b02 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e014      	b.n	8008b50 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d10d      	bne.n	8008b4e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d007      	beq.n	8008b4e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e014      	b.n	8008b9c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d10d      	bne.n	8008b9a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d007      	beq.n	8008b9a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b92:	78fa      	ldrb	r2, [r7, #3]
 8008b94:	4611      	mov	r1, r2
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d009      	beq.n	8008be8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6852      	ldr	r2, [r2, #4]
 8008be0:	b2d2      	uxtb	r2, r2
 8008be2:	4611      	mov	r1, r2
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	4798      	blx	r3
  }

  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b087      	sub	sp, #28
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	3301      	adds	r3, #1
 8008c08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c10:	8a3b      	ldrh	r3, [r7, #16]
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	b21a      	sxth	r2, r3
 8008c16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	b21b      	sxth	r3, r3
 8008c1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c20:	89fb      	ldrh	r3, [r7, #14]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	371c      	adds	r7, #28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
	...

08008c30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c46:	2b40      	cmp	r3, #64	; 0x40
 8008c48:	d005      	beq.n	8008c56 <USBD_StdDevReq+0x26>
 8008c4a:	2b40      	cmp	r3, #64	; 0x40
 8008c4c:	d853      	bhi.n	8008cf6 <USBD_StdDevReq+0xc6>
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00b      	beq.n	8008c6a <USBD_StdDevReq+0x3a>
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d14f      	bne.n	8008cf6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	4798      	blx	r3
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]
      break;
 8008c68:	e04a      	b.n	8008d00 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	2b09      	cmp	r3, #9
 8008c70:	d83b      	bhi.n	8008cea <USBD_StdDevReq+0xba>
 8008c72:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <USBD_StdDevReq+0x48>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008ccd 	.word	0x08008ccd
 8008c7c:	08008ce1 	.word	0x08008ce1
 8008c80:	08008ceb 	.word	0x08008ceb
 8008c84:	08008cd7 	.word	0x08008cd7
 8008c88:	08008ceb 	.word	0x08008ceb
 8008c8c:	08008cab 	.word	0x08008cab
 8008c90:	08008ca1 	.word	0x08008ca1
 8008c94:	08008ceb 	.word	0x08008ceb
 8008c98:	08008cc3 	.word	0x08008cc3
 8008c9c:	08008cb5 	.word	0x08008cb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f9de 	bl	8009064 <USBD_GetDescriptor>
          break;
 8008ca8:	e024      	b.n	8008cf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fb6d 	bl	800938c <USBD_SetAddress>
          break;
 8008cb2:	e01f      	b.n	8008cf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fbac 	bl	8009414 <USBD_SetConfig>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]
          break;
 8008cc0:	e018      	b.n	8008cf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fc4b 	bl	8009560 <USBD_GetConfig>
          break;
 8008cca:	e013      	b.n	8008cf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fc7c 	bl	80095cc <USBD_GetStatus>
          break;
 8008cd4:	e00e      	b.n	8008cf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fcab 	bl	8009634 <USBD_SetFeature>
          break;
 8008cde:	e009      	b.n	8008cf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fcba 	bl	800965c <USBD_ClrFeature>
          break;
 8008ce8:	e004      	b.n	8008cf4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fd11 	bl	8009714 <USBD_CtlError>
          break;
 8008cf2:	bf00      	nop
      }
      break;
 8008cf4:	e004      	b.n	8008d00 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fd0b 	bl	8009714 <USBD_CtlError>
      break;
 8008cfe:	bf00      	nop
  }

  return ret;
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop

08008d0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d22:	2b40      	cmp	r3, #64	; 0x40
 8008d24:	d005      	beq.n	8008d32 <USBD_StdItfReq+0x26>
 8008d26:	2b40      	cmp	r3, #64	; 0x40
 8008d28:	d82f      	bhi.n	8008d8a <USBD_StdItfReq+0x7e>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <USBD_StdItfReq+0x26>
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d12b      	bne.n	8008d8a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d81d      	bhi.n	8008d7c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	889b      	ldrh	r3, [r3, #4]
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d813      	bhi.n	8008d72 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	4798      	blx	r3
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	88db      	ldrh	r3, [r3, #6]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d110      	bne.n	8008d86 <USBD_StdItfReq+0x7a>
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10d      	bne.n	8008d86 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fd9d 	bl	80098aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d70:	e009      	b.n	8008d86 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fccd 	bl	8009714 <USBD_CtlError>
          break;
 8008d7a:	e004      	b.n	8008d86 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fcc8 	bl	8009714 <USBD_CtlError>
          break;
 8008d84:	e000      	b.n	8008d88 <USBD_StdItfReq+0x7c>
          break;
 8008d86:	bf00      	nop
      }
      break;
 8008d88:	e004      	b.n	8008d94 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fcc1 	bl	8009714 <USBD_CtlError>
      break;
 8008d92:	bf00      	nop
  }

  return ret;
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	889b      	ldrh	r3, [r3, #4]
 8008db0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dba:	2b40      	cmp	r3, #64	; 0x40
 8008dbc:	d007      	beq.n	8008dce <USBD_StdEPReq+0x30>
 8008dbe:	2b40      	cmp	r3, #64	; 0x40
 8008dc0:	f200 8145 	bhi.w	800904e <USBD_StdEPReq+0x2b0>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00c      	beq.n	8008de2 <USBD_StdEPReq+0x44>
 8008dc8:	2b20      	cmp	r3, #32
 8008dca:	f040 8140 	bne.w	800904e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	4798      	blx	r3
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]
      break;
 8008de0:	e13a      	b.n	8009058 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d007      	beq.n	8008dfa <USBD_StdEPReq+0x5c>
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	f300 8129 	bgt.w	8009042 <USBD_StdEPReq+0x2a4>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d07f      	beq.n	8008ef4 <USBD_StdEPReq+0x156>
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d03c      	beq.n	8008e72 <USBD_StdEPReq+0xd4>
 8008df8:	e123      	b.n	8009042 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d002      	beq.n	8008e0c <USBD_StdEPReq+0x6e>
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d016      	beq.n	8008e38 <USBD_StdEPReq+0x9a>
 8008e0a:	e02c      	b.n	8008e66 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00d      	beq.n	8008e2e <USBD_StdEPReq+0x90>
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	2b80      	cmp	r3, #128	; 0x80
 8008e16:	d00a      	beq.n	8008e2e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 f9c5 	bl	800a1ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e22:	2180      	movs	r1, #128	; 0x80
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 f9c1 	bl	800a1ac <USBD_LL_StallEP>
 8008e2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e2c:	e020      	b.n	8008e70 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fc6f 	bl	8009714 <USBD_CtlError>
              break;
 8008e36:	e01b      	b.n	8008e70 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	885b      	ldrh	r3, [r3, #2]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10e      	bne.n	8008e5e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <USBD_StdEPReq+0xc0>
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	2b80      	cmp	r3, #128	; 0x80
 8008e4a:	d008      	beq.n	8008e5e <USBD_StdEPReq+0xc0>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	88db      	ldrh	r3, [r3, #6]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d104      	bne.n	8008e5e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f001 f9a7 	bl	800a1ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fd23 	bl	80098aa <USBD_CtlSendStatus>

              break;
 8008e64:	e004      	b.n	8008e70 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fc53 	bl	8009714 <USBD_CtlError>
              break;
 8008e6e:	bf00      	nop
          }
          break;
 8008e70:	e0ec      	b.n	800904c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d002      	beq.n	8008e84 <USBD_StdEPReq+0xe6>
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d016      	beq.n	8008eb0 <USBD_StdEPReq+0x112>
 8008e82:	e030      	b.n	8008ee6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e84:	7bbb      	ldrb	r3, [r7, #14]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00d      	beq.n	8008ea6 <USBD_StdEPReq+0x108>
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	2b80      	cmp	r3, #128	; 0x80
 8008e8e:	d00a      	beq.n	8008ea6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 f989 	bl	800a1ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e9a:	2180      	movs	r1, #128	; 0x80
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 f985 	bl	800a1ac <USBD_LL_StallEP>
 8008ea2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ea4:	e025      	b.n	8008ef2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fc33 	bl	8009714 <USBD_CtlError>
              break;
 8008eae:	e020      	b.n	8008ef2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	885b      	ldrh	r3, [r3, #2]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d11b      	bne.n	8008ef0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d004      	beq.n	8008ecc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ec2:	7bbb      	ldrb	r3, [r7, #14]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 f9a6 	bl	800a218 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fcec 	bl	80098aa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	4798      	blx	r3
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008ee4:	e004      	b.n	8008ef0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fc13 	bl	8009714 <USBD_CtlError>
              break;
 8008eee:	e000      	b.n	8008ef2 <USBD_StdEPReq+0x154>
              break;
 8008ef0:	bf00      	nop
          }
          break;
 8008ef2:	e0ab      	b.n	800904c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d002      	beq.n	8008f06 <USBD_StdEPReq+0x168>
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d032      	beq.n	8008f6a <USBD_StdEPReq+0x1cc>
 8008f04:	e097      	b.n	8009036 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d007      	beq.n	8008f1c <USBD_StdEPReq+0x17e>
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	2b80      	cmp	r3, #128	; 0x80
 8008f10:	d004      	beq.n	8008f1c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fbfd 	bl	8009714 <USBD_CtlError>
                break;
 8008f1a:	e091      	b.n	8009040 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	da0b      	bge.n	8008f3c <USBD_StdEPReq+0x19e>
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	3310      	adds	r3, #16
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	4413      	add	r3, r2
 8008f38:	3304      	adds	r3, #4
 8008f3a:	e00b      	b.n	8008f54 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	4413      	add	r3, r2
 8008f52:	3304      	adds	r3, #4
 8008f54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fc47 	bl	80097f6 <USBD_CtlSendData>
              break;
 8008f68:	e06a      	b.n	8009040 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	da11      	bge.n	8008f96 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	f003 020f 	and.w	r2, r3, #15
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	440b      	add	r3, r1
 8008f84:	3324      	adds	r3, #36	; 0x24
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d117      	bne.n	8008fbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fbc0 	bl	8009714 <USBD_CtlError>
                  break;
 8008f94:	e054      	b.n	8009040 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	f003 020f 	and.w	r2, r3, #15
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d104      	bne.n	8008fbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fbad 	bl	8009714 <USBD_CtlError>
                  break;
 8008fba:	e041      	b.n	8009040 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	da0b      	bge.n	8008fdc <USBD_StdEPReq+0x23e>
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	3310      	adds	r3, #16
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	3304      	adds	r3, #4
 8008fda:	e00b      	b.n	8008ff4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <USBD_StdEPReq+0x264>
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	2b80      	cmp	r3, #128	; 0x80
 8009000:	d103      	bne.n	800900a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	e00e      	b.n	8009028 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f001 f938 	bl	800a284 <USBD_LL_IsStallEP>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2201      	movs	r2, #1
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	e002      	b.n	8009028 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2202      	movs	r2, #2
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fbe1 	bl	80097f6 <USBD_CtlSendData>
              break;
 8009034:	e004      	b.n	8009040 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fb6b 	bl	8009714 <USBD_CtlError>
              break;
 800903e:	bf00      	nop
          }
          break;
 8009040:	e004      	b.n	800904c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fb65 	bl	8009714 <USBD_CtlError>
          break;
 800904a:	bf00      	nop
      }
      break;
 800904c:	e004      	b.n	8009058 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fb5f 	bl	8009714 <USBD_CtlError>
      break;
 8009056:	bf00      	nop
  }

  return ret;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800906e:	2300      	movs	r3, #0
 8009070:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	0a1b      	lsrs	r3, r3, #8
 8009080:	b29b      	uxth	r3, r3
 8009082:	3b01      	subs	r3, #1
 8009084:	2b0e      	cmp	r3, #14
 8009086:	f200 8152 	bhi.w	800932e <USBD_GetDescriptor+0x2ca>
 800908a:	a201      	add	r2, pc, #4	; (adr r2, 8009090 <USBD_GetDescriptor+0x2c>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	08009101 	.word	0x08009101
 8009094:	08009119 	.word	0x08009119
 8009098:	08009159 	.word	0x08009159
 800909c:	0800932f 	.word	0x0800932f
 80090a0:	0800932f 	.word	0x0800932f
 80090a4:	080092cf 	.word	0x080092cf
 80090a8:	080092fb 	.word	0x080092fb
 80090ac:	0800932f 	.word	0x0800932f
 80090b0:	0800932f 	.word	0x0800932f
 80090b4:	0800932f 	.word	0x0800932f
 80090b8:	0800932f 	.word	0x0800932f
 80090bc:	0800932f 	.word	0x0800932f
 80090c0:	0800932f 	.word	0x0800932f
 80090c4:	0800932f 	.word	0x0800932f
 80090c8:	080090cd 	.word	0x080090cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d2:	69db      	ldr	r3, [r3, #28]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00b      	beq.n	80090f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	7c12      	ldrb	r2, [r2, #16]
 80090e4:	f107 0108 	add.w	r1, r7, #8
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3
 80090ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090ee:	e126      	b.n	800933e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fb0e 	bl	8009714 <USBD_CtlError>
        err++;
 80090f8:	7afb      	ldrb	r3, [r7, #11]
 80090fa:	3301      	adds	r3, #1
 80090fc:	72fb      	strb	r3, [r7, #11]
      break;
 80090fe:	e11e      	b.n	800933e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	7c12      	ldrb	r2, [r2, #16]
 800910c:	f107 0108 	add.w	r1, r7, #8
 8009110:	4610      	mov	r0, r2
 8009112:	4798      	blx	r3
 8009114:	60f8      	str	r0, [r7, #12]
      break;
 8009116:	e112      	b.n	800933e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	7c1b      	ldrb	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10d      	bne.n	800913c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	f107 0208 	add.w	r2, r7, #8
 800912c:	4610      	mov	r0, r2
 800912e:	4798      	blx	r3
 8009130:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3301      	adds	r3, #1
 8009136:	2202      	movs	r2, #2
 8009138:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800913a:	e100      	b.n	800933e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	f107 0208 	add.w	r2, r7, #8
 8009148:	4610      	mov	r0, r2
 800914a:	4798      	blx	r3
 800914c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3301      	adds	r3, #1
 8009152:	2202      	movs	r2, #2
 8009154:	701a      	strb	r2, [r3, #0]
      break;
 8009156:	e0f2      	b.n	800933e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	885b      	ldrh	r3, [r3, #2]
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b05      	cmp	r3, #5
 8009160:	f200 80ac 	bhi.w	80092bc <USBD_GetDescriptor+0x258>
 8009164:	a201      	add	r2, pc, #4	; (adr r2, 800916c <USBD_GetDescriptor+0x108>)
 8009166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916a:	bf00      	nop
 800916c:	08009185 	.word	0x08009185
 8009170:	080091b9 	.word	0x080091b9
 8009174:	080091ed 	.word	0x080091ed
 8009178:	08009221 	.word	0x08009221
 800917c:	08009255 	.word	0x08009255
 8009180:	08009289 	.word	0x08009289
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00b      	beq.n	80091a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	7c12      	ldrb	r2, [r2, #16]
 800919c:	f107 0108 	add.w	r1, r7, #8
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
 80091a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091a6:	e091      	b.n	80092cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fab2 	bl	8009714 <USBD_CtlError>
            err++;
 80091b0:	7afb      	ldrb	r3, [r7, #11]
 80091b2:	3301      	adds	r3, #1
 80091b4:	72fb      	strb	r3, [r7, #11]
          break;
 80091b6:	e089      	b.n	80092cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00b      	beq.n	80091dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	7c12      	ldrb	r2, [r2, #16]
 80091d0:	f107 0108 	add.w	r1, r7, #8
 80091d4:	4610      	mov	r0, r2
 80091d6:	4798      	blx	r3
 80091d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091da:	e077      	b.n	80092cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa98 	bl	8009714 <USBD_CtlError>
            err++;
 80091e4:	7afb      	ldrb	r3, [r7, #11]
 80091e6:	3301      	adds	r3, #1
 80091e8:	72fb      	strb	r3, [r7, #11]
          break;
 80091ea:	e06f      	b.n	80092cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	7c12      	ldrb	r2, [r2, #16]
 8009204:	f107 0108 	add.w	r1, r7, #8
 8009208:	4610      	mov	r0, r2
 800920a:	4798      	blx	r3
 800920c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800920e:	e05d      	b.n	80092cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fa7e 	bl	8009714 <USBD_CtlError>
            err++;
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	3301      	adds	r3, #1
 800921c:	72fb      	strb	r3, [r7, #11]
          break;
 800921e:	e055      	b.n	80092cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00b      	beq.n	8009244 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	7c12      	ldrb	r2, [r2, #16]
 8009238:	f107 0108 	add.w	r1, r7, #8
 800923c:	4610      	mov	r0, r2
 800923e:	4798      	blx	r3
 8009240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009242:	e043      	b.n	80092cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa64 	bl	8009714 <USBD_CtlError>
            err++;
 800924c:	7afb      	ldrb	r3, [r7, #11]
 800924e:	3301      	adds	r3, #1
 8009250:	72fb      	strb	r3, [r7, #11]
          break;
 8009252:	e03b      	b.n	80092cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	7c12      	ldrb	r2, [r2, #16]
 800926c:	f107 0108 	add.w	r1, r7, #8
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
 8009274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009276:	e029      	b.n	80092cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fa4a 	bl	8009714 <USBD_CtlError>
            err++;
 8009280:	7afb      	ldrb	r3, [r7, #11]
 8009282:	3301      	adds	r3, #1
 8009284:	72fb      	strb	r3, [r7, #11]
          break;
 8009286:	e021      	b.n	80092cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00b      	beq.n	80092ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	7c12      	ldrb	r2, [r2, #16]
 80092a0:	f107 0108 	add.w	r1, r7, #8
 80092a4:	4610      	mov	r0, r2
 80092a6:	4798      	blx	r3
 80092a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092aa:	e00f      	b.n	80092cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa30 	bl	8009714 <USBD_CtlError>
            err++;
 80092b4:	7afb      	ldrb	r3, [r7, #11]
 80092b6:	3301      	adds	r3, #1
 80092b8:	72fb      	strb	r3, [r7, #11]
          break;
 80092ba:	e007      	b.n	80092cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fa28 	bl	8009714 <USBD_CtlError>
          err++;
 80092c4:	7afb      	ldrb	r3, [r7, #11]
 80092c6:	3301      	adds	r3, #1
 80092c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80092ca:	bf00      	nop
      }
      break;
 80092cc:	e037      	b.n	800933e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7c1b      	ldrb	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d109      	bne.n	80092ea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092de:	f107 0208 	add.w	r2, r7, #8
 80092e2:	4610      	mov	r0, r2
 80092e4:	4798      	blx	r3
 80092e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092e8:	e029      	b.n	800933e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fa11 	bl	8009714 <USBD_CtlError>
        err++;
 80092f2:	7afb      	ldrb	r3, [r7, #11]
 80092f4:	3301      	adds	r3, #1
 80092f6:	72fb      	strb	r3, [r7, #11]
      break;
 80092f8:	e021      	b.n	800933e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	7c1b      	ldrb	r3, [r3, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10d      	bne.n	800931e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930a:	f107 0208 	add.w	r2, r7, #8
 800930e:	4610      	mov	r0, r2
 8009310:	4798      	blx	r3
 8009312:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3301      	adds	r3, #1
 8009318:	2207      	movs	r2, #7
 800931a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800931c:	e00f      	b.n	800933e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f9f7 	bl	8009714 <USBD_CtlError>
        err++;
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	3301      	adds	r3, #1
 800932a:	72fb      	strb	r3, [r7, #11]
      break;
 800932c:	e007      	b.n	800933e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f9ef 	bl	8009714 <USBD_CtlError>
      err++;
 8009336:	7afb      	ldrb	r3, [r7, #11]
 8009338:	3301      	adds	r3, #1
 800933a:	72fb      	strb	r3, [r7, #11]
      break;
 800933c:	bf00      	nop
  }

  if (err != 0U)
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d11e      	bne.n	8009382 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	88db      	ldrh	r3, [r3, #6]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d016      	beq.n	800937a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800934c:	893b      	ldrh	r3, [r7, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00e      	beq.n	8009370 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	88da      	ldrh	r2, [r3, #6]
 8009356:	893b      	ldrh	r3, [r7, #8]
 8009358:	4293      	cmp	r3, r2
 800935a:	bf28      	it	cs
 800935c:	4613      	movcs	r3, r2
 800935e:	b29b      	uxth	r3, r3
 8009360:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009362:	893b      	ldrh	r3, [r7, #8]
 8009364:	461a      	mov	r2, r3
 8009366:	68f9      	ldr	r1, [r7, #12]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fa44 	bl	80097f6 <USBD_CtlSendData>
 800936e:	e009      	b.n	8009384 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f9ce 	bl	8009714 <USBD_CtlError>
 8009378:	e004      	b.n	8009384 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fa95 	bl	80098aa <USBD_CtlSendStatus>
 8009380:	e000      	b.n	8009384 <USBD_GetDescriptor+0x320>
    return;
 8009382:	bf00      	nop
  }
}
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop

0800938c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	889b      	ldrh	r3, [r3, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d131      	bne.n	8009402 <USBD_SetAddress+0x76>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	88db      	ldrh	r3, [r3, #6]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d12d      	bne.n	8009402 <USBD_SetAddress+0x76>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	885b      	ldrh	r3, [r3, #2]
 80093aa:	2b7f      	cmp	r3, #127	; 0x7f
 80093ac:	d829      	bhi.n	8009402 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	885b      	ldrh	r3, [r3, #2]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d104      	bne.n	80093d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f9a3 	bl	8009714 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ce:	e01d      	b.n	800940c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	7bfa      	ldrb	r2, [r7, #15]
 80093d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 ff7d 	bl	800a2dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fa61 	bl	80098aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d004      	beq.n	80093f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2202      	movs	r2, #2
 80093f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f6:	e009      	b.n	800940c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009400:	e004      	b.n	800940c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f985 	bl	8009714 <USBD_CtlError>
  }
}
 800940a:	bf00      	nop
 800940c:	bf00      	nop
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	885b      	ldrh	r3, [r3, #2]
 8009426:	b2da      	uxtb	r2, r3
 8009428:	4b4c      	ldr	r3, [pc, #304]	; (800955c <USBD_SetConfig+0x148>)
 800942a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800942c:	4b4b      	ldr	r3, [pc, #300]	; (800955c <USBD_SetConfig+0x148>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d905      	bls.n	8009440 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f96c 	bl	8009714 <USBD_CtlError>
    return USBD_FAIL;
 800943c:	2303      	movs	r3, #3
 800943e:	e088      	b.n	8009552 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b02      	cmp	r3, #2
 800944a:	d002      	beq.n	8009452 <USBD_SetConfig+0x3e>
 800944c:	2b03      	cmp	r3, #3
 800944e:	d025      	beq.n	800949c <USBD_SetConfig+0x88>
 8009450:	e071      	b.n	8009536 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009452:	4b42      	ldr	r3, [pc, #264]	; (800955c <USBD_SetConfig+0x148>)
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d01c      	beq.n	8009494 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800945a:	4b40      	ldr	r3, [pc, #256]	; (800955c <USBD_SetConfig+0x148>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009464:	4b3d      	ldr	r3, [pc, #244]	; (800955c <USBD_SetConfig+0x148>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff f91e 	bl	80086ac <USBD_SetClassConfig>
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d004      	beq.n	8009484 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f949 	bl	8009714 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009482:	e065      	b.n	8009550 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fa10 	bl	80098aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2203      	movs	r2, #3
 800948e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009492:	e05d      	b.n	8009550 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fa08 	bl	80098aa <USBD_CtlSendStatus>
      break;
 800949a:	e059      	b.n	8009550 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800949c:	4b2f      	ldr	r3, [pc, #188]	; (800955c <USBD_SetConfig+0x148>)
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d112      	bne.n	80094ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2202      	movs	r2, #2
 80094a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80094ac:	4b2b      	ldr	r3, [pc, #172]	; (800955c <USBD_SetConfig+0x148>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	461a      	mov	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094b6:	4b29      	ldr	r3, [pc, #164]	; (800955c <USBD_SetConfig+0x148>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7ff f911 	bl	80086e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f9f1 	bl	80098aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094c8:	e042      	b.n	8009550 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80094ca:	4b24      	ldr	r3, [pc, #144]	; (800955c <USBD_SetConfig+0x148>)
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d02a      	beq.n	800952e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff f8ff 	bl	80086e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094e6:	4b1d      	ldr	r3, [pc, #116]	; (800955c <USBD_SetConfig+0x148>)
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094f0:	4b1a      	ldr	r3, [pc, #104]	; (800955c <USBD_SetConfig+0x148>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7ff f8d8 	bl	80086ac <USBD_SetClassConfig>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00f      	beq.n	8009526 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f903 	bl	8009714 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	b2db      	uxtb	r3, r3
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7ff f8e4 	bl	80086e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2202      	movs	r2, #2
 8009520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009524:	e014      	b.n	8009550 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f9bf 	bl	80098aa <USBD_CtlSendStatus>
      break;
 800952c:	e010      	b.n	8009550 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f9bb 	bl	80098aa <USBD_CtlSendStatus>
      break;
 8009534:	e00c      	b.n	8009550 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f8eb 	bl	8009714 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800953e:	4b07      	ldr	r3, [pc, #28]	; (800955c <USBD_SetConfig+0x148>)
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff f8cd 	bl	80086e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800954a:	2303      	movs	r3, #3
 800954c:	73fb      	strb	r3, [r7, #15]
      break;
 800954e:	bf00      	nop
  }

  return ret;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20000478 	.word	0x20000478

08009560 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	88db      	ldrh	r3, [r3, #6]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d004      	beq.n	800957c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f8cd 	bl	8009714 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800957a:	e023      	b.n	80095c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	dc02      	bgt.n	800958e <USBD_GetConfig+0x2e>
 8009588:	2b00      	cmp	r3, #0
 800958a:	dc03      	bgt.n	8009594 <USBD_GetConfig+0x34>
 800958c:	e015      	b.n	80095ba <USBD_GetConfig+0x5a>
 800958e:	2b03      	cmp	r3, #3
 8009590:	d00b      	beq.n	80095aa <USBD_GetConfig+0x4a>
 8009592:	e012      	b.n	80095ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	3308      	adds	r3, #8
 800959e:	2201      	movs	r2, #1
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f927 	bl	80097f6 <USBD_CtlSendData>
        break;
 80095a8:	e00c      	b.n	80095c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	3304      	adds	r3, #4
 80095ae:	2201      	movs	r2, #1
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f91f 	bl	80097f6 <USBD_CtlSendData>
        break;
 80095b8:	e004      	b.n	80095c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f8a9 	bl	8009714 <USBD_CtlError>
        break;
 80095c2:	bf00      	nop
}
 80095c4:	bf00      	nop
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	3b01      	subs	r3, #1
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d81e      	bhi.n	8009622 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	88db      	ldrh	r3, [r3, #6]
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d004      	beq.n	80095f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f890 	bl	8009714 <USBD_CtlError>
        break;
 80095f4:	e01a      	b.n	800962c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f043 0202 	orr.w	r2, r3, #2
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	330c      	adds	r3, #12
 8009616:	2202      	movs	r2, #2
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f8eb 	bl	80097f6 <USBD_CtlSendData>
      break;
 8009620:	e004      	b.n	800962c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f875 	bl	8009714 <USBD_CtlError>
      break;
 800962a:	bf00      	nop
  }
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	885b      	ldrh	r3, [r3, #2]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d106      	bne.n	8009654 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f92b 	bl	80098aa <USBD_CtlSendStatus>
  }
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800966c:	b2db      	uxtb	r3, r3
 800966e:	3b01      	subs	r3, #1
 8009670:	2b02      	cmp	r3, #2
 8009672:	d80b      	bhi.n	800968c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	885b      	ldrh	r3, [r3, #2]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d10c      	bne.n	8009696 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f910 	bl	80098aa <USBD_CtlSendStatus>
      }
      break;
 800968a:	e004      	b.n	8009696 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f840 	bl	8009714 <USBD_CtlError>
      break;
 8009694:	e000      	b.n	8009698 <USBD_ClrFeature+0x3c>
      break;
 8009696:	bf00      	nop
  }
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	781a      	ldrb	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3301      	adds	r3, #1
 80096ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	781a      	ldrb	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3301      	adds	r3, #1
 80096c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f7ff fa91 	bl	8008bf2 <SWAPBYTE>
 80096d0:	4603      	mov	r3, r0
 80096d2:	461a      	mov	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3301      	adds	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3301      	adds	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f7ff fa84 	bl	8008bf2 <SWAPBYTE>
 80096ea:	4603      	mov	r3, r0
 80096ec:	461a      	mov	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3301      	adds	r3, #1
 80096f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3301      	adds	r3, #1
 80096fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f7ff fa77 	bl	8008bf2 <SWAPBYTE>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	80da      	strh	r2, [r3, #6]
}
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800971e:	2180      	movs	r1, #128	; 0x80
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fd43 	bl	800a1ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009726:	2100      	movs	r1, #0
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fd3f 	bl	800a1ac <USBD_LL_StallEP>
}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b086      	sub	sp, #24
 800973a:	af00      	add	r7, sp, #0
 800973c:	60f8      	str	r0, [r7, #12]
 800973e:	60b9      	str	r1, [r7, #8]
 8009740:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d036      	beq.n	80097ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009750:	6938      	ldr	r0, [r7, #16]
 8009752:	f000 f836 	bl	80097c2 <USBD_GetLen>
 8009756:	4603      	mov	r3, r0
 8009758:	3301      	adds	r3, #1
 800975a:	b29b      	uxth	r3, r3
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	b29a      	uxth	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009764:	7dfb      	ldrb	r3, [r7, #23]
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	4413      	add	r3, r2
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	7812      	ldrb	r2, [r2, #0]
 800976e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009770:	7dfb      	ldrb	r3, [r7, #23]
 8009772:	3301      	adds	r3, #1
 8009774:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009776:	7dfb      	ldrb	r3, [r7, #23]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	4413      	add	r3, r2
 800977c:	2203      	movs	r2, #3
 800977e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	3301      	adds	r3, #1
 8009784:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009786:	e013      	b.n	80097b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009788:	7dfb      	ldrb	r3, [r7, #23]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	4413      	add	r3, r2
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	7812      	ldrb	r2, [r2, #0]
 8009792:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	3301      	adds	r3, #1
 8009798:	613b      	str	r3, [r7, #16]
    idx++;
 800979a:	7dfb      	ldrb	r3, [r7, #23]
 800979c:	3301      	adds	r3, #1
 800979e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80097a0:	7dfb      	ldrb	r3, [r7, #23]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	4413      	add	r3, r2
 80097a6:	2200      	movs	r2, #0
 80097a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
 80097ac:	3301      	adds	r3, #1
 80097ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1e7      	bne.n	8009788 <USBD_GetString+0x52>
 80097b8:	e000      	b.n	80097bc <USBD_GetString+0x86>
    return;
 80097ba:	bf00      	nop
  }
}
 80097bc:	3718      	adds	r7, #24
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b085      	sub	sp, #20
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80097d2:	e005      	b.n	80097e0 <USBD_GetLen+0x1e>
  {
    len++;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	3301      	adds	r3, #1
 80097d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	3301      	adds	r3, #1
 80097de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1f5      	bne.n	80097d4 <USBD_GetLen+0x12>
  }

  return len;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2202      	movs	r2, #2
 8009806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	2100      	movs	r1, #0
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 fd93 	bl	800a348 <USBD_LL_Transmit>

  return USBD_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	2100      	movs	r1, #0
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 fd82 	bl	800a348 <USBD_LL_Transmit>

  return USBD_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	60f8      	str	r0, [r7, #12]
 8009856:	60b9      	str	r1, [r7, #8]
 8009858:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2203      	movs	r2, #3
 800985e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	2100      	movs	r1, #0
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 fd9d 	bl	800a3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	2100      	movs	r1, #0
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 fd8c 	bl	800a3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2204      	movs	r2, #4
 80098b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098ba:	2300      	movs	r3, #0
 80098bc:	2200      	movs	r2, #0
 80098be:	2100      	movs	r1, #0
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fd41 	bl	800a348 <USBD_LL_Transmit>

  return USBD_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2205      	movs	r2, #5
 80098dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098e0:	2300      	movs	r3, #0
 80098e2:	2200      	movs	r2, #0
 80098e4:	2100      	movs	r1, #0
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fd66 	bl	800a3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
	...

080098f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098fc:	2200      	movs	r2, #0
 80098fe:	4912      	ldr	r1, [pc, #72]	; (8009948 <MX_USB_DEVICE_Init+0x50>)
 8009900:	4812      	ldr	r0, [pc, #72]	; (800994c <MX_USB_DEVICE_Init+0x54>)
 8009902:	f7fe fe65 	bl	80085d0 <USBD_Init>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800990c:	f7f7 f92a 	bl	8000b64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009910:	490f      	ldr	r1, [pc, #60]	; (8009950 <MX_USB_DEVICE_Init+0x58>)
 8009912:	480e      	ldr	r0, [pc, #56]	; (800994c <MX_USB_DEVICE_Init+0x54>)
 8009914:	f7fe fe8c 	bl	8008630 <USBD_RegisterClass>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800991e:	f7f7 f921 	bl	8000b64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009922:	490c      	ldr	r1, [pc, #48]	; (8009954 <MX_USB_DEVICE_Init+0x5c>)
 8009924:	4809      	ldr	r0, [pc, #36]	; (800994c <MX_USB_DEVICE_Init+0x54>)
 8009926:	f7fe fddd 	bl	80084e4 <USBD_CDC_RegisterInterface>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009930:	f7f7 f918 	bl	8000b64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009934:	4805      	ldr	r0, [pc, #20]	; (800994c <MX_USB_DEVICE_Init+0x54>)
 8009936:	f7fe fea2 	bl	800867e <USBD_Start>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009940:	f7f7 f910 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009944:	bf00      	nop
 8009946:	bd80      	pop	{r7, pc}
 8009948:	20000130 	.word	0x20000130
 800994c:	2000047c 	.word	0x2000047c
 8009950:	20000018 	.word	0x20000018
 8009954:	2000011c 	.word	0x2000011c

08009958 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800995c:	2200      	movs	r2, #0
 800995e:	4905      	ldr	r1, [pc, #20]	; (8009974 <CDC_Init_FS+0x1c>)
 8009960:	4805      	ldr	r0, [pc, #20]	; (8009978 <CDC_Init_FS+0x20>)
 8009962:	f7fe fdd4 	bl	800850e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009966:	4905      	ldr	r1, [pc, #20]	; (800997c <CDC_Init_FS+0x24>)
 8009968:	4803      	ldr	r0, [pc, #12]	; (8009978 <CDC_Init_FS+0x20>)
 800996a:	f7fe fdee 	bl	800854a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800996e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009970:	4618      	mov	r0, r3
 8009972:	bd80      	pop	{r7, pc}
 8009974:	20000f4c 	.word	0x20000f4c
 8009978:	2000047c 	.word	0x2000047c
 800997c:	2000074c 	.word	0x2000074c

08009980 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009980:	b480      	push	{r7}
 8009982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009984:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009986:	4618      	mov	r0, r3
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	6039      	str	r1, [r7, #0]
 800999a:	71fb      	strb	r3, [r7, #7]
 800999c:	4613      	mov	r3, r2
 800999e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80099a0:	79fb      	ldrb	r3, [r7, #7]
 80099a2:	2b23      	cmp	r3, #35	; 0x23
 80099a4:	d84a      	bhi.n	8009a3c <CDC_Control_FS+0xac>
 80099a6:	a201      	add	r2, pc, #4	; (adr r2, 80099ac <CDC_Control_FS+0x1c>)
 80099a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ac:	08009a3d 	.word	0x08009a3d
 80099b0:	08009a3d 	.word	0x08009a3d
 80099b4:	08009a3d 	.word	0x08009a3d
 80099b8:	08009a3d 	.word	0x08009a3d
 80099bc:	08009a3d 	.word	0x08009a3d
 80099c0:	08009a3d 	.word	0x08009a3d
 80099c4:	08009a3d 	.word	0x08009a3d
 80099c8:	08009a3d 	.word	0x08009a3d
 80099cc:	08009a3d 	.word	0x08009a3d
 80099d0:	08009a3d 	.word	0x08009a3d
 80099d4:	08009a3d 	.word	0x08009a3d
 80099d8:	08009a3d 	.word	0x08009a3d
 80099dc:	08009a3d 	.word	0x08009a3d
 80099e0:	08009a3d 	.word	0x08009a3d
 80099e4:	08009a3d 	.word	0x08009a3d
 80099e8:	08009a3d 	.word	0x08009a3d
 80099ec:	08009a3d 	.word	0x08009a3d
 80099f0:	08009a3d 	.word	0x08009a3d
 80099f4:	08009a3d 	.word	0x08009a3d
 80099f8:	08009a3d 	.word	0x08009a3d
 80099fc:	08009a3d 	.word	0x08009a3d
 8009a00:	08009a3d 	.word	0x08009a3d
 8009a04:	08009a3d 	.word	0x08009a3d
 8009a08:	08009a3d 	.word	0x08009a3d
 8009a0c:	08009a3d 	.word	0x08009a3d
 8009a10:	08009a3d 	.word	0x08009a3d
 8009a14:	08009a3d 	.word	0x08009a3d
 8009a18:	08009a3d 	.word	0x08009a3d
 8009a1c:	08009a3d 	.word	0x08009a3d
 8009a20:	08009a3d 	.word	0x08009a3d
 8009a24:	08009a3d 	.word	0x08009a3d
 8009a28:	08009a3d 	.word	0x08009a3d
 8009a2c:	08009a3d 	.word	0x08009a3d
 8009a30:	08009a3d 	.word	0x08009a3d
 8009a34:	08009a3d 	.word	0x08009a3d
 8009a38:	08009a3d 	.word	0x08009a3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a3c:	bf00      	nop
  }

  return (USBD_OK);
 8009a3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4805      	ldr	r0, [pc, #20]	; (8009a70 <CDC_Receive_FS+0x24>)
 8009a5a:	f7fe fd76 	bl	800854a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a5e:	4804      	ldr	r0, [pc, #16]	; (8009a70 <CDC_Receive_FS+0x24>)
 8009a60:	f7fe fd8c 	bl	800857c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009a64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	2000047c 	.word	0x2000047c

08009a74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
	...

08009a98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	6039      	str	r1, [r7, #0]
 8009aa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2212      	movs	r2, #18
 8009aa8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009aaa:	4b03      	ldr	r3, [pc, #12]	; (8009ab8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	20000150 	.word	0x20000150

08009abc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	6039      	str	r1, [r7, #0]
 8009ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2204      	movs	r2, #4
 8009acc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009ace:	4b03      	ldr	r3, [pc, #12]	; (8009adc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	20000170 	.word	0x20000170

08009ae0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	6039      	str	r1, [r7, #0]
 8009aea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d105      	bne.n	8009afe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	4907      	ldr	r1, [pc, #28]	; (8009b14 <USBD_FS_ProductStrDescriptor+0x34>)
 8009af6:	4808      	ldr	r0, [pc, #32]	; (8009b18 <USBD_FS_ProductStrDescriptor+0x38>)
 8009af8:	f7ff fe1d 	bl	8009736 <USBD_GetString>
 8009afc:	e004      	b.n	8009b08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	4904      	ldr	r1, [pc, #16]	; (8009b14 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b02:	4805      	ldr	r0, [pc, #20]	; (8009b18 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b04:	f7ff fe17 	bl	8009736 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b08:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	2000174c 	.word	0x2000174c
 8009b18:	0800ae88 	.word	0x0800ae88

08009b1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	6039      	str	r1, [r7, #0]
 8009b26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	4904      	ldr	r1, [pc, #16]	; (8009b3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b2c:	4804      	ldr	r0, [pc, #16]	; (8009b40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b2e:	f7ff fe02 	bl	8009736 <USBD_GetString>
  return USBD_StrDesc;
 8009b32:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	2000174c 	.word	0x2000174c
 8009b40:	0800aea0 	.word	0x0800aea0

08009b44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	6039      	str	r1, [r7, #0]
 8009b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	221a      	movs	r2, #26
 8009b54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b56:	f000 f855 	bl	8009c04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b5a:	4b02      	ldr	r3, [pc, #8]	; (8009b64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	20000174 	.word	0x20000174

08009b68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	6039      	str	r1, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d105      	bne.n	8009b86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	4907      	ldr	r1, [pc, #28]	; (8009b9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b7e:	4808      	ldr	r0, [pc, #32]	; (8009ba0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b80:	f7ff fdd9 	bl	8009736 <USBD_GetString>
 8009b84:	e004      	b.n	8009b90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	4904      	ldr	r1, [pc, #16]	; (8009b9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b8a:	4805      	ldr	r0, [pc, #20]	; (8009ba0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b8c:	f7ff fdd3 	bl	8009736 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b90:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	2000174c 	.word	0x2000174c
 8009ba0:	0800aeb4 	.word	0x0800aeb4

08009ba4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	6039      	str	r1, [r7, #0]
 8009bae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bb0:	79fb      	ldrb	r3, [r7, #7]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d105      	bne.n	8009bc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	4907      	ldr	r1, [pc, #28]	; (8009bd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bba:	4808      	ldr	r0, [pc, #32]	; (8009bdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bbc:	f7ff fdbb 	bl	8009736 <USBD_GetString>
 8009bc0:	e004      	b.n	8009bcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	4904      	ldr	r1, [pc, #16]	; (8009bd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bc6:	4805      	ldr	r0, [pc, #20]	; (8009bdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bc8:	f7ff fdb5 	bl	8009736 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bcc:	4b02      	ldr	r3, [pc, #8]	; (8009bd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	2000174c 	.word	0x2000174c
 8009bdc:	0800aec0 	.word	0x0800aec0

08009be0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	4603      	mov	r3, r0
 8009be8:	6039      	str	r1, [r7, #0]
 8009bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	220c      	movs	r2, #12
 8009bf0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009bf2:	4b03      	ldr	r3, [pc, #12]	; (8009c00 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	20000164 	.word	0x20000164

08009c04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c0a:	4b0f      	ldr	r3, [pc, #60]	; (8009c48 <Get_SerialNum+0x44>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c10:	4b0e      	ldr	r3, [pc, #56]	; (8009c4c <Get_SerialNum+0x48>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c16:	4b0e      	ldr	r3, [pc, #56]	; (8009c50 <Get_SerialNum+0x4c>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4413      	add	r3, r2
 8009c22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d009      	beq.n	8009c3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c2a:	2208      	movs	r2, #8
 8009c2c:	4909      	ldr	r1, [pc, #36]	; (8009c54 <Get_SerialNum+0x50>)
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 f814 	bl	8009c5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c34:	2204      	movs	r2, #4
 8009c36:	4908      	ldr	r1, [pc, #32]	; (8009c58 <Get_SerialNum+0x54>)
 8009c38:	68b8      	ldr	r0, [r7, #8]
 8009c3a:	f000 f80f 	bl	8009c5c <IntToUnicode>
  }
}
 8009c3e:	bf00      	nop
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	1fff7590 	.word	0x1fff7590
 8009c4c:	1fff7594 	.word	0x1fff7594
 8009c50:	1fff7598 	.word	0x1fff7598
 8009c54:	20000176 	.word	0x20000176
 8009c58:	20000186 	.word	0x20000186

08009c5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4613      	mov	r3, r2
 8009c68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]
 8009c72:	e027      	b.n	8009cc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	0f1b      	lsrs	r3, r3, #28
 8009c78:	2b09      	cmp	r3, #9
 8009c7a:	d80b      	bhi.n	8009c94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	0f1b      	lsrs	r3, r3, #28
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	005b      	lsls	r3, r3, #1
 8009c86:	4619      	mov	r1, r3
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	440b      	add	r3, r1
 8009c8c:	3230      	adds	r2, #48	; 0x30
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	701a      	strb	r2, [r3, #0]
 8009c92:	e00a      	b.n	8009caa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	0f1b      	lsrs	r3, r3, #28
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	7dfb      	ldrb	r3, [r7, #23]
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	440b      	add	r3, r1
 8009ca4:	3237      	adds	r2, #55	; 0x37
 8009ca6:	b2d2      	uxtb	r2, r2
 8009ca8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	011b      	lsls	r3, r3, #4
 8009cae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	4413      	add	r3, r2
 8009cba:	2200      	movs	r2, #0
 8009cbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	75fb      	strb	r3, [r7, #23]
 8009cc4:	7dfa      	ldrb	r2, [r7, #23]
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d3d3      	bcc.n	8009c74 <IntToUnicode+0x18>
  }
}
 8009ccc:	bf00      	nop
 8009cce:	bf00      	nop
 8009cd0:	371c      	adds	r7, #28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
	...

08009cdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b08a      	sub	sp, #40	; 0x28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ce4:	f107 0314 	add.w	r3, r7, #20
 8009ce8:	2200      	movs	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	605a      	str	r2, [r3, #4]
 8009cee:	609a      	str	r2, [r3, #8]
 8009cf0:	60da      	str	r2, [r3, #12]
 8009cf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cfc:	d15c      	bne.n	8009db8 <HAL_PCD_MspInit+0xdc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cfe:	4b30      	ldr	r3, [pc, #192]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d02:	4a2f      	ldr	r2, [pc, #188]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d04:	f043 0301 	orr.w	r3, r3, #1
 8009d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d0a:	4b2d      	ldr	r3, [pc, #180]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	613b      	str	r3, [r7, #16]
 8009d14:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009d16:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d24:	2303      	movs	r3, #3
 8009d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d28:	230a      	movs	r3, #10
 8009d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d2c:	f107 0314 	add.w	r3, r7, #20
 8009d30:	4619      	mov	r1, r3
 8009d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d36:	f7f8 fe0b 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009d48:	f107 0314 	add.w	r3, r7, #20
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d52:	f7f8 fdfd 	bl	8002950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d56:	4b1a      	ldr	r3, [pc, #104]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d5a:	4a19      	ldr	r2, [pc, #100]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d62:	4b17      	ldr	r3, [pc, #92]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d6a:	60fb      	str	r3, [r7, #12]
 8009d6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d6e:	4b14      	ldr	r3, [pc, #80]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d114      	bne.n	8009da4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d7a:	4b11      	ldr	r3, [pc, #68]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d7e:	4a10      	ldr	r2, [pc, #64]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d84:	6593      	str	r3, [r2, #88]	; 0x58
 8009d86:	4b0e      	ldr	r3, [pc, #56]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d8e:	60bb      	str	r3, [r7, #8]
 8009d90:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009d92:	f7fa f9bb 	bl	800410c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d96:	4b0a      	ldr	r3, [pc, #40]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d9a:	4a09      	ldr	r2, [pc, #36]	; (8009dc0 <HAL_PCD_MspInit+0xe4>)
 8009d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009da0:	6593      	str	r3, [r2, #88]	; 0x58
 8009da2:	e001      	b.n	8009da8 <HAL_PCD_MspInit+0xcc>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009da4:	f7fa f9b2 	bl	800410c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009da8:	2200      	movs	r2, #0
 8009daa:	2100      	movs	r1, #0
 8009dac:	2043      	movs	r0, #67	; 0x43
 8009dae:	f7f8 fd1a 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009db2:	2043      	movs	r0, #67	; 0x43
 8009db4:	f7f8 fd33 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009db8:	bf00      	nop
 8009dba:	3728      	adds	r7, #40	; 0x28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	40021000 	.word	0x40021000

08009dc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4610      	mov	r0, r2
 8009ddc:	f7fe fc9a 	bl	8008714 <USBD_LL_SetupStage>
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009dfa:	78fa      	ldrb	r2, [r7, #3]
 8009dfc:	6879      	ldr	r1, [r7, #4]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	00db      	lsls	r3, r3, #3
 8009e02:	4413      	add	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	440b      	add	r3, r1
 8009e08:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	4619      	mov	r1, r3
 8009e12:	f7fe fcd4 	bl	80087be <USBD_LL_DataOutStage>
}
 8009e16:	bf00      	nop
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e30:	78fa      	ldrb	r2, [r7, #3]
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	4613      	mov	r3, r2
 8009e36:	00db      	lsls	r3, r3, #3
 8009e38:	4413      	add	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	440b      	add	r3, r1
 8009e3e:	334c      	adds	r3, #76	; 0x4c
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	4619      	mov	r1, r3
 8009e46:	f7fe fd1d 	bl	8008884 <USBD_LL_DataInStage>
}
 8009e4a:	bf00      	nop
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe fe31 	bl	8008ac8 <USBD_LL_SOF>
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e76:	2301      	movs	r3, #1
 8009e78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d001      	beq.n	8009e86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e82:	f7f6 fe6f 	bl	8000b64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e8c:	7bfa      	ldrb	r2, [r7, #15]
 8009e8e:	4611      	mov	r1, r2
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fe fddb 	bl	8008a4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe fd87 	bl	80089b0 <USBD_LL_Reset>
}
 8009ea2:	bf00      	nop
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
	...

08009eac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6812      	ldr	r2, [r2, #0]
 8009ec2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ec6:	f043 0301 	orr.w	r3, r3, #1
 8009eca:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fdca 	bl	8008a6c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d005      	beq.n	8009eec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ee0:	4b04      	ldr	r3, [pc, #16]	; (8009ef4 <HAL_PCD_SuspendCallback+0x48>)
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	4a03      	ldr	r2, [pc, #12]	; (8009ef4 <HAL_PCD_SuspendCallback+0x48>)
 8009ee6:	f043 0306 	orr.w	r3, r3, #6
 8009eea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	e000ed00 	.word	0xe000ed00

08009ef8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	6812      	ldr	r2, [r2, #0]
 8009f0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f12:	f023 0301 	bic.w	r3, r3, #1
 8009f16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a1b      	ldr	r3, [r3, #32]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d007      	beq.n	8009f30 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f20:	4b08      	ldr	r3, [pc, #32]	; (8009f44 <HAL_PCD_ResumeCallback+0x4c>)
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	4a07      	ldr	r2, [pc, #28]	; (8009f44 <HAL_PCD_ResumeCallback+0x4c>)
 8009f26:	f023 0306 	bic.w	r3, r3, #6
 8009f2a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009f2c:	f000 faf6 	bl	800a51c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fdae 	bl	8008a98 <USBD_LL_Resume>
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	e000ed00 	.word	0xe000ed00

08009f48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f5a:	78fa      	ldrb	r2, [r7, #3]
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe fdfa 	bl	8008b58 <USBD_LL_IsoOUTIncomplete>
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f7e:	78fa      	ldrb	r2, [r7, #3]
 8009f80:	4611      	mov	r1, r2
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fdc2 	bl	8008b0c <USBD_LL_IsoINIncomplete>
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe fe00 	bl	8008ba4 <USBD_LL_DevConnected>
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe fdfd 	bl	8008bba <USBD_LL_DevDisconnected>
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d13c      	bne.n	800a052 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009fd8:	4a20      	ldr	r2, [pc, #128]	; (800a05c <USBD_LL_Init+0x94>)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a1e      	ldr	r2, [pc, #120]	; (800a05c <USBD_LL_Init+0x94>)
 8009fe4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009fe8:	4b1c      	ldr	r3, [pc, #112]	; (800a05c <USBD_LL_Init+0x94>)
 8009fea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009fee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009ff0:	4b1a      	ldr	r3, [pc, #104]	; (800a05c <USBD_LL_Init+0x94>)
 8009ff2:	2206      	movs	r2, #6
 8009ff4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ff6:	4b19      	ldr	r3, [pc, #100]	; (800a05c <USBD_LL_Init+0x94>)
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ffc:	4b17      	ldr	r3, [pc, #92]	; (800a05c <USBD_LL_Init+0x94>)
 8009ffe:	2202      	movs	r2, #2
 800a000:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a002:	4b16      	ldr	r3, [pc, #88]	; (800a05c <USBD_LL_Init+0x94>)
 800a004:	2201      	movs	r2, #1
 800a006:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a008:	4b14      	ldr	r3, [pc, #80]	; (800a05c <USBD_LL_Init+0x94>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a00e:	4b13      	ldr	r3, [pc, #76]	; (800a05c <USBD_LL_Init+0x94>)
 800a010:	2200      	movs	r2, #0
 800a012:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800a014:	4b11      	ldr	r3, [pc, #68]	; (800a05c <USBD_LL_Init+0x94>)
 800a016:	2201      	movs	r2, #1
 800a018:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a01a:	4b10      	ldr	r3, [pc, #64]	; (800a05c <USBD_LL_Init+0x94>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a020:	4b0e      	ldr	r3, [pc, #56]	; (800a05c <USBD_LL_Init+0x94>)
 800a022:	2201      	movs	r2, #1
 800a024:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a026:	480d      	ldr	r0, [pc, #52]	; (800a05c <USBD_LL_Init+0x94>)
 800a028:	f7f8 fe3c 	bl	8002ca4 <HAL_PCD_Init>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a032:	f7f6 fd97 	bl	8000b64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a036:	2180      	movs	r1, #128	; 0x80
 800a038:	4808      	ldr	r0, [pc, #32]	; (800a05c <USBD_LL_Init+0x94>)
 800a03a:	f7f9 ffbe 	bl	8003fba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a03e:	2240      	movs	r2, #64	; 0x40
 800a040:	2100      	movs	r1, #0
 800a042:	4806      	ldr	r0, [pc, #24]	; (800a05c <USBD_LL_Init+0x94>)
 800a044:	f7f9 ff72 	bl	8003f2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a048:	2280      	movs	r2, #128	; 0x80
 800a04a:	2101      	movs	r1, #1
 800a04c:	4803      	ldr	r0, [pc, #12]	; (800a05c <USBD_LL_Init+0x94>)
 800a04e:	f7f9 ff6d 	bl	8003f2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	2000194c 	.word	0x2000194c

0800a060 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a076:	4618      	mov	r0, r3
 800a078:	f7f8 ff38 	bl	8002eec <HAL_PCD_Start>
 800a07c:	4603      	mov	r3, r0
 800a07e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a080:	7bbb      	ldrb	r3, [r7, #14]
 800a082:	2b03      	cmp	r3, #3
 800a084:	d816      	bhi.n	800a0b4 <USBD_LL_Start+0x54>
 800a086:	a201      	add	r2, pc, #4	; (adr r2, 800a08c <USBD_LL_Start+0x2c>)
 800a088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08c:	0800a09d 	.word	0x0800a09d
 800a090:	0800a0a3 	.word	0x0800a0a3
 800a094:	0800a0a9 	.word	0x0800a0a9
 800a098:	0800a0af 	.word	0x0800a0af
    case HAL_OK :
      usb_status = USBD_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a0:	e00b      	b.n	800a0ba <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a6:	e008      	b.n	800a0ba <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ac:	e005      	b.n	800a0ba <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a0b2:	e002      	b.n	800a0ba <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0b8:	bf00      	nop
  }
  return usb_status;
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	4608      	mov	r0, r1
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	70fb      	strb	r3, [r7, #3]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	70bb      	strb	r3, [r7, #2]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0ec:	78bb      	ldrb	r3, [r7, #2]
 800a0ee:	883a      	ldrh	r2, [r7, #0]
 800a0f0:	78f9      	ldrb	r1, [r7, #3]
 800a0f2:	f7f9 fbe2 	bl	80038ba <HAL_PCD_EP_Open>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d817      	bhi.n	800a130 <USBD_LL_OpenEP+0x6c>
 800a100:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <USBD_LL_OpenEP+0x44>)
 800a102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a106:	bf00      	nop
 800a108:	0800a119 	.word	0x0800a119
 800a10c:	0800a11f 	.word	0x0800a11f
 800a110:	0800a125 	.word	0x0800a125
 800a114:	0800a12b 	.word	0x0800a12b
    case HAL_OK :
      usb_status = USBD_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]
    break;
 800a11c:	e00b      	b.n	800a136 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a11e:	2303      	movs	r3, #3
 800a120:	73fb      	strb	r3, [r7, #15]
    break;
 800a122:	e008      	b.n	800a136 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a124:	2301      	movs	r3, #1
 800a126:	73fb      	strb	r3, [r7, #15]
    break;
 800a128:	e005      	b.n	800a136 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a12a:	2303      	movs	r3, #3
 800a12c:	73fb      	strb	r3, [r7, #15]
    break;
 800a12e:	e002      	b.n	800a136 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a130:	2303      	movs	r3, #3
 800a132:	73fb      	strb	r3, [r7, #15]
    break;
 800a134:	bf00      	nop
  }
  return usb_status;
 800a136:	7bfb      	ldrb	r3, [r7, #15]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a15a:	78fa      	ldrb	r2, [r7, #3]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f7f9 fc13 	bl	800398a <HAL_PCD_EP_Close>
 800a164:	4603      	mov	r3, r0
 800a166:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a168:	7bbb      	ldrb	r3, [r7, #14]
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d816      	bhi.n	800a19c <USBD_LL_CloseEP+0x5c>
 800a16e:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <USBD_LL_CloseEP+0x34>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a185 	.word	0x0800a185
 800a178:	0800a18b 	.word	0x0800a18b
 800a17c:	0800a191 	.word	0x0800a191
 800a180:	0800a197 	.word	0x0800a197
    case HAL_OK :
      usb_status = USBD_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	73fb      	strb	r3, [r7, #15]
    break;
 800a188:	e00b      	b.n	800a1a2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a18a:	2303      	movs	r3, #3
 800a18c:	73fb      	strb	r3, [r7, #15]
    break;
 800a18e:	e008      	b.n	800a1a2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a190:	2301      	movs	r3, #1
 800a192:	73fb      	strb	r3, [r7, #15]
    break;
 800a194:	e005      	b.n	800a1a2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a196:	2303      	movs	r3, #3
 800a198:	73fb      	strb	r3, [r7, #15]
    break;
 800a19a:	e002      	b.n	800a1a2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a19c:	2303      	movs	r3, #3
 800a19e:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a0:	bf00      	nop
  }
  return usb_status;
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1c6:	78fa      	ldrb	r2, [r7, #3]
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7f9 fcba 	bl	8003b44 <HAL_PCD_EP_SetStall>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d816      	bhi.n	800a208 <USBD_LL_StallEP+0x5c>
 800a1da:	a201      	add	r2, pc, #4	; (adr r2, 800a1e0 <USBD_LL_StallEP+0x34>)
 800a1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e0:	0800a1f1 	.word	0x0800a1f1
 800a1e4:	0800a1f7 	.word	0x0800a1f7
 800a1e8:	0800a1fd 	.word	0x0800a1fd
 800a1ec:	0800a203 	.word	0x0800a203
    case HAL_OK :
      usb_status = USBD_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f4:	e00b      	b.n	800a20e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a1fa:	e008      	b.n	800a20e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a200:	e005      	b.n	800a20e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a202:	2303      	movs	r3, #3
 800a204:	73fb      	strb	r3, [r7, #15]
    break;
 800a206:	e002      	b.n	800a20e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a208:	2303      	movs	r3, #3
 800a20a:	73fb      	strb	r3, [r7, #15]
    break;
 800a20c:	bf00      	nop
  }
  return usb_status;
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a232:	78fa      	ldrb	r2, [r7, #3]
 800a234:	4611      	mov	r1, r2
 800a236:	4618      	mov	r0, r3
 800a238:	f7f9 fce6 	bl	8003c08 <HAL_PCD_EP_ClrStall>
 800a23c:	4603      	mov	r3, r0
 800a23e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a240:	7bbb      	ldrb	r3, [r7, #14]
 800a242:	2b03      	cmp	r3, #3
 800a244:	d816      	bhi.n	800a274 <USBD_LL_ClearStallEP+0x5c>
 800a246:	a201      	add	r2, pc, #4	; (adr r2, 800a24c <USBD_LL_ClearStallEP+0x34>)
 800a248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24c:	0800a25d 	.word	0x0800a25d
 800a250:	0800a263 	.word	0x0800a263
 800a254:	0800a269 	.word	0x0800a269
 800a258:	0800a26f 	.word	0x0800a26f
    case HAL_OK :
      usb_status = USBD_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	73fb      	strb	r3, [r7, #15]
    break;
 800a260:	e00b      	b.n	800a27a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a262:	2303      	movs	r3, #3
 800a264:	73fb      	strb	r3, [r7, #15]
    break;
 800a266:	e008      	b.n	800a27a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a268:	2301      	movs	r3, #1
 800a26a:	73fb      	strb	r3, [r7, #15]
    break;
 800a26c:	e005      	b.n	800a27a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a26e:	2303      	movs	r3, #3
 800a270:	73fb      	strb	r3, [r7, #15]
    break;
 800a272:	e002      	b.n	800a27a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a274:	2303      	movs	r3, #3
 800a276:	73fb      	strb	r3, [r7, #15]
    break;
 800a278:	bf00      	nop
  }
  return usb_status;
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	460b      	mov	r3, r1
 800a28e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a296:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	da0b      	bge.n	800a2b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2a0:	78fb      	ldrb	r3, [r7, #3]
 800a2a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2a6:	68f9      	ldr	r1, [r7, #12]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	00db      	lsls	r3, r3, #3
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	440b      	add	r3, r1
 800a2b2:	333e      	adds	r3, #62	; 0x3e
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	e00b      	b.n	800a2d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2b8:	78fb      	ldrb	r3, [r7, #3]
 800a2ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2be:	68f9      	ldr	r1, [r7, #12]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	00db      	lsls	r3, r3, #3
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	440b      	add	r3, r1
 800a2ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a2ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2f6:	78fa      	ldrb	r2, [r7, #3]
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7f9 fab8 	bl	8003870 <HAL_PCD_SetAddress>
 800a300:	4603      	mov	r3, r0
 800a302:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a304:	7bbb      	ldrb	r3, [r7, #14]
 800a306:	2b03      	cmp	r3, #3
 800a308:	d816      	bhi.n	800a338 <USBD_LL_SetUSBAddress+0x5c>
 800a30a:	a201      	add	r2, pc, #4	; (adr r2, 800a310 <USBD_LL_SetUSBAddress+0x34>)
 800a30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a310:	0800a321 	.word	0x0800a321
 800a314:	0800a327 	.word	0x0800a327
 800a318:	0800a32d 	.word	0x0800a32d
 800a31c:	0800a333 	.word	0x0800a333
    case HAL_OK :
      usb_status = USBD_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]
    break;
 800a324:	e00b      	b.n	800a33e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a326:	2303      	movs	r3, #3
 800a328:	73fb      	strb	r3, [r7, #15]
    break;
 800a32a:	e008      	b.n	800a33e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a32c:	2301      	movs	r3, #1
 800a32e:	73fb      	strb	r3, [r7, #15]
    break;
 800a330:	e005      	b.n	800a33e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a332:	2303      	movs	r3, #3
 800a334:	73fb      	strb	r3, [r7, #15]
    break;
 800a336:	e002      	b.n	800a33e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a338:	2303      	movs	r3, #3
 800a33a:	73fb      	strb	r3, [r7, #15]
    break;
 800a33c:	bf00      	nop
  }
  return usb_status;
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	607a      	str	r2, [r7, #4]
 800a352:	603b      	str	r3, [r7, #0]
 800a354:	460b      	mov	r3, r1
 800a356:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a366:	7af9      	ldrb	r1, [r7, #11]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	f7f9 fbad 	bl	8003aca <HAL_PCD_EP_Transmit>
 800a370:	4603      	mov	r3, r0
 800a372:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a374:	7dbb      	ldrb	r3, [r7, #22]
 800a376:	2b03      	cmp	r3, #3
 800a378:	d816      	bhi.n	800a3a8 <USBD_LL_Transmit+0x60>
 800a37a:	a201      	add	r2, pc, #4	; (adr r2, 800a380 <USBD_LL_Transmit+0x38>)
 800a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a380:	0800a391 	.word	0x0800a391
 800a384:	0800a397 	.word	0x0800a397
 800a388:	0800a39d 	.word	0x0800a39d
 800a38c:	0800a3a3 	.word	0x0800a3a3
    case HAL_OK :
      usb_status = USBD_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	75fb      	strb	r3, [r7, #23]
    break;
 800a394:	e00b      	b.n	800a3ae <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a396:	2303      	movs	r3, #3
 800a398:	75fb      	strb	r3, [r7, #23]
    break;
 800a39a:	e008      	b.n	800a3ae <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a39c:	2301      	movs	r3, #1
 800a39e:	75fb      	strb	r3, [r7, #23]
    break;
 800a3a0:	e005      	b.n	800a3ae <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	75fb      	strb	r3, [r7, #23]
    break;
 800a3a6:	e002      	b.n	800a3ae <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	75fb      	strb	r3, [r7, #23]
    break;
 800a3ac:	bf00      	nop
  }
  return usb_status;
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	607a      	str	r2, [r7, #4]
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3d6:	7af9      	ldrb	r1, [r7, #11]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	f7f9 fb1f 	bl	8003a1e <HAL_PCD_EP_Receive>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a3e4:	7dbb      	ldrb	r3, [r7, #22]
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	d816      	bhi.n	800a418 <USBD_LL_PrepareReceive+0x60>
 800a3ea:	a201      	add	r2, pc, #4	; (adr r2, 800a3f0 <USBD_LL_PrepareReceive+0x38>)
 800a3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f0:	0800a401 	.word	0x0800a401
 800a3f4:	0800a407 	.word	0x0800a407
 800a3f8:	0800a40d 	.word	0x0800a40d
 800a3fc:	0800a413 	.word	0x0800a413
    case HAL_OK :
      usb_status = USBD_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	75fb      	strb	r3, [r7, #23]
    break;
 800a404:	e00b      	b.n	800a41e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a406:	2303      	movs	r3, #3
 800a408:	75fb      	strb	r3, [r7, #23]
    break;
 800a40a:	e008      	b.n	800a41e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a40c:	2301      	movs	r3, #1
 800a40e:	75fb      	strb	r3, [r7, #23]
    break;
 800a410:	e005      	b.n	800a41e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a412:	2303      	movs	r3, #3
 800a414:	75fb      	strb	r3, [r7, #23]
    break;
 800a416:	e002      	b.n	800a41e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	75fb      	strb	r3, [r7, #23]
    break;
 800a41c:	bf00      	nop
  }
  return usb_status;
 800a41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3718      	adds	r7, #24
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	460b      	mov	r3, r1
 800a432:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a43a:	78fa      	ldrb	r2, [r7, #3]
 800a43c:	4611      	mov	r1, r2
 800a43e:	4618      	mov	r0, r3
 800a440:	f7f9 fb2b 	bl	8003a9a <HAL_PCD_EP_GetRxCount>
 800a444:	4603      	mov	r3, r0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
	...

0800a450 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d002      	beq.n	800a468 <HAL_PCDEx_LPM_Callback+0x18>
 800a462:	2b01      	cmp	r3, #1
 800a464:	d01f      	beq.n	800a4a6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a466:	e03b      	b.n	800a4e0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a1b      	ldr	r3, [r3, #32]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d007      	beq.n	800a480 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a470:	f000 f854 	bl	800a51c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a474:	4b1c      	ldr	r3, [pc, #112]	; (800a4e8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	4a1b      	ldr	r2, [pc, #108]	; (800a4e8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a47a:	f023 0306 	bic.w	r3, r3, #6
 800a47e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6812      	ldr	r2, [r2, #0]
 800a48e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a492:	f023 0301 	bic.w	r3, r3, #1
 800a496:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fafa 	bl	8008a98 <USBD_LL_Resume>
    break;
 800a4a4:	e01c      	b.n	800a4e0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	6812      	ldr	r2, [r2, #0]
 800a4b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4b8:	f043 0301 	orr.w	r3, r3, #1
 800a4bc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fe fad1 	bl	8008a6c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d005      	beq.n	800a4de <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4d2:	4b05      	ldr	r3, [pc, #20]	; (800a4e8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	4a04      	ldr	r2, [pc, #16]	; (800a4e8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a4d8:	f043 0306 	orr.w	r3, r3, #6
 800a4dc:	6113      	str	r3, [r2, #16]
    break;
 800a4de:	bf00      	nop
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	e000ed00 	.word	0xe000ed00

0800a4ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4f4:	4b03      	ldr	r3, [pc, #12]	; (800a504 <USBD_static_malloc+0x18>)
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	370c      	adds	r7, #12
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	20001e58 	.word	0x20001e58

0800a508 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]

}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a520:	f7f6 f880 	bl	8000624 <SystemClock_Config>
}
 800a524:	bf00      	nop
 800a526:	bd80      	pop	{r7, pc}

0800a528 <__errno>:
 800a528:	4b01      	ldr	r3, [pc, #4]	; (800a530 <__errno+0x8>)
 800a52a:	6818      	ldr	r0, [r3, #0]
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	20000190 	.word	0x20000190

0800a534 <__libc_init_array>:
 800a534:	b570      	push	{r4, r5, r6, lr}
 800a536:	4d0d      	ldr	r5, [pc, #52]	; (800a56c <__libc_init_array+0x38>)
 800a538:	4c0d      	ldr	r4, [pc, #52]	; (800a570 <__libc_init_array+0x3c>)
 800a53a:	1b64      	subs	r4, r4, r5
 800a53c:	10a4      	asrs	r4, r4, #2
 800a53e:	2600      	movs	r6, #0
 800a540:	42a6      	cmp	r6, r4
 800a542:	d109      	bne.n	800a558 <__libc_init_array+0x24>
 800a544:	4d0b      	ldr	r5, [pc, #44]	; (800a574 <__libc_init_array+0x40>)
 800a546:	4c0c      	ldr	r4, [pc, #48]	; (800a578 <__libc_init_array+0x44>)
 800a548:	f000 fc8e 	bl	800ae68 <_init>
 800a54c:	1b64      	subs	r4, r4, r5
 800a54e:	10a4      	asrs	r4, r4, #2
 800a550:	2600      	movs	r6, #0
 800a552:	42a6      	cmp	r6, r4
 800a554:	d105      	bne.n	800a562 <__libc_init_array+0x2e>
 800a556:	bd70      	pop	{r4, r5, r6, pc}
 800a558:	f855 3b04 	ldr.w	r3, [r5], #4
 800a55c:	4798      	blx	r3
 800a55e:	3601      	adds	r6, #1
 800a560:	e7ee      	b.n	800a540 <__libc_init_array+0xc>
 800a562:	f855 3b04 	ldr.w	r3, [r5], #4
 800a566:	4798      	blx	r3
 800a568:	3601      	adds	r6, #1
 800a56a:	e7f2      	b.n	800a552 <__libc_init_array+0x1e>
 800a56c:	0800af54 	.word	0x0800af54
 800a570:	0800af54 	.word	0x0800af54
 800a574:	0800af54 	.word	0x0800af54
 800a578:	0800af58 	.word	0x0800af58

0800a57c <memset>:
 800a57c:	4402      	add	r2, r0
 800a57e:	4603      	mov	r3, r0
 800a580:	4293      	cmp	r3, r2
 800a582:	d100      	bne.n	800a586 <memset+0xa>
 800a584:	4770      	bx	lr
 800a586:	f803 1b01 	strb.w	r1, [r3], #1
 800a58a:	e7f9      	b.n	800a580 <memset+0x4>

0800a58c <siprintf>:
 800a58c:	b40e      	push	{r1, r2, r3}
 800a58e:	b500      	push	{lr}
 800a590:	b09c      	sub	sp, #112	; 0x70
 800a592:	ab1d      	add	r3, sp, #116	; 0x74
 800a594:	9002      	str	r0, [sp, #8]
 800a596:	9006      	str	r0, [sp, #24]
 800a598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a59c:	4809      	ldr	r0, [pc, #36]	; (800a5c4 <siprintf+0x38>)
 800a59e:	9107      	str	r1, [sp, #28]
 800a5a0:	9104      	str	r1, [sp, #16]
 800a5a2:	4909      	ldr	r1, [pc, #36]	; (800a5c8 <siprintf+0x3c>)
 800a5a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a8:	9105      	str	r1, [sp, #20]
 800a5aa:	6800      	ldr	r0, [r0, #0]
 800a5ac:	9301      	str	r3, [sp, #4]
 800a5ae:	a902      	add	r1, sp, #8
 800a5b0:	f000 f868 	bl	800a684 <_svfiprintf_r>
 800a5b4:	9b02      	ldr	r3, [sp, #8]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	701a      	strb	r2, [r3, #0]
 800a5ba:	b01c      	add	sp, #112	; 0x70
 800a5bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5c0:	b003      	add	sp, #12
 800a5c2:	4770      	bx	lr
 800a5c4:	20000190 	.word	0x20000190
 800a5c8:	ffff0208 	.word	0xffff0208

0800a5cc <__ssputs_r>:
 800a5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d0:	688e      	ldr	r6, [r1, #8]
 800a5d2:	429e      	cmp	r6, r3
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	4690      	mov	r8, r2
 800a5da:	461f      	mov	r7, r3
 800a5dc:	d838      	bhi.n	800a650 <__ssputs_r+0x84>
 800a5de:	898a      	ldrh	r2, [r1, #12]
 800a5e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5e4:	d032      	beq.n	800a64c <__ssputs_r+0x80>
 800a5e6:	6825      	ldr	r5, [r4, #0]
 800a5e8:	6909      	ldr	r1, [r1, #16]
 800a5ea:	eba5 0901 	sub.w	r9, r5, r1
 800a5ee:	6965      	ldr	r5, [r4, #20]
 800a5f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	444b      	add	r3, r9
 800a5fc:	106d      	asrs	r5, r5, #1
 800a5fe:	429d      	cmp	r5, r3
 800a600:	bf38      	it	cc
 800a602:	461d      	movcc	r5, r3
 800a604:	0553      	lsls	r3, r2, #21
 800a606:	d531      	bpl.n	800a66c <__ssputs_r+0xa0>
 800a608:	4629      	mov	r1, r5
 800a60a:	f000 fb63 	bl	800acd4 <_malloc_r>
 800a60e:	4606      	mov	r6, r0
 800a610:	b950      	cbnz	r0, 800a628 <__ssputs_r+0x5c>
 800a612:	230c      	movs	r3, #12
 800a614:	f8ca 3000 	str.w	r3, [sl]
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a61e:	81a3      	strh	r3, [r4, #12]
 800a620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a628:	6921      	ldr	r1, [r4, #16]
 800a62a:	464a      	mov	r2, r9
 800a62c:	f000 fabe 	bl	800abac <memcpy>
 800a630:	89a3      	ldrh	r3, [r4, #12]
 800a632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a63a:	81a3      	strh	r3, [r4, #12]
 800a63c:	6126      	str	r6, [r4, #16]
 800a63e:	6165      	str	r5, [r4, #20]
 800a640:	444e      	add	r6, r9
 800a642:	eba5 0509 	sub.w	r5, r5, r9
 800a646:	6026      	str	r6, [r4, #0]
 800a648:	60a5      	str	r5, [r4, #8]
 800a64a:	463e      	mov	r6, r7
 800a64c:	42be      	cmp	r6, r7
 800a64e:	d900      	bls.n	800a652 <__ssputs_r+0x86>
 800a650:	463e      	mov	r6, r7
 800a652:	6820      	ldr	r0, [r4, #0]
 800a654:	4632      	mov	r2, r6
 800a656:	4641      	mov	r1, r8
 800a658:	f000 fab6 	bl	800abc8 <memmove>
 800a65c:	68a3      	ldr	r3, [r4, #8]
 800a65e:	1b9b      	subs	r3, r3, r6
 800a660:	60a3      	str	r3, [r4, #8]
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	4433      	add	r3, r6
 800a666:	6023      	str	r3, [r4, #0]
 800a668:	2000      	movs	r0, #0
 800a66a:	e7db      	b.n	800a624 <__ssputs_r+0x58>
 800a66c:	462a      	mov	r2, r5
 800a66e:	f000 fba5 	bl	800adbc <_realloc_r>
 800a672:	4606      	mov	r6, r0
 800a674:	2800      	cmp	r0, #0
 800a676:	d1e1      	bne.n	800a63c <__ssputs_r+0x70>
 800a678:	6921      	ldr	r1, [r4, #16]
 800a67a:	4650      	mov	r0, sl
 800a67c:	f000 fabe 	bl	800abfc <_free_r>
 800a680:	e7c7      	b.n	800a612 <__ssputs_r+0x46>
	...

0800a684 <_svfiprintf_r>:
 800a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a688:	4698      	mov	r8, r3
 800a68a:	898b      	ldrh	r3, [r1, #12]
 800a68c:	061b      	lsls	r3, r3, #24
 800a68e:	b09d      	sub	sp, #116	; 0x74
 800a690:	4607      	mov	r7, r0
 800a692:	460d      	mov	r5, r1
 800a694:	4614      	mov	r4, r2
 800a696:	d50e      	bpl.n	800a6b6 <_svfiprintf_r+0x32>
 800a698:	690b      	ldr	r3, [r1, #16]
 800a69a:	b963      	cbnz	r3, 800a6b6 <_svfiprintf_r+0x32>
 800a69c:	2140      	movs	r1, #64	; 0x40
 800a69e:	f000 fb19 	bl	800acd4 <_malloc_r>
 800a6a2:	6028      	str	r0, [r5, #0]
 800a6a4:	6128      	str	r0, [r5, #16]
 800a6a6:	b920      	cbnz	r0, 800a6b2 <_svfiprintf_r+0x2e>
 800a6a8:	230c      	movs	r3, #12
 800a6aa:	603b      	str	r3, [r7, #0]
 800a6ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6b0:	e0d1      	b.n	800a856 <_svfiprintf_r+0x1d2>
 800a6b2:	2340      	movs	r3, #64	; 0x40
 800a6b4:	616b      	str	r3, [r5, #20]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ba:	2320      	movs	r3, #32
 800a6bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6c4:	2330      	movs	r3, #48	; 0x30
 800a6c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a870 <_svfiprintf_r+0x1ec>
 800a6ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6ce:	f04f 0901 	mov.w	r9, #1
 800a6d2:	4623      	mov	r3, r4
 800a6d4:	469a      	mov	sl, r3
 800a6d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6da:	b10a      	cbz	r2, 800a6e0 <_svfiprintf_r+0x5c>
 800a6dc:	2a25      	cmp	r2, #37	; 0x25
 800a6de:	d1f9      	bne.n	800a6d4 <_svfiprintf_r+0x50>
 800a6e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a6e4:	d00b      	beq.n	800a6fe <_svfiprintf_r+0x7a>
 800a6e6:	465b      	mov	r3, fp
 800a6e8:	4622      	mov	r2, r4
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	4638      	mov	r0, r7
 800a6ee:	f7ff ff6d 	bl	800a5cc <__ssputs_r>
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	f000 80aa 	beq.w	800a84c <_svfiprintf_r+0x1c8>
 800a6f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6fa:	445a      	add	r2, fp
 800a6fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a6fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80a2 	beq.w	800a84c <_svfiprintf_r+0x1c8>
 800a708:	2300      	movs	r3, #0
 800a70a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a70e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a712:	f10a 0a01 	add.w	sl, sl, #1
 800a716:	9304      	str	r3, [sp, #16]
 800a718:	9307      	str	r3, [sp, #28]
 800a71a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a71e:	931a      	str	r3, [sp, #104]	; 0x68
 800a720:	4654      	mov	r4, sl
 800a722:	2205      	movs	r2, #5
 800a724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a728:	4851      	ldr	r0, [pc, #324]	; (800a870 <_svfiprintf_r+0x1ec>)
 800a72a:	f7f5 fd69 	bl	8000200 <memchr>
 800a72e:	9a04      	ldr	r2, [sp, #16]
 800a730:	b9d8      	cbnz	r0, 800a76a <_svfiprintf_r+0xe6>
 800a732:	06d0      	lsls	r0, r2, #27
 800a734:	bf44      	itt	mi
 800a736:	2320      	movmi	r3, #32
 800a738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a73c:	0711      	lsls	r1, r2, #28
 800a73e:	bf44      	itt	mi
 800a740:	232b      	movmi	r3, #43	; 0x2b
 800a742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a746:	f89a 3000 	ldrb.w	r3, [sl]
 800a74a:	2b2a      	cmp	r3, #42	; 0x2a
 800a74c:	d015      	beq.n	800a77a <_svfiprintf_r+0xf6>
 800a74e:	9a07      	ldr	r2, [sp, #28]
 800a750:	4654      	mov	r4, sl
 800a752:	2000      	movs	r0, #0
 800a754:	f04f 0c0a 	mov.w	ip, #10
 800a758:	4621      	mov	r1, r4
 800a75a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a75e:	3b30      	subs	r3, #48	; 0x30
 800a760:	2b09      	cmp	r3, #9
 800a762:	d94e      	bls.n	800a802 <_svfiprintf_r+0x17e>
 800a764:	b1b0      	cbz	r0, 800a794 <_svfiprintf_r+0x110>
 800a766:	9207      	str	r2, [sp, #28]
 800a768:	e014      	b.n	800a794 <_svfiprintf_r+0x110>
 800a76a:	eba0 0308 	sub.w	r3, r0, r8
 800a76e:	fa09 f303 	lsl.w	r3, r9, r3
 800a772:	4313      	orrs	r3, r2
 800a774:	9304      	str	r3, [sp, #16]
 800a776:	46a2      	mov	sl, r4
 800a778:	e7d2      	b.n	800a720 <_svfiprintf_r+0x9c>
 800a77a:	9b03      	ldr	r3, [sp, #12]
 800a77c:	1d19      	adds	r1, r3, #4
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	9103      	str	r1, [sp, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	bfbb      	ittet	lt
 800a786:	425b      	neglt	r3, r3
 800a788:	f042 0202 	orrlt.w	r2, r2, #2
 800a78c:	9307      	strge	r3, [sp, #28]
 800a78e:	9307      	strlt	r3, [sp, #28]
 800a790:	bfb8      	it	lt
 800a792:	9204      	strlt	r2, [sp, #16]
 800a794:	7823      	ldrb	r3, [r4, #0]
 800a796:	2b2e      	cmp	r3, #46	; 0x2e
 800a798:	d10c      	bne.n	800a7b4 <_svfiprintf_r+0x130>
 800a79a:	7863      	ldrb	r3, [r4, #1]
 800a79c:	2b2a      	cmp	r3, #42	; 0x2a
 800a79e:	d135      	bne.n	800a80c <_svfiprintf_r+0x188>
 800a7a0:	9b03      	ldr	r3, [sp, #12]
 800a7a2:	1d1a      	adds	r2, r3, #4
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	9203      	str	r2, [sp, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	bfb8      	it	lt
 800a7ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a7b0:	3402      	adds	r4, #2
 800a7b2:	9305      	str	r3, [sp, #20]
 800a7b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a880 <_svfiprintf_r+0x1fc>
 800a7b8:	7821      	ldrb	r1, [r4, #0]
 800a7ba:	2203      	movs	r2, #3
 800a7bc:	4650      	mov	r0, sl
 800a7be:	f7f5 fd1f 	bl	8000200 <memchr>
 800a7c2:	b140      	cbz	r0, 800a7d6 <_svfiprintf_r+0x152>
 800a7c4:	2340      	movs	r3, #64	; 0x40
 800a7c6:	eba0 000a 	sub.w	r0, r0, sl
 800a7ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a7ce:	9b04      	ldr	r3, [sp, #16]
 800a7d0:	4303      	orrs	r3, r0
 800a7d2:	3401      	adds	r4, #1
 800a7d4:	9304      	str	r3, [sp, #16]
 800a7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7da:	4826      	ldr	r0, [pc, #152]	; (800a874 <_svfiprintf_r+0x1f0>)
 800a7dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7e0:	2206      	movs	r2, #6
 800a7e2:	f7f5 fd0d 	bl	8000200 <memchr>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d038      	beq.n	800a85c <_svfiprintf_r+0x1d8>
 800a7ea:	4b23      	ldr	r3, [pc, #140]	; (800a878 <_svfiprintf_r+0x1f4>)
 800a7ec:	bb1b      	cbnz	r3, 800a836 <_svfiprintf_r+0x1b2>
 800a7ee:	9b03      	ldr	r3, [sp, #12]
 800a7f0:	3307      	adds	r3, #7
 800a7f2:	f023 0307 	bic.w	r3, r3, #7
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	9303      	str	r3, [sp, #12]
 800a7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7fc:	4433      	add	r3, r6
 800a7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a800:	e767      	b.n	800a6d2 <_svfiprintf_r+0x4e>
 800a802:	fb0c 3202 	mla	r2, ip, r2, r3
 800a806:	460c      	mov	r4, r1
 800a808:	2001      	movs	r0, #1
 800a80a:	e7a5      	b.n	800a758 <_svfiprintf_r+0xd4>
 800a80c:	2300      	movs	r3, #0
 800a80e:	3401      	adds	r4, #1
 800a810:	9305      	str	r3, [sp, #20]
 800a812:	4619      	mov	r1, r3
 800a814:	f04f 0c0a 	mov.w	ip, #10
 800a818:	4620      	mov	r0, r4
 800a81a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a81e:	3a30      	subs	r2, #48	; 0x30
 800a820:	2a09      	cmp	r2, #9
 800a822:	d903      	bls.n	800a82c <_svfiprintf_r+0x1a8>
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0c5      	beq.n	800a7b4 <_svfiprintf_r+0x130>
 800a828:	9105      	str	r1, [sp, #20]
 800a82a:	e7c3      	b.n	800a7b4 <_svfiprintf_r+0x130>
 800a82c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a830:	4604      	mov	r4, r0
 800a832:	2301      	movs	r3, #1
 800a834:	e7f0      	b.n	800a818 <_svfiprintf_r+0x194>
 800a836:	ab03      	add	r3, sp, #12
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	462a      	mov	r2, r5
 800a83c:	4b0f      	ldr	r3, [pc, #60]	; (800a87c <_svfiprintf_r+0x1f8>)
 800a83e:	a904      	add	r1, sp, #16
 800a840:	4638      	mov	r0, r7
 800a842:	f3af 8000 	nop.w
 800a846:	1c42      	adds	r2, r0, #1
 800a848:	4606      	mov	r6, r0
 800a84a:	d1d6      	bne.n	800a7fa <_svfiprintf_r+0x176>
 800a84c:	89ab      	ldrh	r3, [r5, #12]
 800a84e:	065b      	lsls	r3, r3, #25
 800a850:	f53f af2c 	bmi.w	800a6ac <_svfiprintf_r+0x28>
 800a854:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a856:	b01d      	add	sp, #116	; 0x74
 800a858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85c:	ab03      	add	r3, sp, #12
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	462a      	mov	r2, r5
 800a862:	4b06      	ldr	r3, [pc, #24]	; (800a87c <_svfiprintf_r+0x1f8>)
 800a864:	a904      	add	r1, sp, #16
 800a866:	4638      	mov	r0, r7
 800a868:	f000 f87a 	bl	800a960 <_printf_i>
 800a86c:	e7eb      	b.n	800a846 <_svfiprintf_r+0x1c2>
 800a86e:	bf00      	nop
 800a870:	0800af18 	.word	0x0800af18
 800a874:	0800af22 	.word	0x0800af22
 800a878:	00000000 	.word	0x00000000
 800a87c:	0800a5cd 	.word	0x0800a5cd
 800a880:	0800af1e 	.word	0x0800af1e

0800a884 <_printf_common>:
 800a884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a888:	4616      	mov	r6, r2
 800a88a:	4699      	mov	r9, r3
 800a88c:	688a      	ldr	r2, [r1, #8]
 800a88e:	690b      	ldr	r3, [r1, #16]
 800a890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a894:	4293      	cmp	r3, r2
 800a896:	bfb8      	it	lt
 800a898:	4613      	movlt	r3, r2
 800a89a:	6033      	str	r3, [r6, #0]
 800a89c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8a0:	4607      	mov	r7, r0
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	b10a      	cbz	r2, 800a8aa <_printf_common+0x26>
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	6033      	str	r3, [r6, #0]
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	0699      	lsls	r1, r3, #26
 800a8ae:	bf42      	ittt	mi
 800a8b0:	6833      	ldrmi	r3, [r6, #0]
 800a8b2:	3302      	addmi	r3, #2
 800a8b4:	6033      	strmi	r3, [r6, #0]
 800a8b6:	6825      	ldr	r5, [r4, #0]
 800a8b8:	f015 0506 	ands.w	r5, r5, #6
 800a8bc:	d106      	bne.n	800a8cc <_printf_common+0x48>
 800a8be:	f104 0a19 	add.w	sl, r4, #25
 800a8c2:	68e3      	ldr	r3, [r4, #12]
 800a8c4:	6832      	ldr	r2, [r6, #0]
 800a8c6:	1a9b      	subs	r3, r3, r2
 800a8c8:	42ab      	cmp	r3, r5
 800a8ca:	dc26      	bgt.n	800a91a <_printf_common+0x96>
 800a8cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8d0:	1e13      	subs	r3, r2, #0
 800a8d2:	6822      	ldr	r2, [r4, #0]
 800a8d4:	bf18      	it	ne
 800a8d6:	2301      	movne	r3, #1
 800a8d8:	0692      	lsls	r2, r2, #26
 800a8da:	d42b      	bmi.n	800a934 <_printf_common+0xb0>
 800a8dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	4638      	mov	r0, r7
 800a8e4:	47c0      	blx	r8
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	d01e      	beq.n	800a928 <_printf_common+0xa4>
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	68e5      	ldr	r5, [r4, #12]
 800a8ee:	6832      	ldr	r2, [r6, #0]
 800a8f0:	f003 0306 	and.w	r3, r3, #6
 800a8f4:	2b04      	cmp	r3, #4
 800a8f6:	bf08      	it	eq
 800a8f8:	1aad      	subeq	r5, r5, r2
 800a8fa:	68a3      	ldr	r3, [r4, #8]
 800a8fc:	6922      	ldr	r2, [r4, #16]
 800a8fe:	bf0c      	ite	eq
 800a900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a904:	2500      	movne	r5, #0
 800a906:	4293      	cmp	r3, r2
 800a908:	bfc4      	itt	gt
 800a90a:	1a9b      	subgt	r3, r3, r2
 800a90c:	18ed      	addgt	r5, r5, r3
 800a90e:	2600      	movs	r6, #0
 800a910:	341a      	adds	r4, #26
 800a912:	42b5      	cmp	r5, r6
 800a914:	d11a      	bne.n	800a94c <_printf_common+0xc8>
 800a916:	2000      	movs	r0, #0
 800a918:	e008      	b.n	800a92c <_printf_common+0xa8>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4652      	mov	r2, sl
 800a91e:	4649      	mov	r1, r9
 800a920:	4638      	mov	r0, r7
 800a922:	47c0      	blx	r8
 800a924:	3001      	adds	r0, #1
 800a926:	d103      	bne.n	800a930 <_printf_common+0xac>
 800a928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a930:	3501      	adds	r5, #1
 800a932:	e7c6      	b.n	800a8c2 <_printf_common+0x3e>
 800a934:	18e1      	adds	r1, r4, r3
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	2030      	movs	r0, #48	; 0x30
 800a93a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a93e:	4422      	add	r2, r4
 800a940:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a944:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a948:	3302      	adds	r3, #2
 800a94a:	e7c7      	b.n	800a8dc <_printf_common+0x58>
 800a94c:	2301      	movs	r3, #1
 800a94e:	4622      	mov	r2, r4
 800a950:	4649      	mov	r1, r9
 800a952:	4638      	mov	r0, r7
 800a954:	47c0      	blx	r8
 800a956:	3001      	adds	r0, #1
 800a958:	d0e6      	beq.n	800a928 <_printf_common+0xa4>
 800a95a:	3601      	adds	r6, #1
 800a95c:	e7d9      	b.n	800a912 <_printf_common+0x8e>
	...

0800a960 <_printf_i>:
 800a960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a964:	7e0f      	ldrb	r7, [r1, #24]
 800a966:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a968:	2f78      	cmp	r7, #120	; 0x78
 800a96a:	4691      	mov	r9, r2
 800a96c:	4680      	mov	r8, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	469a      	mov	sl, r3
 800a972:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a976:	d807      	bhi.n	800a988 <_printf_i+0x28>
 800a978:	2f62      	cmp	r7, #98	; 0x62
 800a97a:	d80a      	bhi.n	800a992 <_printf_i+0x32>
 800a97c:	2f00      	cmp	r7, #0
 800a97e:	f000 80d8 	beq.w	800ab32 <_printf_i+0x1d2>
 800a982:	2f58      	cmp	r7, #88	; 0x58
 800a984:	f000 80a3 	beq.w	800aace <_printf_i+0x16e>
 800a988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a98c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a990:	e03a      	b.n	800aa08 <_printf_i+0xa8>
 800a992:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a996:	2b15      	cmp	r3, #21
 800a998:	d8f6      	bhi.n	800a988 <_printf_i+0x28>
 800a99a:	a101      	add	r1, pc, #4	; (adr r1, 800a9a0 <_printf_i+0x40>)
 800a99c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9a0:	0800a9f9 	.word	0x0800a9f9
 800a9a4:	0800aa0d 	.word	0x0800aa0d
 800a9a8:	0800a989 	.word	0x0800a989
 800a9ac:	0800a989 	.word	0x0800a989
 800a9b0:	0800a989 	.word	0x0800a989
 800a9b4:	0800a989 	.word	0x0800a989
 800a9b8:	0800aa0d 	.word	0x0800aa0d
 800a9bc:	0800a989 	.word	0x0800a989
 800a9c0:	0800a989 	.word	0x0800a989
 800a9c4:	0800a989 	.word	0x0800a989
 800a9c8:	0800a989 	.word	0x0800a989
 800a9cc:	0800ab19 	.word	0x0800ab19
 800a9d0:	0800aa3d 	.word	0x0800aa3d
 800a9d4:	0800aafb 	.word	0x0800aafb
 800a9d8:	0800a989 	.word	0x0800a989
 800a9dc:	0800a989 	.word	0x0800a989
 800a9e0:	0800ab3b 	.word	0x0800ab3b
 800a9e4:	0800a989 	.word	0x0800a989
 800a9e8:	0800aa3d 	.word	0x0800aa3d
 800a9ec:	0800a989 	.word	0x0800a989
 800a9f0:	0800a989 	.word	0x0800a989
 800a9f4:	0800ab03 	.word	0x0800ab03
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	1d1a      	adds	r2, r3, #4
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	602a      	str	r2, [r5, #0]
 800aa00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e0a3      	b.n	800ab54 <_printf_i+0x1f4>
 800aa0c:	6820      	ldr	r0, [r4, #0]
 800aa0e:	6829      	ldr	r1, [r5, #0]
 800aa10:	0606      	lsls	r6, r0, #24
 800aa12:	f101 0304 	add.w	r3, r1, #4
 800aa16:	d50a      	bpl.n	800aa2e <_printf_i+0xce>
 800aa18:	680e      	ldr	r6, [r1, #0]
 800aa1a:	602b      	str	r3, [r5, #0]
 800aa1c:	2e00      	cmp	r6, #0
 800aa1e:	da03      	bge.n	800aa28 <_printf_i+0xc8>
 800aa20:	232d      	movs	r3, #45	; 0x2d
 800aa22:	4276      	negs	r6, r6
 800aa24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa28:	485e      	ldr	r0, [pc, #376]	; (800aba4 <_printf_i+0x244>)
 800aa2a:	230a      	movs	r3, #10
 800aa2c:	e019      	b.n	800aa62 <_printf_i+0x102>
 800aa2e:	680e      	ldr	r6, [r1, #0]
 800aa30:	602b      	str	r3, [r5, #0]
 800aa32:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa36:	bf18      	it	ne
 800aa38:	b236      	sxthne	r6, r6
 800aa3a:	e7ef      	b.n	800aa1c <_printf_i+0xbc>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	6820      	ldr	r0, [r4, #0]
 800aa40:	1d19      	adds	r1, r3, #4
 800aa42:	6029      	str	r1, [r5, #0]
 800aa44:	0601      	lsls	r1, r0, #24
 800aa46:	d501      	bpl.n	800aa4c <_printf_i+0xec>
 800aa48:	681e      	ldr	r6, [r3, #0]
 800aa4a:	e002      	b.n	800aa52 <_printf_i+0xf2>
 800aa4c:	0646      	lsls	r6, r0, #25
 800aa4e:	d5fb      	bpl.n	800aa48 <_printf_i+0xe8>
 800aa50:	881e      	ldrh	r6, [r3, #0]
 800aa52:	4854      	ldr	r0, [pc, #336]	; (800aba4 <_printf_i+0x244>)
 800aa54:	2f6f      	cmp	r7, #111	; 0x6f
 800aa56:	bf0c      	ite	eq
 800aa58:	2308      	moveq	r3, #8
 800aa5a:	230a      	movne	r3, #10
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa62:	6865      	ldr	r5, [r4, #4]
 800aa64:	60a5      	str	r5, [r4, #8]
 800aa66:	2d00      	cmp	r5, #0
 800aa68:	bfa2      	ittt	ge
 800aa6a:	6821      	ldrge	r1, [r4, #0]
 800aa6c:	f021 0104 	bicge.w	r1, r1, #4
 800aa70:	6021      	strge	r1, [r4, #0]
 800aa72:	b90e      	cbnz	r6, 800aa78 <_printf_i+0x118>
 800aa74:	2d00      	cmp	r5, #0
 800aa76:	d04d      	beq.n	800ab14 <_printf_i+0x1b4>
 800aa78:	4615      	mov	r5, r2
 800aa7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa7e:	fb03 6711 	mls	r7, r3, r1, r6
 800aa82:	5dc7      	ldrb	r7, [r0, r7]
 800aa84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa88:	4637      	mov	r7, r6
 800aa8a:	42bb      	cmp	r3, r7
 800aa8c:	460e      	mov	r6, r1
 800aa8e:	d9f4      	bls.n	800aa7a <_printf_i+0x11a>
 800aa90:	2b08      	cmp	r3, #8
 800aa92:	d10b      	bne.n	800aaac <_printf_i+0x14c>
 800aa94:	6823      	ldr	r3, [r4, #0]
 800aa96:	07de      	lsls	r6, r3, #31
 800aa98:	d508      	bpl.n	800aaac <_printf_i+0x14c>
 800aa9a:	6923      	ldr	r3, [r4, #16]
 800aa9c:	6861      	ldr	r1, [r4, #4]
 800aa9e:	4299      	cmp	r1, r3
 800aaa0:	bfde      	ittt	le
 800aaa2:	2330      	movle	r3, #48	; 0x30
 800aaa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aaa8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aaac:	1b52      	subs	r2, r2, r5
 800aaae:	6122      	str	r2, [r4, #16]
 800aab0:	f8cd a000 	str.w	sl, [sp]
 800aab4:	464b      	mov	r3, r9
 800aab6:	aa03      	add	r2, sp, #12
 800aab8:	4621      	mov	r1, r4
 800aaba:	4640      	mov	r0, r8
 800aabc:	f7ff fee2 	bl	800a884 <_printf_common>
 800aac0:	3001      	adds	r0, #1
 800aac2:	d14c      	bne.n	800ab5e <_printf_i+0x1fe>
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aac8:	b004      	add	sp, #16
 800aaca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aace:	4835      	ldr	r0, [pc, #212]	; (800aba4 <_printf_i+0x244>)
 800aad0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aad4:	6829      	ldr	r1, [r5, #0]
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	f851 6b04 	ldr.w	r6, [r1], #4
 800aadc:	6029      	str	r1, [r5, #0]
 800aade:	061d      	lsls	r5, r3, #24
 800aae0:	d514      	bpl.n	800ab0c <_printf_i+0x1ac>
 800aae2:	07df      	lsls	r7, r3, #31
 800aae4:	bf44      	itt	mi
 800aae6:	f043 0320 	orrmi.w	r3, r3, #32
 800aaea:	6023      	strmi	r3, [r4, #0]
 800aaec:	b91e      	cbnz	r6, 800aaf6 <_printf_i+0x196>
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	f023 0320 	bic.w	r3, r3, #32
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	2310      	movs	r3, #16
 800aaf8:	e7b0      	b.n	800aa5c <_printf_i+0xfc>
 800aafa:	6823      	ldr	r3, [r4, #0]
 800aafc:	f043 0320 	orr.w	r3, r3, #32
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	2378      	movs	r3, #120	; 0x78
 800ab04:	4828      	ldr	r0, [pc, #160]	; (800aba8 <_printf_i+0x248>)
 800ab06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab0a:	e7e3      	b.n	800aad4 <_printf_i+0x174>
 800ab0c:	0659      	lsls	r1, r3, #25
 800ab0e:	bf48      	it	mi
 800ab10:	b2b6      	uxthmi	r6, r6
 800ab12:	e7e6      	b.n	800aae2 <_printf_i+0x182>
 800ab14:	4615      	mov	r5, r2
 800ab16:	e7bb      	b.n	800aa90 <_printf_i+0x130>
 800ab18:	682b      	ldr	r3, [r5, #0]
 800ab1a:	6826      	ldr	r6, [r4, #0]
 800ab1c:	6961      	ldr	r1, [r4, #20]
 800ab1e:	1d18      	adds	r0, r3, #4
 800ab20:	6028      	str	r0, [r5, #0]
 800ab22:	0635      	lsls	r5, r6, #24
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	d501      	bpl.n	800ab2c <_printf_i+0x1cc>
 800ab28:	6019      	str	r1, [r3, #0]
 800ab2a:	e002      	b.n	800ab32 <_printf_i+0x1d2>
 800ab2c:	0670      	lsls	r0, r6, #25
 800ab2e:	d5fb      	bpl.n	800ab28 <_printf_i+0x1c8>
 800ab30:	8019      	strh	r1, [r3, #0]
 800ab32:	2300      	movs	r3, #0
 800ab34:	6123      	str	r3, [r4, #16]
 800ab36:	4615      	mov	r5, r2
 800ab38:	e7ba      	b.n	800aab0 <_printf_i+0x150>
 800ab3a:	682b      	ldr	r3, [r5, #0]
 800ab3c:	1d1a      	adds	r2, r3, #4
 800ab3e:	602a      	str	r2, [r5, #0]
 800ab40:	681d      	ldr	r5, [r3, #0]
 800ab42:	6862      	ldr	r2, [r4, #4]
 800ab44:	2100      	movs	r1, #0
 800ab46:	4628      	mov	r0, r5
 800ab48:	f7f5 fb5a 	bl	8000200 <memchr>
 800ab4c:	b108      	cbz	r0, 800ab52 <_printf_i+0x1f2>
 800ab4e:	1b40      	subs	r0, r0, r5
 800ab50:	6060      	str	r0, [r4, #4]
 800ab52:	6863      	ldr	r3, [r4, #4]
 800ab54:	6123      	str	r3, [r4, #16]
 800ab56:	2300      	movs	r3, #0
 800ab58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab5c:	e7a8      	b.n	800aab0 <_printf_i+0x150>
 800ab5e:	6923      	ldr	r3, [r4, #16]
 800ab60:	462a      	mov	r2, r5
 800ab62:	4649      	mov	r1, r9
 800ab64:	4640      	mov	r0, r8
 800ab66:	47d0      	blx	sl
 800ab68:	3001      	adds	r0, #1
 800ab6a:	d0ab      	beq.n	800aac4 <_printf_i+0x164>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	079b      	lsls	r3, r3, #30
 800ab70:	d413      	bmi.n	800ab9a <_printf_i+0x23a>
 800ab72:	68e0      	ldr	r0, [r4, #12]
 800ab74:	9b03      	ldr	r3, [sp, #12]
 800ab76:	4298      	cmp	r0, r3
 800ab78:	bfb8      	it	lt
 800ab7a:	4618      	movlt	r0, r3
 800ab7c:	e7a4      	b.n	800aac8 <_printf_i+0x168>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	4632      	mov	r2, r6
 800ab82:	4649      	mov	r1, r9
 800ab84:	4640      	mov	r0, r8
 800ab86:	47d0      	blx	sl
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d09b      	beq.n	800aac4 <_printf_i+0x164>
 800ab8c:	3501      	adds	r5, #1
 800ab8e:	68e3      	ldr	r3, [r4, #12]
 800ab90:	9903      	ldr	r1, [sp, #12]
 800ab92:	1a5b      	subs	r3, r3, r1
 800ab94:	42ab      	cmp	r3, r5
 800ab96:	dcf2      	bgt.n	800ab7e <_printf_i+0x21e>
 800ab98:	e7eb      	b.n	800ab72 <_printf_i+0x212>
 800ab9a:	2500      	movs	r5, #0
 800ab9c:	f104 0619 	add.w	r6, r4, #25
 800aba0:	e7f5      	b.n	800ab8e <_printf_i+0x22e>
 800aba2:	bf00      	nop
 800aba4:	0800af29 	.word	0x0800af29
 800aba8:	0800af3a 	.word	0x0800af3a

0800abac <memcpy>:
 800abac:	440a      	add	r2, r1
 800abae:	4291      	cmp	r1, r2
 800abb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800abb4:	d100      	bne.n	800abb8 <memcpy+0xc>
 800abb6:	4770      	bx	lr
 800abb8:	b510      	push	{r4, lr}
 800abba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abc2:	4291      	cmp	r1, r2
 800abc4:	d1f9      	bne.n	800abba <memcpy+0xe>
 800abc6:	bd10      	pop	{r4, pc}

0800abc8 <memmove>:
 800abc8:	4288      	cmp	r0, r1
 800abca:	b510      	push	{r4, lr}
 800abcc:	eb01 0402 	add.w	r4, r1, r2
 800abd0:	d902      	bls.n	800abd8 <memmove+0x10>
 800abd2:	4284      	cmp	r4, r0
 800abd4:	4623      	mov	r3, r4
 800abd6:	d807      	bhi.n	800abe8 <memmove+0x20>
 800abd8:	1e43      	subs	r3, r0, #1
 800abda:	42a1      	cmp	r1, r4
 800abdc:	d008      	beq.n	800abf0 <memmove+0x28>
 800abde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abe6:	e7f8      	b.n	800abda <memmove+0x12>
 800abe8:	4402      	add	r2, r0
 800abea:	4601      	mov	r1, r0
 800abec:	428a      	cmp	r2, r1
 800abee:	d100      	bne.n	800abf2 <memmove+0x2a>
 800abf0:	bd10      	pop	{r4, pc}
 800abf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abfa:	e7f7      	b.n	800abec <memmove+0x24>

0800abfc <_free_r>:
 800abfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abfe:	2900      	cmp	r1, #0
 800ac00:	d044      	beq.n	800ac8c <_free_r+0x90>
 800ac02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac06:	9001      	str	r0, [sp, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac0e:	bfb8      	it	lt
 800ac10:	18e4      	addlt	r4, r4, r3
 800ac12:	f000 f913 	bl	800ae3c <__malloc_lock>
 800ac16:	4a1e      	ldr	r2, [pc, #120]	; (800ac90 <_free_r+0x94>)
 800ac18:	9801      	ldr	r0, [sp, #4]
 800ac1a:	6813      	ldr	r3, [r2, #0]
 800ac1c:	b933      	cbnz	r3, 800ac2c <_free_r+0x30>
 800ac1e:	6063      	str	r3, [r4, #4]
 800ac20:	6014      	str	r4, [r2, #0]
 800ac22:	b003      	add	sp, #12
 800ac24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac28:	f000 b90e 	b.w	800ae48 <__malloc_unlock>
 800ac2c:	42a3      	cmp	r3, r4
 800ac2e:	d908      	bls.n	800ac42 <_free_r+0x46>
 800ac30:	6825      	ldr	r5, [r4, #0]
 800ac32:	1961      	adds	r1, r4, r5
 800ac34:	428b      	cmp	r3, r1
 800ac36:	bf01      	itttt	eq
 800ac38:	6819      	ldreq	r1, [r3, #0]
 800ac3a:	685b      	ldreq	r3, [r3, #4]
 800ac3c:	1949      	addeq	r1, r1, r5
 800ac3e:	6021      	streq	r1, [r4, #0]
 800ac40:	e7ed      	b.n	800ac1e <_free_r+0x22>
 800ac42:	461a      	mov	r2, r3
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	b10b      	cbz	r3, 800ac4c <_free_r+0x50>
 800ac48:	42a3      	cmp	r3, r4
 800ac4a:	d9fa      	bls.n	800ac42 <_free_r+0x46>
 800ac4c:	6811      	ldr	r1, [r2, #0]
 800ac4e:	1855      	adds	r5, r2, r1
 800ac50:	42a5      	cmp	r5, r4
 800ac52:	d10b      	bne.n	800ac6c <_free_r+0x70>
 800ac54:	6824      	ldr	r4, [r4, #0]
 800ac56:	4421      	add	r1, r4
 800ac58:	1854      	adds	r4, r2, r1
 800ac5a:	42a3      	cmp	r3, r4
 800ac5c:	6011      	str	r1, [r2, #0]
 800ac5e:	d1e0      	bne.n	800ac22 <_free_r+0x26>
 800ac60:	681c      	ldr	r4, [r3, #0]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	6053      	str	r3, [r2, #4]
 800ac66:	4421      	add	r1, r4
 800ac68:	6011      	str	r1, [r2, #0]
 800ac6a:	e7da      	b.n	800ac22 <_free_r+0x26>
 800ac6c:	d902      	bls.n	800ac74 <_free_r+0x78>
 800ac6e:	230c      	movs	r3, #12
 800ac70:	6003      	str	r3, [r0, #0]
 800ac72:	e7d6      	b.n	800ac22 <_free_r+0x26>
 800ac74:	6825      	ldr	r5, [r4, #0]
 800ac76:	1961      	adds	r1, r4, r5
 800ac78:	428b      	cmp	r3, r1
 800ac7a:	bf04      	itt	eq
 800ac7c:	6819      	ldreq	r1, [r3, #0]
 800ac7e:	685b      	ldreq	r3, [r3, #4]
 800ac80:	6063      	str	r3, [r4, #4]
 800ac82:	bf04      	itt	eq
 800ac84:	1949      	addeq	r1, r1, r5
 800ac86:	6021      	streq	r1, [r4, #0]
 800ac88:	6054      	str	r4, [r2, #4]
 800ac8a:	e7ca      	b.n	800ac22 <_free_r+0x26>
 800ac8c:	b003      	add	sp, #12
 800ac8e:	bd30      	pop	{r4, r5, pc}
 800ac90:	20002078 	.word	0x20002078

0800ac94 <sbrk_aligned>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	4e0e      	ldr	r6, [pc, #56]	; (800acd0 <sbrk_aligned+0x3c>)
 800ac98:	460c      	mov	r4, r1
 800ac9a:	6831      	ldr	r1, [r6, #0]
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	b911      	cbnz	r1, 800aca6 <sbrk_aligned+0x12>
 800aca0:	f000 f8bc 	bl	800ae1c <_sbrk_r>
 800aca4:	6030      	str	r0, [r6, #0]
 800aca6:	4621      	mov	r1, r4
 800aca8:	4628      	mov	r0, r5
 800acaa:	f000 f8b7 	bl	800ae1c <_sbrk_r>
 800acae:	1c43      	adds	r3, r0, #1
 800acb0:	d00a      	beq.n	800acc8 <sbrk_aligned+0x34>
 800acb2:	1cc4      	adds	r4, r0, #3
 800acb4:	f024 0403 	bic.w	r4, r4, #3
 800acb8:	42a0      	cmp	r0, r4
 800acba:	d007      	beq.n	800accc <sbrk_aligned+0x38>
 800acbc:	1a21      	subs	r1, r4, r0
 800acbe:	4628      	mov	r0, r5
 800acc0:	f000 f8ac 	bl	800ae1c <_sbrk_r>
 800acc4:	3001      	adds	r0, #1
 800acc6:	d101      	bne.n	800accc <sbrk_aligned+0x38>
 800acc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800accc:	4620      	mov	r0, r4
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	2000207c 	.word	0x2000207c

0800acd4 <_malloc_r>:
 800acd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd8:	1ccd      	adds	r5, r1, #3
 800acda:	f025 0503 	bic.w	r5, r5, #3
 800acde:	3508      	adds	r5, #8
 800ace0:	2d0c      	cmp	r5, #12
 800ace2:	bf38      	it	cc
 800ace4:	250c      	movcc	r5, #12
 800ace6:	2d00      	cmp	r5, #0
 800ace8:	4607      	mov	r7, r0
 800acea:	db01      	blt.n	800acf0 <_malloc_r+0x1c>
 800acec:	42a9      	cmp	r1, r5
 800acee:	d905      	bls.n	800acfc <_malloc_r+0x28>
 800acf0:	230c      	movs	r3, #12
 800acf2:	603b      	str	r3, [r7, #0]
 800acf4:	2600      	movs	r6, #0
 800acf6:	4630      	mov	r0, r6
 800acf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acfc:	4e2e      	ldr	r6, [pc, #184]	; (800adb8 <_malloc_r+0xe4>)
 800acfe:	f000 f89d 	bl	800ae3c <__malloc_lock>
 800ad02:	6833      	ldr	r3, [r6, #0]
 800ad04:	461c      	mov	r4, r3
 800ad06:	bb34      	cbnz	r4, 800ad56 <_malloc_r+0x82>
 800ad08:	4629      	mov	r1, r5
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	f7ff ffc2 	bl	800ac94 <sbrk_aligned>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	4604      	mov	r4, r0
 800ad14:	d14d      	bne.n	800adb2 <_malloc_r+0xde>
 800ad16:	6834      	ldr	r4, [r6, #0]
 800ad18:	4626      	mov	r6, r4
 800ad1a:	2e00      	cmp	r6, #0
 800ad1c:	d140      	bne.n	800ada0 <_malloc_r+0xcc>
 800ad1e:	6823      	ldr	r3, [r4, #0]
 800ad20:	4631      	mov	r1, r6
 800ad22:	4638      	mov	r0, r7
 800ad24:	eb04 0803 	add.w	r8, r4, r3
 800ad28:	f000 f878 	bl	800ae1c <_sbrk_r>
 800ad2c:	4580      	cmp	r8, r0
 800ad2e:	d13a      	bne.n	800ada6 <_malloc_r+0xd2>
 800ad30:	6821      	ldr	r1, [r4, #0]
 800ad32:	3503      	adds	r5, #3
 800ad34:	1a6d      	subs	r5, r5, r1
 800ad36:	f025 0503 	bic.w	r5, r5, #3
 800ad3a:	3508      	adds	r5, #8
 800ad3c:	2d0c      	cmp	r5, #12
 800ad3e:	bf38      	it	cc
 800ad40:	250c      	movcc	r5, #12
 800ad42:	4629      	mov	r1, r5
 800ad44:	4638      	mov	r0, r7
 800ad46:	f7ff ffa5 	bl	800ac94 <sbrk_aligned>
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	d02b      	beq.n	800ada6 <_malloc_r+0xd2>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	442b      	add	r3, r5
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	e00e      	b.n	800ad74 <_malloc_r+0xa0>
 800ad56:	6822      	ldr	r2, [r4, #0]
 800ad58:	1b52      	subs	r2, r2, r5
 800ad5a:	d41e      	bmi.n	800ad9a <_malloc_r+0xc6>
 800ad5c:	2a0b      	cmp	r2, #11
 800ad5e:	d916      	bls.n	800ad8e <_malloc_r+0xba>
 800ad60:	1961      	adds	r1, r4, r5
 800ad62:	42a3      	cmp	r3, r4
 800ad64:	6025      	str	r5, [r4, #0]
 800ad66:	bf18      	it	ne
 800ad68:	6059      	strne	r1, [r3, #4]
 800ad6a:	6863      	ldr	r3, [r4, #4]
 800ad6c:	bf08      	it	eq
 800ad6e:	6031      	streq	r1, [r6, #0]
 800ad70:	5162      	str	r2, [r4, r5]
 800ad72:	604b      	str	r3, [r1, #4]
 800ad74:	4638      	mov	r0, r7
 800ad76:	f104 060b 	add.w	r6, r4, #11
 800ad7a:	f000 f865 	bl	800ae48 <__malloc_unlock>
 800ad7e:	f026 0607 	bic.w	r6, r6, #7
 800ad82:	1d23      	adds	r3, r4, #4
 800ad84:	1af2      	subs	r2, r6, r3
 800ad86:	d0b6      	beq.n	800acf6 <_malloc_r+0x22>
 800ad88:	1b9b      	subs	r3, r3, r6
 800ad8a:	50a3      	str	r3, [r4, r2]
 800ad8c:	e7b3      	b.n	800acf6 <_malloc_r+0x22>
 800ad8e:	6862      	ldr	r2, [r4, #4]
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	bf0c      	ite	eq
 800ad94:	6032      	streq	r2, [r6, #0]
 800ad96:	605a      	strne	r2, [r3, #4]
 800ad98:	e7ec      	b.n	800ad74 <_malloc_r+0xa0>
 800ad9a:	4623      	mov	r3, r4
 800ad9c:	6864      	ldr	r4, [r4, #4]
 800ad9e:	e7b2      	b.n	800ad06 <_malloc_r+0x32>
 800ada0:	4634      	mov	r4, r6
 800ada2:	6876      	ldr	r6, [r6, #4]
 800ada4:	e7b9      	b.n	800ad1a <_malloc_r+0x46>
 800ada6:	230c      	movs	r3, #12
 800ada8:	603b      	str	r3, [r7, #0]
 800adaa:	4638      	mov	r0, r7
 800adac:	f000 f84c 	bl	800ae48 <__malloc_unlock>
 800adb0:	e7a1      	b.n	800acf6 <_malloc_r+0x22>
 800adb2:	6025      	str	r5, [r4, #0]
 800adb4:	e7de      	b.n	800ad74 <_malloc_r+0xa0>
 800adb6:	bf00      	nop
 800adb8:	20002078 	.word	0x20002078

0800adbc <_realloc_r>:
 800adbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc0:	4680      	mov	r8, r0
 800adc2:	4614      	mov	r4, r2
 800adc4:	460e      	mov	r6, r1
 800adc6:	b921      	cbnz	r1, 800add2 <_realloc_r+0x16>
 800adc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adcc:	4611      	mov	r1, r2
 800adce:	f7ff bf81 	b.w	800acd4 <_malloc_r>
 800add2:	b92a      	cbnz	r2, 800ade0 <_realloc_r+0x24>
 800add4:	f7ff ff12 	bl	800abfc <_free_r>
 800add8:	4625      	mov	r5, r4
 800adda:	4628      	mov	r0, r5
 800addc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade0:	f000 f838 	bl	800ae54 <_malloc_usable_size_r>
 800ade4:	4284      	cmp	r4, r0
 800ade6:	4607      	mov	r7, r0
 800ade8:	d802      	bhi.n	800adf0 <_realloc_r+0x34>
 800adea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adee:	d812      	bhi.n	800ae16 <_realloc_r+0x5a>
 800adf0:	4621      	mov	r1, r4
 800adf2:	4640      	mov	r0, r8
 800adf4:	f7ff ff6e 	bl	800acd4 <_malloc_r>
 800adf8:	4605      	mov	r5, r0
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d0ed      	beq.n	800adda <_realloc_r+0x1e>
 800adfe:	42bc      	cmp	r4, r7
 800ae00:	4622      	mov	r2, r4
 800ae02:	4631      	mov	r1, r6
 800ae04:	bf28      	it	cs
 800ae06:	463a      	movcs	r2, r7
 800ae08:	f7ff fed0 	bl	800abac <memcpy>
 800ae0c:	4631      	mov	r1, r6
 800ae0e:	4640      	mov	r0, r8
 800ae10:	f7ff fef4 	bl	800abfc <_free_r>
 800ae14:	e7e1      	b.n	800adda <_realloc_r+0x1e>
 800ae16:	4635      	mov	r5, r6
 800ae18:	e7df      	b.n	800adda <_realloc_r+0x1e>
	...

0800ae1c <_sbrk_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	4d06      	ldr	r5, [pc, #24]	; (800ae38 <_sbrk_r+0x1c>)
 800ae20:	2300      	movs	r3, #0
 800ae22:	4604      	mov	r4, r0
 800ae24:	4608      	mov	r0, r1
 800ae26:	602b      	str	r3, [r5, #0]
 800ae28:	f7f6 f8a0 	bl	8000f6c <_sbrk>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	d102      	bne.n	800ae36 <_sbrk_r+0x1a>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	b103      	cbz	r3, 800ae36 <_sbrk_r+0x1a>
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	20002080 	.word	0x20002080

0800ae3c <__malloc_lock>:
 800ae3c:	4801      	ldr	r0, [pc, #4]	; (800ae44 <__malloc_lock+0x8>)
 800ae3e:	f000 b811 	b.w	800ae64 <__retarget_lock_acquire_recursive>
 800ae42:	bf00      	nop
 800ae44:	20002084 	.word	0x20002084

0800ae48 <__malloc_unlock>:
 800ae48:	4801      	ldr	r0, [pc, #4]	; (800ae50 <__malloc_unlock+0x8>)
 800ae4a:	f000 b80c 	b.w	800ae66 <__retarget_lock_release_recursive>
 800ae4e:	bf00      	nop
 800ae50:	20002084 	.word	0x20002084

0800ae54 <_malloc_usable_size_r>:
 800ae54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae58:	1f18      	subs	r0, r3, #4
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	bfbc      	itt	lt
 800ae5e:	580b      	ldrlt	r3, [r1, r0]
 800ae60:	18c0      	addlt	r0, r0, r3
 800ae62:	4770      	bx	lr

0800ae64 <__retarget_lock_acquire_recursive>:
 800ae64:	4770      	bx	lr

0800ae66 <__retarget_lock_release_recursive>:
 800ae66:	4770      	bx	lr

0800ae68 <_init>:
 800ae68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6a:	bf00      	nop
 800ae6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae6e:	bc08      	pop	{r3}
 800ae70:	469e      	mov	lr, r3
 800ae72:	4770      	bx	lr

0800ae74 <_fini>:
 800ae74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae76:	bf00      	nop
 800ae78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7a:	bc08      	pop	{r3}
 800ae7c:	469e      	mov	lr, r3
 800ae7e:	4770      	bx	lr
