
DisplayNucleo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007418  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000df5c  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015524  08015524  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08015524  08015524  00025524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801552c  0801552c  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801552c  0801552c  0002552c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015530  08015530  00025530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08015534  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  20000098  080155cc  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  080155cc  000306d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a71  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003077  00000000  00000000  00044b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00047bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00048d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b28b  00000000  00000000  00049d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001629f  00000000  00000000  00074fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcfcc  00000000  00000000  0008b24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188216  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e68  00000000  00000000  00188268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080075b0 	.word	0x080075b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	080075b0 	.word	0x080075b0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32l4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 800059e:	1df9      	adds	r1, r7, #7
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	2201      	movs	r2, #1
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <DEV_SPI_WriteByte+0x20>)
 80005a8:	f004 fd7f 	bl	80050aa <HAL_SPI_Transmit>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000150 	.word	0x20000150

080005b8 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2108      	movs	r1, #8
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <DEV_Module_Init+0x28>)
 80005c2:	f002 ffc3 	bl	800354c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2101      	movs	r1, #1
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <DEV_Module_Init+0x28>)
 80005cc:	f002 ffbe 	bl	800354c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2104      	movs	r1, #4
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <DEV_Module_Init+0x28>)
 80005d6:	f002 ffb9 	bl	800354c <HAL_GPIO_WritePin>
		return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	48000800 	.word	0x48000800

080005e4 <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	4807      	ldr	r0, [pc, #28]	; (800060c <DEV_Module_Exit+0x28>)
 80005ee:	f002 ffad 	bl	800354c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2101      	movs	r1, #1
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <DEV_Module_Exit+0x28>)
 80005f8:	f002 ffa8 	bl	800354c <HAL_GPIO_WritePin>

    //close 5V
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2104      	movs	r1, #4
 8000600:	4802      	ldr	r0, [pc, #8]	; (800060c <DEV_Module_Exit+0x28>)
 8000602:	f002 ffa3 	bl	800354c <HAL_GPIO_WritePin>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	48000800 	.word	0x48000800

08000610 <EPD_4IN2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_4IN2_Reset(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	4817      	ldr	r0, [pc, #92]	; (8000678 <EPD_4IN2_Reset+0x68>)
 800061a:	f002 ff97 	bl	800354c <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f002 fce0 	bl	8002fe4 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	2104      	movs	r1, #4
 8000628:	4813      	ldr	r0, [pc, #76]	; (8000678 <EPD_4IN2_Reset+0x68>)
 800062a:	f002 ff8f 	bl	800354c <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 800062e:	200a      	movs	r0, #10
 8000630:	f002 fcd8 	bl	8002fe4 <HAL_Delay>

    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2104      	movs	r1, #4
 8000638:	480f      	ldr	r0, [pc, #60]	; (8000678 <EPD_4IN2_Reset+0x68>)
 800063a:	f002 ff87 	bl	800354c <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f002 fcd0 	bl	8002fe4 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	2104      	movs	r1, #4
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <EPD_4IN2_Reset+0x68>)
 800064a:	f002 ff7f 	bl	800354c <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 800064e:	200a      	movs	r0, #10
 8000650:	f002 fcc8 	bl	8002fe4 <HAL_Delay>

    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2104      	movs	r1, #4
 8000658:	4807      	ldr	r0, [pc, #28]	; (8000678 <EPD_4IN2_Reset+0x68>)
 800065a:	f002 ff77 	bl	800354c <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 800065e:	200a      	movs	r0, #10
 8000660:	f002 fcc0 	bl	8002fe4 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	2104      	movs	r1, #4
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <EPD_4IN2_Reset+0x68>)
 800066a:	f002 ff6f 	bl	800354c <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 800066e:	200a      	movs	r0, #10
 8000670:	f002 fcb8 	bl	8002fe4 <HAL_Delay>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	48000800 	.word	0x48000800

0800067c <EPD_4IN2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_4IN2_SendCommand(UBYTE Reg)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2108      	movs	r1, #8
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <EPD_4IN2_SendCommand+0x38>)
 800068c:	f002 ff5e 	bl	800354c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <EPD_4IN2_SendCommand+0x38>)
 8000696:	f002 ff59 	bl	800354c <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff79 	bl	8000594 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2101      	movs	r1, #1
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <EPD_4IN2_SendCommand+0x38>)
 80006a8:	f002 ff50 	bl	800354c <HAL_GPIO_WritePin>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	48000800 	.word	0x48000800

080006b8 <EPD_4IN2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_4IN2_SendData(UBYTE Data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2108      	movs	r1, #8
 80006c6:	480a      	ldr	r0, [pc, #40]	; (80006f0 <EPD_4IN2_SendData+0x38>)
 80006c8:	f002 ff40 	bl	800354c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2101      	movs	r1, #1
 80006d0:	4807      	ldr	r0, [pc, #28]	; (80006f0 <EPD_4IN2_SendData+0x38>)
 80006d2:	f002 ff3b 	bl	800354c <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff5b 	bl	8000594 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	2101      	movs	r1, #1
 80006e2:	4803      	ldr	r0, [pc, #12]	; (80006f0 <EPD_4IN2_SendData+0x38>)
 80006e4:	f002 ff32 	bl	800354c <HAL_GPIO_WritePin>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	48000800 	.word	0x48000800

080006f4 <EPD_4IN2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_4IN2_ReadBusy(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <EPD_4IN2_ReadBusy+0x38>)
 80006fa:	f006 f8bb 	bl	8006874 <puts>
	EPD_4IN2_SendCommand(0x71);
 80006fe:	2071      	movs	r0, #113	; 0x71
 8000700:	f7ff ffbc 	bl	800067c <EPD_4IN2_SendCommand>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 0) {      //LOW: idle, HIGH: busy
 8000704:	e005      	b.n	8000712 <EPD_4IN2_ReadBusy+0x1e>
		EPD_4IN2_SendCommand(0x71);
 8000706:	2071      	movs	r0, #113	; 0x71
 8000708:	f7ff ffb8 	bl	800067c <EPD_4IN2_SendCommand>
        DEV_Delay_ms(100);
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f002 fc69 	bl	8002fe4 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 0) {      //LOW: idle, HIGH: busy
 8000712:	2102      	movs	r1, #2
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <EPD_4IN2_ReadBusy+0x3c>)
 8000716:	f002 ff01 	bl	800351c <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0f2      	beq.n	8000706 <EPD_4IN2_ReadBusy+0x12>
    }
    Debug("e-Paper busy release\r\n");
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <EPD_4IN2_ReadBusy+0x40>)
 8000722:	f006 f8a7 	bl	8006874 <puts>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	080075c8 	.word	0x080075c8
 8000730:	48000800 	.word	0x48000800
 8000734:	080075e0 	.word	0x080075e0

08000738 <EPD_4IN2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_4IN2_TurnOnDisplay(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    EPD_4IN2_SendCommand(0x12);
 800073c:	2012      	movs	r0, #18
 800073e:	f7ff ff9d 	bl	800067c <EPD_4IN2_SendCommand>
    DEV_Delay_ms(100);
 8000742:	2064      	movs	r0, #100	; 0x64
 8000744:	f002 fc4e 	bl	8002fe4 <HAL_Delay>
    EPD_4IN2_ReadBusy();
 8000748:	f7ff ffd4 	bl	80006f4 <EPD_4IN2_ReadBusy>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <EPD_4IN2_SetLut>:
	for(count=0;count<42;count++)
		{EPD_4IN2_SendData(EPD_4IN2_Partial_lut_bb1[count]);}
}

static void EPD_4IN2_SetLut(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
	unsigned int count;
	EPD_4IN2_SendCommand(0x20);
 8000756:	2020      	movs	r0, #32
 8000758:	f7ff ff90 	bl	800067c <EPD_4IN2_SendCommand>
	for(count=0;count<36;count++)
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	e009      	b.n	8000776 <EPD_4IN2_SetLut+0x26>
		{EPD_4IN2_SendData(EPD_4IN2_lut_vcom0[count]);}
 8000762:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <EPD_4IN2_SetLut+0xd0>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ffa4 	bl	80006b8 <EPD_4IN2_SendData>
	for(count=0;count<36;count++)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3301      	adds	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b23      	cmp	r3, #35	; 0x23
 800077a:	d9f2      	bls.n	8000762 <EPD_4IN2_SetLut+0x12>

	EPD_4IN2_SendCommand(0x21);
 800077c:	2021      	movs	r0, #33	; 0x21
 800077e:	f7ff ff7d 	bl	800067c <EPD_4IN2_SendCommand>
	for(count=0;count<36;count++)
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	e009      	b.n	800079c <EPD_4IN2_SetLut+0x4c>
		{EPD_4IN2_SendData(EPD_4IN2_lut_ww[count]);}
 8000788:	4a26      	ldr	r2, [pc, #152]	; (8000824 <EPD_4IN2_SetLut+0xd4>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff91 	bl	80006b8 <EPD_4IN2_SendData>
	for(count=0;count<36;count++)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3301      	adds	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b23      	cmp	r3, #35	; 0x23
 80007a0:	d9f2      	bls.n	8000788 <EPD_4IN2_SetLut+0x38>

	EPD_4IN2_SendCommand(0x22);
 80007a2:	2022      	movs	r0, #34	; 0x22
 80007a4:	f7ff ff6a 	bl	800067c <EPD_4IN2_SendCommand>
	for(count=0;count<36;count++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	e009      	b.n	80007c2 <EPD_4IN2_SetLut+0x72>
		{EPD_4IN2_SendData(EPD_4IN2_lut_bw[count]);}
 80007ae:	4a1e      	ldr	r2, [pc, #120]	; (8000828 <EPD_4IN2_SetLut+0xd8>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4413      	add	r3, r2
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff7e 	bl	80006b8 <EPD_4IN2_SendData>
	for(count=0;count<36;count++)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3301      	adds	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b23      	cmp	r3, #35	; 0x23
 80007c6:	d9f2      	bls.n	80007ae <EPD_4IN2_SetLut+0x5e>

	EPD_4IN2_SendCommand(0x23);
 80007c8:	2023      	movs	r0, #35	; 0x23
 80007ca:	f7ff ff57 	bl	800067c <EPD_4IN2_SendCommand>
	for(count=0;count<36;count++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	e009      	b.n	80007e8 <EPD_4IN2_SetLut+0x98>
		{EPD_4IN2_SendData(EPD_4IN2_lut_wb[count]);}
 80007d4:	4a15      	ldr	r2, [pc, #84]	; (800082c <EPD_4IN2_SetLut+0xdc>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff6b 	bl	80006b8 <EPD_4IN2_SendData>
	for(count=0;count<36;count++)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3301      	adds	r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b23      	cmp	r3, #35	; 0x23
 80007ec:	d9f2      	bls.n	80007d4 <EPD_4IN2_SetLut+0x84>

	EPD_4IN2_SendCommand(0x24);
 80007ee:	2024      	movs	r0, #36	; 0x24
 80007f0:	f7ff ff44 	bl	800067c <EPD_4IN2_SendCommand>
	for(count=0;count<36;count++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	e009      	b.n	800080e <EPD_4IN2_SetLut+0xbe>
		{EPD_4IN2_SendData(EPD_4IN2_lut_bb[count]);}
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <EPD_4IN2_SetLut+0xe0>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff58 	bl	80006b8 <EPD_4IN2_SendData>
	for(count=0;count<36;count++)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3301      	adds	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b23      	cmp	r3, #35	; 0x23
 8000812:	d9f2      	bls.n	80007fa <EPD_4IN2_SetLut+0xaa>
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	08007b14 	.word	0x08007b14
 8000824:	08007b40 	.word	0x08007b40
 8000828:	08007b6c 	.word	0x08007b6c
 800082c:	08007b98 	.word	0x08007b98
 8000830:	08007bc4 	.word	0x08007bc4

08000834 <EPD_4IN2_4Gray_lut>:

//LUT download
static void EPD_4IN2_4Gray_lut(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	unsigned int count;
	{
		EPD_4IN2_SendCommand(0x20);							//vcom
 800083a:	2020      	movs	r0, #32
 800083c:	f7ff ff1e 	bl	800067c <EPD_4IN2_SendCommand>
		for(count=0;count<42;count++)
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	e009      	b.n	800085a <EPD_4IN2_4Gray_lut+0x26>
			{EPD_4IN2_SendData(EPD_4IN2_4Gray_lut_vcom[count]);}
 8000846:	4a38      	ldr	r2, [pc, #224]	; (8000928 <EPD_4IN2_4Gray_lut+0xf4>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff32 	bl	80006b8 <EPD_4IN2_SendData>
		for(count=0;count<42;count++)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3301      	adds	r3, #1
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b29      	cmp	r3, #41	; 0x29
 800085e:	d9f2      	bls.n	8000846 <EPD_4IN2_4Gray_lut+0x12>

	EPD_4IN2_SendCommand(0x21);							//red not use
 8000860:	2021      	movs	r0, #33	; 0x21
 8000862:	f7ff ff0b 	bl	800067c <EPD_4IN2_SendCommand>
	for(count=0;count<42;count++)
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	e009      	b.n	8000880 <EPD_4IN2_4Gray_lut+0x4c>
		{EPD_4IN2_SendData(EPD_4IN2_4Gray_lut_ww[count]);}
 800086c:	4a2f      	ldr	r2, [pc, #188]	; (800092c <EPD_4IN2_4Gray_lut+0xf8>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff1f 	bl	80006b8 <EPD_4IN2_SendData>
	for(count=0;count<42;count++)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3301      	adds	r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b29      	cmp	r3, #41	; 0x29
 8000884:	d9f2      	bls.n	800086c <EPD_4IN2_4Gray_lut+0x38>

		EPD_4IN2_SendCommand(0x22);							//bw r
 8000886:	2022      	movs	r0, #34	; 0x22
 8000888:	f7ff fef8 	bl	800067c <EPD_4IN2_SendCommand>
		for(count=0;count<42;count++)
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	e009      	b.n	80008a6 <EPD_4IN2_4Gray_lut+0x72>
			{EPD_4IN2_SendData(EPD_4IN2_4Gray_lut_bw[count]);}
 8000892:	4a27      	ldr	r2, [pc, #156]	; (8000930 <EPD_4IN2_4Gray_lut+0xfc>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff0c 	bl	80006b8 <EPD_4IN2_SendData>
		for(count=0;count<42;count++)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b29      	cmp	r3, #41	; 0x29
 80008aa:	d9f2      	bls.n	8000892 <EPD_4IN2_4Gray_lut+0x5e>

		EPD_4IN2_SendCommand(0x23);							//wb w
 80008ac:	2023      	movs	r0, #35	; 0x23
 80008ae:	f7ff fee5 	bl	800067c <EPD_4IN2_SendCommand>
		for(count=0;count<42;count++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	e009      	b.n	80008cc <EPD_4IN2_4Gray_lut+0x98>
			{EPD_4IN2_SendData(EPD_4IN2_4Gray_lut_wb[count]);}
 80008b8:	4a1e      	ldr	r2, [pc, #120]	; (8000934 <EPD_4IN2_4Gray_lut+0x100>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fef9 	bl	80006b8 <EPD_4IN2_SendData>
		for(count=0;count<42;count++)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3301      	adds	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b29      	cmp	r3, #41	; 0x29
 80008d0:	d9f2      	bls.n	80008b8 <EPD_4IN2_4Gray_lut+0x84>

		EPD_4IN2_SendCommand(0x24);							//bb b
 80008d2:	2024      	movs	r0, #36	; 0x24
 80008d4:	f7ff fed2 	bl	800067c <EPD_4IN2_SendCommand>
		for(count=0;count<42;count++)
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	e009      	b.n	80008f2 <EPD_4IN2_4Gray_lut+0xbe>
			{EPD_4IN2_SendData(EPD_4IN2_4Gray_lut_bb[count]);}
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <EPD_4IN2_4Gray_lut+0x104>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4413      	add	r3, r2
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fee6 	bl	80006b8 <EPD_4IN2_SendData>
		for(count=0;count<42;count++)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b29      	cmp	r3, #41	; 0x29
 80008f6:	d9f2      	bls.n	80008de <EPD_4IN2_4Gray_lut+0xaa>

		EPD_4IN2_SendCommand(0x25);							//vcom
 80008f8:	2025      	movs	r0, #37	; 0x25
 80008fa:	f7ff febf 	bl	800067c <EPD_4IN2_SendCommand>
		for(count=0;count<42;count++)
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	e009      	b.n	8000918 <EPD_4IN2_4Gray_lut+0xe4>
			{EPD_4IN2_SendData(EPD_4IN2_4Gray_lut_ww[count]);}
 8000904:	4a09      	ldr	r2, [pc, #36]	; (800092c <EPD_4IN2_4Gray_lut+0xf8>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fed3 	bl	80006b8 <EPD_4IN2_SendData>
		for(count=0;count<42;count++)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b29      	cmp	r3, #41	; 0x29
 800091c:	d9f2      	bls.n	8000904 <EPD_4IN2_4Gray_lut+0xd0>
	}
}
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	08007bf0 	.word	0x08007bf0
 800092c:	08007c1c 	.word	0x08007c1c
 8000930:	08007c48 	.word	0x08007c48
 8000934:	08007c74 	.word	0x08007c74
 8000938:	08007ca0 	.word	0x08007ca0

0800093c <EPD_4IN2_Init_Fast>:
    EPD_4IN2_Partial_SetLut();
}

//UC8176C
void EPD_4IN2_Init_Fast(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	EPD_4IN2_Reset();
 8000940:	f7ff fe66 	bl	8000610 <EPD_4IN2_Reset>
	EPD_4IN2_SendCommand(0x01);			//POWER SETTING
 8000944:	2001      	movs	r0, #1
 8000946:	f7ff fe99 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData (0x03);
 800094a:	2003      	movs	r0, #3
 800094c:	f7ff feb4 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x00);
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff feb1 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x2b);
 8000956:	202b      	movs	r0, #43	; 0x2b
 8000958:	f7ff feae 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x2b);
 800095c:	202b      	movs	r0, #43	; 0x2b
 800095e:	f7ff feab 	bl	80006b8 <EPD_4IN2_SendData>

	EPD_4IN2_SendCommand(0x06);         //boost soft start
 8000962:	2006      	movs	r0, #6
 8000964:	f7ff fe8a 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData (0x17);		//A
 8000968:	2017      	movs	r0, #23
 800096a:	f7ff fea5 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x17);		//B
 800096e:	2017      	movs	r0, #23
 8000970:	f7ff fea2 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x17);		//C
 8000974:	2017      	movs	r0, #23
 8000976:	f7ff fe9f 	bl	80006b8 <EPD_4IN2_SendData>

	EPD_4IN2_SendCommand(0x04);
 800097a:	2004      	movs	r0, #4
 800097c:	f7ff fe7e 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_ReadBusy();
 8000980:	f7ff feb8 	bl	80006f4 <EPD_4IN2_ReadBusy>

	EPD_4IN2_SendCommand(0x00);			//panel setting
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff fe79 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData(0xbf);		//KW-bf   KWR-2F	BWROTP 0f	BWOTP 1f
 800098a:	20bf      	movs	r0, #191	; 0xbf
 800098c:	f7ff fe94 	bl	80006b8 <EPD_4IN2_SendData>


	EPD_4IN2_SendCommand(0x30);
 8000990:	2030      	movs	r0, #48	; 0x30
 8000992:	f7ff fe73 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData (0x3c);      	// 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 8000996:	203c      	movs	r0, #60	; 0x3c
 8000998:	f7ff fe8e 	bl	80006b8 <EPD_4IN2_SendData>

	EPD_4IN2_SendCommand(0x61);			//resolution setting
 800099c:	2061      	movs	r0, #97	; 0x61
 800099e:	f7ff fe6d 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData (0x01);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff fe88 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x90);	 //400
 80009a8:	2090      	movs	r0, #144	; 0x90
 80009aa:	f7ff fe85 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x01);	 //300
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff fe82 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x2c);
 80009b4:	202c      	movs	r0, #44	; 0x2c
 80009b6:	f7ff fe7f 	bl	80006b8 <EPD_4IN2_SendData>


	EPD_4IN2_SendCommand(0x82);			//vcom_DC setting
 80009ba:	2082      	movs	r0, #130	; 0x82
 80009bc:	f7ff fe5e 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData (0x12);
 80009c0:	2012      	movs	r0, #18
 80009c2:	f7ff fe79 	bl	80006b8 <EPD_4IN2_SendData>

	EPD_4IN2_SendCommand(0X50);
 80009c6:	2050      	movs	r0, #80	; 0x50
 80009c8:	f7ff fe58 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData(0x97);
 80009cc:	2097      	movs	r0, #151	; 0x97
 80009ce:	f7ff fe73 	bl	80006b8 <EPD_4IN2_SendData>

	EPD_4IN2_SetLut();
 80009d2:	f7ff febd 	bl	8000750 <EPD_4IN2_SetLut>

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}

080009da <EPD_4IN2_Init_4Gray>:

void EPD_4IN2_Init_4Gray(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
	EPD_4IN2_Reset();
 80009de:	f7ff fe17 	bl	8000610 <EPD_4IN2_Reset>
	EPD_4IN2_SendCommand(0x01);			//POWER SETTING
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fe4a 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData (0x03);
 80009e8:	2003      	movs	r0, #3
 80009ea:	f7ff fe65 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x00);       //VGH=20V,VGL=-20V
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fe62 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x2b);		//VDH=15V
 80009f4:	202b      	movs	r0, #43	; 0x2b
 80009f6:	f7ff fe5f 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x2b);		//VDL=-15V
 80009fa:	202b      	movs	r0, #43	; 0x2b
 80009fc:	f7ff fe5c 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x13);
 8000a00:	2013      	movs	r0, #19
 8000a02:	f7ff fe59 	bl	80006b8 <EPD_4IN2_SendData>

	EPD_4IN2_SendCommand(0x06);         //booster soft start
 8000a06:	2006      	movs	r0, #6
 8000a08:	f7ff fe38 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData (0x17);		//A
 8000a0c:	2017      	movs	r0, #23
 8000a0e:	f7ff fe53 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x17);		//B
 8000a12:	2017      	movs	r0, #23
 8000a14:	f7ff fe50 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x17);		//C
 8000a18:	2017      	movs	r0, #23
 8000a1a:	f7ff fe4d 	bl	80006b8 <EPD_4IN2_SendData>

	EPD_4IN2_SendCommand(0x04);
 8000a1e:	2004      	movs	r0, #4
 8000a20:	f7ff fe2c 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_ReadBusy();
 8000a24:	f7ff fe66 	bl	80006f4 <EPD_4IN2_ReadBusy>

	EPD_4IN2_SendCommand(0x00);			//panel setting
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff fe27 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData(0x3f);		//KW-3f   KWR-2F	BWROTP 0f	BWOTP 1f
 8000a2e:	203f      	movs	r0, #63	; 0x3f
 8000a30:	f7ff fe42 	bl	80006b8 <EPD_4IN2_SendData>

	EPD_4IN2_SendCommand(0x30);			//PLL setting
 8000a34:	2030      	movs	r0, #48	; 0x30
 8000a36:	f7ff fe21 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData (0x3c);      	//100hz
 8000a3a:	203c      	movs	r0, #60	; 0x3c
 8000a3c:	f7ff fe3c 	bl	80006b8 <EPD_4IN2_SendData>

	EPD_4IN2_SendCommand(0x61);			//resolution setting
 8000a40:	2061      	movs	r0, #97	; 0x61
 8000a42:	f7ff fe1b 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData (0x01);		//400
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff fe36 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x90);
 8000a4c:	2090      	movs	r0, #144	; 0x90
 8000a4e:	f7ff fe33 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x01);		//300
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff fe30 	bl	80006b8 <EPD_4IN2_SendData>
	EPD_4IN2_SendData (0x2c);
 8000a58:	202c      	movs	r0, #44	; 0x2c
 8000a5a:	f7ff fe2d 	bl	80006b8 <EPD_4IN2_SendData>

	EPD_4IN2_SendCommand(0x82);			//vcom_DC setting
 8000a5e:	2082      	movs	r0, #130	; 0x82
 8000a60:	f7ff fe0c 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData (0x12);
 8000a64:	2012      	movs	r0, #18
 8000a66:	f7ff fe27 	bl	80006b8 <EPD_4IN2_SendData>

	EPD_4IN2_SendCommand(0X50);			//VCOM AND DATA INTERVAL SETTING
 8000a6a:	2050      	movs	r0, #80	; 0x50
 8000a6c:	f7ff fe06 	bl	800067c <EPD_4IN2_SendCommand>
	EPD_4IN2_SendData(0x97);
 8000a70:	2097      	movs	r0, #151	; 0x97
 8000a72:	f7ff fe21 	bl	80006b8 <EPD_4IN2_SendData>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <EPD_4IN2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_4IN2_Clear(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_4IN2_WIDTH % 8 == 0)? (EPD_4IN2_WIDTH / 8 ): (EPD_4IN2_WIDTH / 8 + 1);
 8000a80:	2332      	movs	r3, #50	; 0x32
 8000a82:	80fb      	strh	r3, [r7, #6]
    Height = EPD_4IN2_HEIGHT;
 8000a84:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a88:	80bb      	strh	r3, [r7, #4]

    EPD_4IN2_SendCommand(0x10);
 8000a8a:	2010      	movs	r0, #16
 8000a8c:	f7ff fdf6 	bl	800067c <EPD_4IN2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000a90:	2300      	movs	r3, #0
 8000a92:	81fb      	strh	r3, [r7, #14]
 8000a94:	e00f      	b.n	8000ab6 <EPD_4IN2_Clear+0x3c>
        for (UWORD i = 0; i < Width; i++) {
 8000a96:	2300      	movs	r3, #0
 8000a98:	81bb      	strh	r3, [r7, #12]
 8000a9a:	e005      	b.n	8000aa8 <EPD_4IN2_Clear+0x2e>
            EPD_4IN2_SendData(0xFF);
 8000a9c:	20ff      	movs	r0, #255	; 0xff
 8000a9e:	f7ff fe0b 	bl	80006b8 <EPD_4IN2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000aa2:	89bb      	ldrh	r3, [r7, #12]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	81bb      	strh	r3, [r7, #12]
 8000aa8:	89ba      	ldrh	r2, [r7, #12]
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d3f5      	bcc.n	8000a9c <EPD_4IN2_Clear+0x22>
    for (UWORD j = 0; j < Height; j++) {
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	81fb      	strh	r3, [r7, #14]
 8000ab6:	89fa      	ldrh	r2, [r7, #14]
 8000ab8:	88bb      	ldrh	r3, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d3eb      	bcc.n	8000a96 <EPD_4IN2_Clear+0x1c>
        }
    }

    EPD_4IN2_SendCommand(0x13);
 8000abe:	2013      	movs	r0, #19
 8000ac0:	f7ff fddc 	bl	800067c <EPD_4IN2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	817b      	strh	r3, [r7, #10]
 8000ac8:	e00f      	b.n	8000aea <EPD_4IN2_Clear+0x70>
        for (UWORD i = 0; i < Width; i++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	813b      	strh	r3, [r7, #8]
 8000ace:	e005      	b.n	8000adc <EPD_4IN2_Clear+0x62>
            EPD_4IN2_SendData(0xFF);
 8000ad0:	20ff      	movs	r0, #255	; 0xff
 8000ad2:	f7ff fdf1 	bl	80006b8 <EPD_4IN2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000ad6:	893b      	ldrh	r3, [r7, #8]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	813b      	strh	r3, [r7, #8]
 8000adc:	893a      	ldrh	r2, [r7, #8]
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d3f5      	bcc.n	8000ad0 <EPD_4IN2_Clear+0x56>
    for (UWORD j = 0; j < Height; j++) {
 8000ae4:	897b      	ldrh	r3, [r7, #10]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	817b      	strh	r3, [r7, #10]
 8000aea:	897a      	ldrh	r2, [r7, #10]
 8000aec:	88bb      	ldrh	r3, [r7, #4]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d3eb      	bcc.n	8000aca <EPD_4IN2_Clear+0x50>
        }
    }

	EPD_4IN2_SendCommand(0x12);		 //DISPLAY REFRESH
 8000af2:	2012      	movs	r0, #18
 8000af4:	f7ff fdc2 	bl	800067c <EPD_4IN2_SendCommand>
	DEV_Delay_ms(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f002 fa73 	bl	8002fe4 <HAL_Delay>
    EPD_4IN2_TurnOnDisplay();
 8000afe:	f7ff fe1b 	bl	8000738 <EPD_4IN2_TurnOnDisplay>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <EPD_4IN2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_4IN2_Display(UBYTE *Image)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_4IN2_WIDTH % 8 == 0)? (EPD_4IN2_WIDTH / 8 ): (EPD_4IN2_WIDTH / 8 + 1);
 8000b12:	2332      	movs	r3, #50	; 0x32
 8000b14:	81fb      	strh	r3, [r7, #14]
    Height = EPD_4IN2_HEIGHT;
 8000b16:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000b1a:	81bb      	strh	r3, [r7, #12]

	EPD_4IN2_SendCommand(0x10);
 8000b1c:	2010      	movs	r0, #16
 8000b1e:	f7ff fdad 	bl	800067c <EPD_4IN2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000b22:	2300      	movs	r3, #0
 8000b24:	82fb      	strh	r3, [r7, #22]
 8000b26:	e00f      	b.n	8000b48 <EPD_4IN2_Display+0x3e>
        for (UWORD i = 0; i < Width; i++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	82bb      	strh	r3, [r7, #20]
 8000b2c:	e005      	b.n	8000b3a <EPD_4IN2_Display+0x30>
            EPD_4IN2_SendData(0x00);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fdc2 	bl	80006b8 <EPD_4IN2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000b34:	8abb      	ldrh	r3, [r7, #20]
 8000b36:	3301      	adds	r3, #1
 8000b38:	82bb      	strh	r3, [r7, #20]
 8000b3a:	8aba      	ldrh	r2, [r7, #20]
 8000b3c:	89fb      	ldrh	r3, [r7, #14]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d3f5      	bcc.n	8000b2e <EPD_4IN2_Display+0x24>
    for (UWORD j = 0; j < Height; j++) {
 8000b42:	8afb      	ldrh	r3, [r7, #22]
 8000b44:	3301      	adds	r3, #1
 8000b46:	82fb      	strh	r3, [r7, #22]
 8000b48:	8afa      	ldrh	r2, [r7, #22]
 8000b4a:	89bb      	ldrh	r3, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d3eb      	bcc.n	8000b28 <EPD_4IN2_Display+0x1e>
        }
    }

    EPD_4IN2_SendCommand(0x13);
 8000b50:	2013      	movs	r0, #19
 8000b52:	f7ff fd93 	bl	800067c <EPD_4IN2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	827b      	strh	r3, [r7, #18]
 8000b5a:	e019      	b.n	8000b90 <EPD_4IN2_Display+0x86>
        for (UWORD i = 0; i < Width; i++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	823b      	strh	r3, [r7, #16]
 8000b60:	e00f      	b.n	8000b82 <EPD_4IN2_Display+0x78>
            EPD_4IN2_SendData(Image[i + j * Width]);
 8000b62:	8a3a      	ldrh	r2, [r7, #16]
 8000b64:	8a7b      	ldrh	r3, [r7, #18]
 8000b66:	89f9      	ldrh	r1, [r7, #14]
 8000b68:	fb01 f303 	mul.w	r3, r1, r3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	461a      	mov	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fd9e 	bl	80006b8 <EPD_4IN2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000b7c:	8a3b      	ldrh	r3, [r7, #16]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	823b      	strh	r3, [r7, #16]
 8000b82:	8a3a      	ldrh	r2, [r7, #16]
 8000b84:	89fb      	ldrh	r3, [r7, #14]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d3eb      	bcc.n	8000b62 <EPD_4IN2_Display+0x58>
    for (UWORD j = 0; j < Height; j++) {
 8000b8a:	8a7b      	ldrh	r3, [r7, #18]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	827b      	strh	r3, [r7, #18]
 8000b90:	8a7a      	ldrh	r2, [r7, #18]
 8000b92:	89bb      	ldrh	r3, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3e1      	bcc.n	8000b5c <EPD_4IN2_Display+0x52>
        }
    }

	EPD_4IN2_SendCommand(0x12);		 //DISPLAY REFRESH
 8000b98:	2012      	movs	r0, #18
 8000b9a:	f7ff fd6f 	bl	800067c <EPD_4IN2_SendCommand>
	DEV_Delay_ms(10);
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f002 fa20 	bl	8002fe4 <HAL_Delay>
    EPD_4IN2_TurnOnDisplay();
 8000ba4:	f7ff fdc8 	bl	8000738 <EPD_4IN2_TurnOnDisplay>
}
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <EPD_4IN2_4GrayDisplay>:
	DEV_Delay_ms(10);     //The delay here is necessary, 200uS at least!!!
	EPD_4IN2_TurnOnDisplay();
}

void EPD_4IN2_4GrayDisplay(const UBYTE *Image)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
/****Color display description****
      white  gray1  gray2  black
0x10|  01     01     00     00
0x13|  01     00     01     00
*********************************/
	EPD_4IN2_SendCommand(0x10);
 8000bb8:	2010      	movs	r0, #16
 8000bba:	f7ff fd5f 	bl	800067c <EPD_4IN2_SendCommand>
	// EPD_4IN2_HEIGHT
	// EPD_4IN2_WIDTH
	for(m = 0; m<EPD_4IN2_HEIGHT;m++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	e06e      	b.n	8000ca2 <EPD_4IN2_4GrayDisplay+0xf2>
		for(i=0;i<EPD_4IN2_WIDTH/8;i++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
 8000bc8:	e065      	b.n	8000c96 <EPD_4IN2_4GrayDisplay+0xe6>
		{
			temp3=0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73bb      	strb	r3, [r7, #14]
			for(j=0;j<2;j++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	e056      	b.n	8000c82 <EPD_4IN2_4GrayDisplay+0xd2>
			{

				temp1 = Image[(m*(EPD_4IN2_WIDTH/8)+i)*2+j];
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	2232      	movs	r2, #50	; 0x32
 8000bd8:	fb03 f202 	mul.w	r2, r3, r2
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	4413      	add	r3, r2
 8000be0:	005a      	lsls	r2, r3, #1
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4413      	add	r3, r2
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	73fb      	strb	r3, [r7, #15]
				for(k=0;k<2;k++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	e040      	b.n	8000c76 <EPD_4IN2_4GrayDisplay+0xc6>
				{
					temp2 = temp1&0xC0 ;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bfa:	737b      	strb	r3, [r7, #13]
					if(temp2 == 0xC0)
 8000bfc:	7b7b      	ldrb	r3, [r7, #13]
 8000bfe:	2bc0      	cmp	r3, #192	; 0xc0
 8000c00:	d104      	bne.n	8000c0c <EPD_4IN2_4GrayDisplay+0x5c>
						temp3 |= 0x01;//white
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	73bb      	strb	r3, [r7, #14]
 8000c0a:	e009      	b.n	8000c20 <EPD_4IN2_4GrayDisplay+0x70>
					else if(temp2 == 0x00)
 8000c0c:	7b7b      	ldrb	r3, [r7, #13]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d006      	beq.n	8000c20 <EPD_4IN2_4GrayDisplay+0x70>
						temp3 |= 0x00;  //black
					else if(temp2 == 0x80)
 8000c12:	7b7b      	ldrb	r3, [r7, #13]
 8000c14:	2b80      	cmp	r3, #128	; 0x80
 8000c16:	d103      	bne.n	8000c20 <EPD_4IN2_4GrayDisplay+0x70>
						temp3 |= 0x01;  //gray1
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	73bb      	strb	r3, [r7, #14]
					else //0x40
						temp3 |= 0x00; //gray2
					temp3 <<= 1;
 8000c20:	7bbb      	ldrb	r3, [r7, #14]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	73bb      	strb	r3, [r7, #14]

					temp1 <<= 2;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	73fb      	strb	r3, [r7, #15]
					temp2 = temp1&0xC0 ;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c32:	737b      	strb	r3, [r7, #13]
					if(temp2 == 0xC0)  //white
 8000c34:	7b7b      	ldrb	r3, [r7, #13]
 8000c36:	2bc0      	cmp	r3, #192	; 0xc0
 8000c38:	d104      	bne.n	8000c44 <EPD_4IN2_4GrayDisplay+0x94>
						temp3 |= 0x01;
 8000c3a:	7bbb      	ldrb	r3, [r7, #14]
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	73bb      	strb	r3, [r7, #14]
 8000c42:	e009      	b.n	8000c58 <EPD_4IN2_4GrayDisplay+0xa8>
					else if(temp2 == 0x00) //black
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d006      	beq.n	8000c58 <EPD_4IN2_4GrayDisplay+0xa8>
						temp3 |= 0x00;
					else if(temp2 == 0x80)
 8000c4a:	7b7b      	ldrb	r3, [r7, #13]
 8000c4c:	2b80      	cmp	r3, #128	; 0x80
 8000c4e:	d103      	bne.n	8000c58 <EPD_4IN2_4GrayDisplay+0xa8>
						temp3 |= 0x01; //gray1
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	73bb      	strb	r3, [r7, #14]
					else    //0x40
							temp3 |= 0x00;	//gray2
					if(j!=1 || k!=1)
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d102      	bne.n	8000c64 <EPD_4IN2_4GrayDisplay+0xb4>
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d002      	beq.n	8000c6a <EPD_4IN2_4GrayDisplay+0xba>
						temp3 <<= 1;
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	73bb      	strb	r3, [r7, #14]

					temp1 <<= 2;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	73fb      	strb	r3, [r7, #15]
				for(k=0;k<2;k++)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	3301      	adds	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d9bb      	bls.n	8000bf4 <EPD_4IN2_4GrayDisplay+0x44>
			for(j=0;j<2;j++)
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d9a5      	bls.n	8000bd4 <EPD_4IN2_4GrayDisplay+0x24>
				}

			 }
			EPD_4IN2_SendData(temp3);
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fd14 	bl	80006b8 <EPD_4IN2_SendData>
		for(i=0;i<EPD_4IN2_WIDTH/8;i++)
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	3301      	adds	r3, #1
 8000c94:	61fb      	str	r3, [r7, #28]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	2b31      	cmp	r3, #49	; 0x31
 8000c9a:	d996      	bls.n	8000bca <EPD_4IN2_4GrayDisplay+0x1a>
	for(m = 0; m<EPD_4IN2_HEIGHT;m++)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ca8:	d38c      	bcc.n	8000bc4 <EPD_4IN2_4GrayDisplay+0x14>
		}
    // new  data
    EPD_4IN2_SendCommand(0x13);
 8000caa:	2013      	movs	r0, #19
 8000cac:	f7ff fce6 	bl	800067c <EPD_4IN2_SendCommand>
	for(m = 0; m<EPD_4IN2_HEIGHT;m++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	e06e      	b.n	8000d94 <EPD_4IN2_4GrayDisplay+0x1e4>
		for(i=0;i<EPD_4IN2_WIDTH/8;i++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e065      	b.n	8000d88 <EPD_4IN2_4GrayDisplay+0x1d8>
		{
			temp3=0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73bb      	strb	r3, [r7, #14]
			for(j=0;j<2;j++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	e056      	b.n	8000d74 <EPD_4IN2_4GrayDisplay+0x1c4>
			{
				temp1 = Image[(m*(EPD_4IN2_WIDTH/8)+i)*2+j];
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	2232      	movs	r2, #50	; 0x32
 8000cca:	fb03 f202 	mul.w	r2, r3, r2
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	005a      	lsls	r2, r3, #1
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	73fb      	strb	r3, [r7, #15]
				for(k=0;k<2;k++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	e040      	b.n	8000d68 <EPD_4IN2_4GrayDisplay+0x1b8>
				{
					temp2 = temp1&0xC0 ;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cec:	737b      	strb	r3, [r7, #13]
					if(temp2 == 0xC0)
 8000cee:	7b7b      	ldrb	r3, [r7, #13]
 8000cf0:	2bc0      	cmp	r3, #192	; 0xc0
 8000cf2:	d104      	bne.n	8000cfe <EPD_4IN2_4GrayDisplay+0x14e>
						temp3 |= 0x01;//white
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	73bb      	strb	r3, [r7, #14]
 8000cfc:	e009      	b.n	8000d12 <EPD_4IN2_4GrayDisplay+0x162>
					else if(temp2 == 0x00)
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d006      	beq.n	8000d12 <EPD_4IN2_4GrayDisplay+0x162>
						temp3 |= 0x00;  //black
					else if(temp2 == 0x80)
 8000d04:	7b7b      	ldrb	r3, [r7, #13]
 8000d06:	2b80      	cmp	r3, #128	; 0x80
 8000d08:	d003      	beq.n	8000d12 <EPD_4IN2_4GrayDisplay+0x162>
						temp3 |= 0x00;  //gray1
					else //0x40
						temp3 |= 0x01; //gray2
 8000d0a:	7bbb      	ldrb	r3, [r7, #14]
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	73bb      	strb	r3, [r7, #14]
					temp3 <<= 1;
 8000d12:	7bbb      	ldrb	r3, [r7, #14]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	73bb      	strb	r3, [r7, #14]

					temp1 <<= 2;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	73fb      	strb	r3, [r7, #15]
					temp2 = temp1&0xC0 ;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d24:	737b      	strb	r3, [r7, #13]
					if(temp2 == 0xC0)  //white
 8000d26:	7b7b      	ldrb	r3, [r7, #13]
 8000d28:	2bc0      	cmp	r3, #192	; 0xc0
 8000d2a:	d104      	bne.n	8000d36 <EPD_4IN2_4GrayDisplay+0x186>
						temp3 |= 0x01;
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	73bb      	strb	r3, [r7, #14]
 8000d34:	e009      	b.n	8000d4a <EPD_4IN2_4GrayDisplay+0x19a>
					else if(temp2 == 0x00) //black
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <EPD_4IN2_4GrayDisplay+0x19a>
						temp3 |= 0x00;
					else if(temp2 == 0x80)
 8000d3c:	7b7b      	ldrb	r3, [r7, #13]
 8000d3e:	2b80      	cmp	r3, #128	; 0x80
 8000d40:	d003      	beq.n	8000d4a <EPD_4IN2_4GrayDisplay+0x19a>
						temp3 |= 0x00; //gray1
					else    //0x40
							temp3 |= 0x01;	//gray2
 8000d42:	7bbb      	ldrb	r3, [r7, #14]
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	73bb      	strb	r3, [r7, #14]
					if(j!=1 || k!=1)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d102      	bne.n	8000d56 <EPD_4IN2_4GrayDisplay+0x1a6>
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d002      	beq.n	8000d5c <EPD_4IN2_4GrayDisplay+0x1ac>
						temp3 <<= 1;
 8000d56:	7bbb      	ldrb	r3, [r7, #14]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	73bb      	strb	r3, [r7, #14]

					temp1 <<= 2;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	73fb      	strb	r3, [r7, #15]
				for(k=0;k<2;k++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d9bb      	bls.n	8000ce6 <EPD_4IN2_4GrayDisplay+0x136>
			for(j=0;j<2;j++)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	3301      	adds	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d9a5      	bls.n	8000cc6 <EPD_4IN2_4GrayDisplay+0x116>
				}

			 }
			EPD_4IN2_SendData(temp3);
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fc9b 	bl	80006b8 <EPD_4IN2_SendData>
		for(i=0;i<EPD_4IN2_WIDTH/8;i++)
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3301      	adds	r3, #1
 8000d86:	61fb      	str	r3, [r7, #28]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	2b31      	cmp	r3, #49	; 0x31
 8000d8c:	d996      	bls.n	8000cbc <EPD_4IN2_4GrayDisplay+0x10c>
	for(m = 0; m<EPD_4IN2_HEIGHT;m++)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	3301      	adds	r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d9a:	d38c      	bcc.n	8000cb6 <EPD_4IN2_4GrayDisplay+0x106>
		}

    EPD_4IN2_4Gray_lut();
 8000d9c:	f7ff fd4a 	bl	8000834 <EPD_4IN2_4Gray_lut>
    EPD_4IN2_TurnOnDisplay();
 8000da0:	f7ff fcca 	bl	8000738 <EPD_4IN2_TurnOnDisplay>
}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <EPD_4IN2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_4IN2_Sleep(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	EPD_4IN2_SendCommand(0x50); // DEEP_SLEEP
 8000db0:	2050      	movs	r0, #80	; 0x50
 8000db2:	f7ff fc63 	bl	800067c <EPD_4IN2_SendCommand>
    EPD_4IN2_SendData(0XF7);
 8000db6:	20f7      	movs	r0, #247	; 0xf7
 8000db8:	f7ff fc7e 	bl	80006b8 <EPD_4IN2_SendData>

    EPD_4IN2_SendCommand(0x02); // POWER_OFF
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f7ff fc5d 	bl	800067c <EPD_4IN2_SendCommand>
    EPD_4IN2_ReadBusy();
 8000dc2:	f7ff fc97 	bl	80006f4 <EPD_4IN2_ReadBusy>

    EPD_4IN2_SendCommand(0x07); // DEEP_SLEEP
 8000dc6:	2007      	movs	r0, #7
 8000dc8:	f7ff fc58 	bl	800067c <EPD_4IN2_SendCommand>
    EPD_4IN2_SendData(0XA5);
 8000dcc:	20a5      	movs	r0, #165	; 0xa5
 8000dce:	f7ff fc73 	bl	80006b8 <EPD_4IN2_SendData>
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <EPD_test>:
#include "EPD_Test.h"
#include "EPD_4in2.h"
#include <string.h>

int EPD_test(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af04      	add	r7, sp, #16
    printf("EPD_4IN2_test Demo\r\n");
 8000dde:	4896      	ldr	r0, [pc, #600]	; (8001038 <EPD_test+0x260>)
 8000de0:	f005 fd48 	bl	8006874 <puts>
    if(DEV_Module_Init()!=0){
 8000de4:	f7ff fbe8 	bl	80005b8 <DEV_Module_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <EPD_test+0x1c>
        return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e26c      	b.n	80012ce <EPD_test+0x4f6>
    }

    printf("e-Paper Init and Clear...\r\n");
 8000df4:	4891      	ldr	r0, [pc, #580]	; (800103c <EPD_test+0x264>)
 8000df6:	f005 fd3d 	bl	8006874 <puts>
    EPD_4IN2_Init_Fast();
 8000dfa:	f7ff fd9f 	bl	800093c <EPD_4IN2_Init_Fast>
    EPD_4IN2_Clear();
 8000dfe:	f7ff fe3c 	bl	8000a7a <EPD_4IN2_Clear>
    DEV_Delay_ms(500);
 8000e02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e06:	f002 f8ed 	bl	8002fe4 <HAL_Delay>

    //Create a new image cache
    UBYTE *BlackImage;
    /* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
    UWORD Imagesize = ((EPD_4IN2_WIDTH % 8 == 0)? (EPD_4IN2_WIDTH / 8 ): (EPD_4IN2_WIDTH / 8 + 1)) * EPD_4IN2_HEIGHT;
 8000e0a:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000e0e:	80fb      	strh	r3, [r7, #6]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f005 fbb0 	bl	8006578 <malloc>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d105      	bne.n	8000e2e <EPD_test+0x56>
        printf("Failed to apply for black memory...\r\n");
 8000e22:	4887      	ldr	r0, [pc, #540]	; (8001040 <EPD_test+0x268>)
 8000e24:	f005 fd26 	bl	8006874 <puts>
        return -1;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	e24f      	b.n	80012ce <EPD_test+0x4f6>
    }
    printf("Paint_NewImage\r\n");
 8000e2e:	4885      	ldr	r0, [pc, #532]	; (8001044 <EPD_test+0x26c>)
 8000e30:	f005 fd20 	bl	8006874 <puts>
    Paint_NewImage(BlackImage, EPD_4IN2_WIDTH, EPD_4IN2_HEIGHT, 0, WHITE);
 8000e34:	23ff      	movs	r3, #255	; 0xff
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e3e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000e42:	6838      	ldr	r0, [r7, #0]
 8000e44:	f000 fa62 	bl	800130c <Paint_NewImage>

#if 1   // show image for array
    printf("show image for array\r\n");
 8000e48:	487f      	ldr	r0, [pc, #508]	; (8001048 <EPD_test+0x270>)
 8000e4a:	f005 fd13 	bl	8006874 <puts>
    Paint_SelectImage(BlackImage);
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f000 fab2 	bl	80013b8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8000e54:	20ff      	movs	r0, #255	; 0xff
 8000e56:	f000 fc75 	bl	8001744 <Paint_Clear>
    Paint_DrawBitMap(gImage_4in2);
 8000e5a:	487c      	ldr	r0, [pc, #496]	; (800104c <EPD_test+0x274>)
 8000e5c:	f001 fbe0 	bl	8002620 <Paint_DrawBitMap>
    EPD_4IN2_Display(BlackImage);
 8000e60:	6838      	ldr	r0, [r7, #0]
 8000e62:	f7ff fe52 	bl	8000b0a <EPD_4IN2_Display>
    DEV_Delay_ms(500);
 8000e66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e6a:	f002 f8bb 	bl	8002fe4 <HAL_Delay>
#endif

#if 1   // Drawing on the image
    //1.Select Image
    printf("SelectImage:BlackImage\r\n");
 8000e6e:	4878      	ldr	r0, [pc, #480]	; (8001050 <EPD_test+0x278>)
 8000e70:	f005 fd00 	bl	8006874 <puts>
    Paint_SelectImage(BlackImage);
 8000e74:	6838      	ldr	r0, [r7, #0]
 8000e76:	f000 fa9f 	bl	80013b8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8000e7a:	20ff      	movs	r0, #255	; 0xff
 8000e7c:	f000 fc62 	bl	8001744 <Paint_Clear>

    // 2.Drawing on the image
    printf("Drawing:BlackImage\r\n");
 8000e80:	4874      	ldr	r0, [pc, #464]	; (8001054 <EPD_test+0x27c>)
 8000e82:	f005 fcf7 	bl	8006874 <puts>
    Paint_DrawPoint(10, 80, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8000e86:	2301      	movs	r3, #1
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2150      	movs	r1, #80	; 0x50
 8000e90:	200a      	movs	r0, #10
 8000e92:	f000 fcf7 	bl	8001884 <Paint_DrawPoint>
    Paint_DrawPoint(10, 90, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 8000e96:	2301      	movs	r3, #1
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	215a      	movs	r1, #90	; 0x5a
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f000 fcef 	bl	8001884 <Paint_DrawPoint>
    Paint_DrawPoint(10, 100, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2303      	movs	r3, #3
 8000eac:	2200      	movs	r2, #0
 8000eae:	2164      	movs	r1, #100	; 0x64
 8000eb0:	200a      	movs	r0, #10
 8000eb2:	f000 fce7 	bl	8001884 <Paint_DrawPoint>
    Paint_DrawLine(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2378      	movs	r3, #120	; 0x78
 8000ec4:	2246      	movs	r2, #70	; 0x46
 8000ec6:	2146      	movs	r1, #70	; 0x46
 8000ec8:	2014      	movs	r0, #20
 8000eca:	f000 fd87 	bl	80019dc <Paint_DrawLine>
    Paint_DrawLine(70, 70, 20, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9302      	str	r3, [sp, #8]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2378      	movs	r3, #120	; 0x78
 8000edc:	2214      	movs	r2, #20
 8000ede:	2146      	movs	r1, #70	; 0x46
 8000ee0:	2046      	movs	r0, #70	; 0x46
 8000ee2:	f000 fd7b 	bl	80019dc <Paint_DrawLine>
    Paint_DrawRectangle(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2378      	movs	r3, #120	; 0x78
 8000ef4:	2246      	movs	r2, #70	; 0x46
 8000ef6:	2146      	movs	r1, #70	; 0x46
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f000 fe1b 	bl	8001b34 <Paint_DrawRectangle>
    Paint_DrawRectangle(80, 70, 130, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8000efe:	2301      	movs	r3, #1
 8000f00:	9302      	str	r3, [sp, #8]
 8000f02:	2301      	movs	r3, #1
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	2300      	movs	r3, #0
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2378      	movs	r3, #120	; 0x78
 8000f0c:	2282      	movs	r2, #130	; 0x82
 8000f0e:	2146      	movs	r1, #70	; 0x46
 8000f10:	2050      	movs	r0, #80	; 0x50
 8000f12:	f000 fe0f 	bl	8001b34 <Paint_DrawRectangle>
    Paint_DrawCircle(45, 95, 20, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8000f16:	2300      	movs	r3, #0
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2214      	movs	r2, #20
 8000f22:	215f      	movs	r1, #95	; 0x5f
 8000f24:	202d      	movs	r0, #45	; 0x2d
 8000f26:	f000 fe89 	bl	8001c3c <Paint_DrawCircle>
    Paint_DrawCircle(105, 95, 20, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	23ff      	movs	r3, #255	; 0xff
 8000f34:	2214      	movs	r2, #20
 8000f36:	215f      	movs	r1, #95	; 0x5f
 8000f38:	2069      	movs	r0, #105	; 0x69
 8000f3a:	f000 fe7f 	bl	8001c3c <Paint_DrawCircle>
    Paint_DrawLine(85, 95, 125, 95, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8000f3e:	2301      	movs	r3, #1
 8000f40:	9302      	str	r3, [sp, #8]
 8000f42:	2301      	movs	r3, #1
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	2300      	movs	r3, #0
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	235f      	movs	r3, #95	; 0x5f
 8000f4c:	227d      	movs	r2, #125	; 0x7d
 8000f4e:	215f      	movs	r1, #95	; 0x5f
 8000f50:	2055      	movs	r0, #85	; 0x55
 8000f52:	f000 fd43 	bl	80019dc <Paint_DrawLine>
    Paint_DrawLine(105, 75, 105, 115, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8000f56:	2301      	movs	r3, #1
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2373      	movs	r3, #115	; 0x73
 8000f64:	2269      	movs	r2, #105	; 0x69
 8000f66:	214b      	movs	r1, #75	; 0x4b
 8000f68:	2069      	movs	r0, #105	; 0x69
 8000f6a:	f000 fd37 	bl	80019dc <Paint_DrawLine>
    Paint_DrawString_EN(10, 0, "waveshare", &Font16, BLACK, WHITE);
 8000f6e:	23ff      	movs	r3, #255	; 0xff
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	2300      	movs	r3, #0
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	4b38      	ldr	r3, [pc, #224]	; (8001058 <EPD_test+0x280>)
 8000f78:	4a38      	ldr	r2, [pc, #224]	; (800105c <EPD_test+0x284>)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f001 f891 	bl	80020a4 <Paint_DrawString_EN>
    Paint_DrawString_EN(10, 20, "hello world", &Font12, WHITE, BLACK);
 8000f82:	2300      	movs	r3, #0
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	23ff      	movs	r3, #255	; 0xff
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4b35      	ldr	r3, [pc, #212]	; (8001060 <EPD_test+0x288>)
 8000f8c:	4a35      	ldr	r2, [pc, #212]	; (8001064 <EPD_test+0x28c>)
 8000f8e:	2114      	movs	r1, #20
 8000f90:	200a      	movs	r0, #10
 8000f92:	f001 f887 	bl	80020a4 <Paint_DrawString_EN>
    Paint_DrawNum(10, 33, 123456789, &Font12, BLACK, WHITE);
 8000f96:	23ff      	movs	r3, #255	; 0xff
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	4b30      	ldr	r3, [pc, #192]	; (8001060 <EPD_test+0x288>)
 8000fa0:	4a31      	ldr	r2, [pc, #196]	; (8001068 <EPD_test+0x290>)
 8000fa2:	2121      	movs	r1, #33	; 0x21
 8000fa4:	200a      	movs	r0, #10
 8000fa6:	f001 fa69 	bl	800247c <Paint_DrawNum>
    Paint_DrawNum(10, 50, 987654321, &Font16, WHITE, BLACK);
 8000faa:	2300      	movs	r3, #0
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	23ff      	movs	r3, #255	; 0xff
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <EPD_test+0x280>)
 8000fb4:	4a2d      	ldr	r2, [pc, #180]	; (800106c <EPD_test+0x294>)
 8000fb6:	2132      	movs	r1, #50	; 0x32
 8000fb8:	200a      	movs	r0, #10
 8000fba:	f001 fa5f 	bl	800247c <Paint_DrawNum>
    Paint_DrawString_CN(130, 0, "���abc", &Font12CN, BLACK, WHITE);
 8000fbe:	23ff      	movs	r3, #255	; 0xff
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <EPD_test+0x298>)
 8000fc8:	4a2a      	ldr	r2, [pc, #168]	; (8001074 <EPD_test+0x29c>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2082      	movs	r0, #130	; 0x82
 8000fce:	f001 f8bd 	bl	800214c <Paint_DrawString_CN>
    Paint_DrawString_CN(130, 20, "΢ѩ����", &Font24CN, WHITE, BLACK);
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	23ff      	movs	r3, #255	; 0xff
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <EPD_test+0x2a0>)
 8000fdc:	4a27      	ldr	r2, [pc, #156]	; (800107c <EPD_test+0x2a4>)
 8000fde:	2114      	movs	r1, #20
 8000fe0:	2082      	movs	r0, #130	; 0x82
 8000fe2:	f001 f8b3 	bl	800214c <Paint_DrawString_CN>

    printf("EPD_Display\r\n");
 8000fe6:	4826      	ldr	r0, [pc, #152]	; (8001080 <EPD_test+0x2a8>)
 8000fe8:	f005 fc44 	bl	8006874 <puts>
    EPD_4IN2_Display(BlackImage);
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f7ff fd8c 	bl	8000b0a <EPD_4IN2_Display>
	DEV_Delay_ms(2000);
 8000ff2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ff6:	f001 fff5 	bl	8002fe4 <HAL_Delay>
#endif
	printf("Support for partial refresh, but the refresh effect is not good, but it is not recommended\r\n");
 8000ffa:	4822      	ldr	r0, [pc, #136]	; (8001084 <EPD_test+0x2ac>)
 8000ffc:	f005 fc3a 	bl	8006874 <puts>
			break;
		}
    }
#endif

	EPD_4IN2_Init_4Gray();
 8001000:	f7ff fceb 	bl	80009da <EPD_4IN2_Init_4Gray>
	printf("show Gray------------------------\r\n");
 8001004:	4820      	ldr	r0, [pc, #128]	; (8001088 <EPD_test+0x2b0>)
 8001006:	f005 fc35 	bl	8006874 <puts>
	free(BlackImage);
 800100a:	6838      	ldr	r0, [r7, #0]
 800100c:	f005 fabc 	bl	8006588 <free>
	BlackImage = NULL;
 8001010:	2300      	movs	r3, #0
 8001012:	603b      	str	r3, [r7, #0]
	Imagesize = ((EPD_4IN2_WIDTH % 8 == 0)? (EPD_4IN2_WIDTH / 4 ): (EPD_4IN2_WIDTH / 4 + 1)) * EPD_4IN2_HEIGHT;
 8001014:	f247 5330 	movw	r3, #30000	; 0x7530
 8001018:	80fb      	strh	r3, [r7, #6]
	if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	4618      	mov	r0, r3
 800101e:	f005 faab 	bl	8006578 <malloc>
 8001022:	4603      	mov	r3, r0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d12f      	bne.n	800108c <EPD_test+0x2b4>
			printf("Failed to apply for black memory...\r\n");
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <EPD_test+0x268>)
 800102e:	f005 fc21 	bl	8006874 <puts>
			return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e14a      	b.n	80012ce <EPD_test+0x4f6>
 8001038:	08007600 	.word	0x08007600
 800103c:	08007614 	.word	0x08007614
 8001040:	08007630 	.word	0x08007630
 8001044:	08007658 	.word	0x08007658
 8001048:	08007668 	.word	0x08007668
 800104c:	08007ccc 	.word	0x08007ccc
 8001050:	08007680 	.word	0x08007680
 8001054:	08007698 	.word	0x08007698
 8001058:	20000014 	.word	0x20000014
 800105c:	080076ac 	.word	0x080076ac
 8001060:	20000000 	.word	0x20000000
 8001064:	080076b8 	.word	0x080076b8
 8001068:	075bcd15 	.word	0x075bcd15
 800106c:	3ade68b1 	.word	0x3ade68b1
 8001070:	20000008 	.word	0x20000008
 8001074:	080076c4 	.word	0x080076c4
 8001078:	2000001c 	.word	0x2000001c
 800107c:	080076d4 	.word	0x080076d4
 8001080:	080076e8 	.word	0x080076e8
 8001084:	080076f8 	.word	0x080076f8
 8001088:	08007754 	.word	0x08007754
	}
	Paint_NewImage(BlackImage, EPD_4IN2_WIDTH, EPD_4IN2_HEIGHT, 0, WHITE);
 800108c:	23ff      	movs	r3, #255	; 0xff
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2300      	movs	r3, #0
 8001092:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001096:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800109a:	6838      	ldr	r0, [r7, #0]
 800109c:	f000 f936 	bl	800130c <Paint_NewImage>
	Paint_SetScale(4);
 80010a0:	2004      	movs	r0, #4
 80010a2:	f000 f999 	bl	80013d8 <Paint_SetScale>
	Paint_Clear(WHITE);
 80010a6:	20ff      	movs	r0, #255	; 0xff
 80010a8:	f000 fb4c 	bl	8001744 <Paint_Clear>

	Paint_DrawPoint(10, 80, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 80010ac:	2301      	movs	r3, #1
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	2200      	movs	r2, #0
 80010b4:	2150      	movs	r1, #80	; 0x50
 80010b6:	200a      	movs	r0, #10
 80010b8:	f000 fbe4 	bl	8001884 <Paint_DrawPoint>
	Paint_DrawPoint(10, 90, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 80010bc:	2301      	movs	r3, #1
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2302      	movs	r3, #2
 80010c2:	2200      	movs	r2, #0
 80010c4:	215a      	movs	r1, #90	; 0x5a
 80010c6:	200a      	movs	r0, #10
 80010c8:	f000 fbdc 	bl	8001884 <Paint_DrawPoint>
	Paint_DrawPoint(10, 100, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 80010cc:	2301      	movs	r3, #1
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2303      	movs	r3, #3
 80010d2:	2200      	movs	r2, #0
 80010d4:	2164      	movs	r1, #100	; 0x64
 80010d6:	200a      	movs	r0, #10
 80010d8:	f000 fbd4 	bl	8001884 <Paint_DrawPoint>
	Paint_DrawLine(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80010dc:	2300      	movs	r3, #0
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	2300      	movs	r3, #0
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2378      	movs	r3, #120	; 0x78
 80010ea:	2246      	movs	r2, #70	; 0x46
 80010ec:	2146      	movs	r1, #70	; 0x46
 80010ee:	2014      	movs	r0, #20
 80010f0:	f000 fc74 	bl	80019dc <Paint_DrawLine>
	Paint_DrawLine(70, 70, 20, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80010f4:	2300      	movs	r3, #0
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	2300      	movs	r3, #0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2378      	movs	r3, #120	; 0x78
 8001102:	2214      	movs	r2, #20
 8001104:	2146      	movs	r1, #70	; 0x46
 8001106:	2046      	movs	r0, #70	; 0x46
 8001108:	f000 fc68 	bl	80019dc <Paint_DrawLine>
	Paint_DrawRectangle(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800110c:	2300      	movs	r3, #0
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2301      	movs	r3, #1
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	2300      	movs	r3, #0
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2378      	movs	r3, #120	; 0x78
 800111a:	2246      	movs	r2, #70	; 0x46
 800111c:	2146      	movs	r1, #70	; 0x46
 800111e:	2014      	movs	r0, #20
 8001120:	f000 fd08 	bl	8001b34 <Paint_DrawRectangle>
	Paint_DrawRectangle(80, 70, 130, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8001124:	2301      	movs	r3, #1
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2301      	movs	r3, #1
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2378      	movs	r3, #120	; 0x78
 8001132:	2282      	movs	r2, #130	; 0x82
 8001134:	2146      	movs	r1, #70	; 0x46
 8001136:	2050      	movs	r0, #80	; 0x50
 8001138:	f000 fcfc 	bl	8001b34 <Paint_DrawRectangle>
	Paint_DrawCircle(45, 95, 20, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800113c:	2300      	movs	r3, #0
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	2301      	movs	r3, #1
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2300      	movs	r3, #0
 8001146:	2214      	movs	r2, #20
 8001148:	215f      	movs	r1, #95	; 0x5f
 800114a:	202d      	movs	r0, #45	; 0x2d
 800114c:	f000 fd76 	bl	8001c3c <Paint_DrawCircle>
	Paint_DrawCircle(105, 95, 20, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	2301      	movs	r3, #1
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	23ff      	movs	r3, #255	; 0xff
 800115a:	2214      	movs	r2, #20
 800115c:	215f      	movs	r1, #95	; 0x5f
 800115e:	2069      	movs	r0, #105	; 0x69
 8001160:	f000 fd6c 	bl	8001c3c <Paint_DrawCircle>
	Paint_DrawLine(85, 95, 125, 95, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8001164:	2301      	movs	r3, #1
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	2300      	movs	r3, #0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	235f      	movs	r3, #95	; 0x5f
 8001172:	227d      	movs	r2, #125	; 0x7d
 8001174:	215f      	movs	r1, #95	; 0x5f
 8001176:	2055      	movs	r0, #85	; 0x55
 8001178:	f000 fc30 	bl	80019dc <Paint_DrawLine>
	Paint_DrawLine(105, 75, 105, 115, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 800117c:	2301      	movs	r3, #1
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	2301      	movs	r3, #1
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	2300      	movs	r3, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2373      	movs	r3, #115	; 0x73
 800118a:	2269      	movs	r2, #105	; 0x69
 800118c:	214b      	movs	r1, #75	; 0x4b
 800118e:	2069      	movs	r0, #105	; 0x69
 8001190:	f000 fc24 	bl	80019dc <Paint_DrawLine>
	Paint_DrawString_EN(10, 0, "waveshare", &Font16, BLACK, WHITE);
 8001194:	23ff      	movs	r3, #255	; 0xff
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	2300      	movs	r3, #0
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <EPD_test+0x500>)
 800119e:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <EPD_test+0x504>)
 80011a0:	2100      	movs	r1, #0
 80011a2:	200a      	movs	r0, #10
 80011a4:	f000 ff7e 	bl	80020a4 <Paint_DrawString_EN>
	Paint_DrawString_EN(10, 20, "hello world", &Font12, WHITE, BLACK);
 80011a8:	2300      	movs	r3, #0
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	23ff      	movs	r3, #255	; 0xff
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	4b4b      	ldr	r3, [pc, #300]	; (80012e0 <EPD_test+0x508>)
 80011b2:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <EPD_test+0x50c>)
 80011b4:	2114      	movs	r1, #20
 80011b6:	200a      	movs	r0, #10
 80011b8:	f000 ff74 	bl	80020a4 <Paint_DrawString_EN>
	Paint_DrawNum(10, 33, 123456789, &Font12, BLACK, WHITE);
 80011bc:	23ff      	movs	r3, #255	; 0xff
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	2300      	movs	r3, #0
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <EPD_test+0x508>)
 80011c6:	4a48      	ldr	r2, [pc, #288]	; (80012e8 <EPD_test+0x510>)
 80011c8:	2121      	movs	r1, #33	; 0x21
 80011ca:	200a      	movs	r0, #10
 80011cc:	f001 f956 	bl	800247c <Paint_DrawNum>
	Paint_DrawNum(10, 50, 987654321, &Font16, WHITE, BLACK);
 80011d0:	2300      	movs	r3, #0
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	23ff      	movs	r3, #255	; 0xff
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <EPD_test+0x500>)
 80011da:	4a44      	ldr	r2, [pc, #272]	; (80012ec <EPD_test+0x514>)
 80011dc:	2132      	movs	r1, #50	; 0x32
 80011de:	200a      	movs	r0, #10
 80011e0:	f001 f94c 	bl	800247c <Paint_DrawNum>
	Paint_DrawString_CN(140, 0, "���abc", &Font12CN, GRAY1, GRAY4);
 80011e4:	2300      	movs	r3, #0
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2303      	movs	r3, #3
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <EPD_test+0x518>)
 80011ee:	4a41      	ldr	r2, [pc, #260]	; (80012f4 <EPD_test+0x51c>)
 80011f0:	2100      	movs	r1, #0
 80011f2:	208c      	movs	r0, #140	; 0x8c
 80011f4:	f000 ffaa 	bl	800214c <Paint_DrawString_CN>
	Paint_DrawString_CN(140, 40, "���abc", &Font12CN, GRAY2, GRAY3);
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	2302      	movs	r3, #2
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <EPD_test+0x518>)
 8001202:	4a3c      	ldr	r2, [pc, #240]	; (80012f4 <EPD_test+0x51c>)
 8001204:	2128      	movs	r1, #40	; 0x28
 8001206:	208c      	movs	r0, #140	; 0x8c
 8001208:	f000 ffa0 	bl	800214c <Paint_DrawString_CN>
	Paint_DrawString_CN(140, 80, "���abc", &Font12CN, GRAY3, GRAY2);
 800120c:	2302      	movs	r3, #2
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	2301      	movs	r3, #1
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <EPD_test+0x518>)
 8001216:	4a37      	ldr	r2, [pc, #220]	; (80012f4 <EPD_test+0x51c>)
 8001218:	2150      	movs	r1, #80	; 0x50
 800121a:	208c      	movs	r0, #140	; 0x8c
 800121c:	f000 ff96 	bl	800214c <Paint_DrawString_CN>
	Paint_DrawString_CN(140, 120, "���abc", &Font12CN, GRAY4, GRAY1);
 8001220:	2303      	movs	r3, #3
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	2300      	movs	r3, #0
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <EPD_test+0x518>)
 800122a:	4a32      	ldr	r2, [pc, #200]	; (80012f4 <EPD_test+0x51c>)
 800122c:	2178      	movs	r1, #120	; 0x78
 800122e:	208c      	movs	r0, #140	; 0x8c
 8001230:	f000 ff8c 	bl	800214c <Paint_DrawString_CN>

	Paint_DrawString_CN(220, 0, "΢ѩ����", &Font24CN, GRAY1, GRAY4);
 8001234:	2300      	movs	r3, #0
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	2303      	movs	r3, #3
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <EPD_test+0x520>)
 800123e:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <EPD_test+0x524>)
 8001240:	2100      	movs	r1, #0
 8001242:	20dc      	movs	r0, #220	; 0xdc
 8001244:	f000 ff82 	bl	800214c <Paint_DrawString_CN>
	Paint_DrawString_CN(220, 40, "΢ѩ����", &Font24CN, GRAY2, GRAY3);
 8001248:	2301      	movs	r3, #1
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	2302      	movs	r3, #2
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <EPD_test+0x520>)
 8001252:	4a2a      	ldr	r2, [pc, #168]	; (80012fc <EPD_test+0x524>)
 8001254:	2128      	movs	r1, #40	; 0x28
 8001256:	20dc      	movs	r0, #220	; 0xdc
 8001258:	f000 ff78 	bl	800214c <Paint_DrawString_CN>
	Paint_DrawString_CN(220, 80, "΢ѩ����", &Font24CN, GRAY3, GRAY2);
 800125c:	2302      	movs	r3, #2
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2301      	movs	r3, #1
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <EPD_test+0x520>)
 8001266:	4a25      	ldr	r2, [pc, #148]	; (80012fc <EPD_test+0x524>)
 8001268:	2150      	movs	r1, #80	; 0x50
 800126a:	20dc      	movs	r0, #220	; 0xdc
 800126c:	f000 ff6e 	bl	800214c <Paint_DrawString_CN>
	Paint_DrawString_CN(220, 120, "΢ѩ����", &Font24CN, GRAY4, GRAY1);
 8001270:	2303      	movs	r3, #3
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	2300      	movs	r3, #0
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <EPD_test+0x520>)
 800127a:	4a20      	ldr	r2, [pc, #128]	; (80012fc <EPD_test+0x524>)
 800127c:	2178      	movs	r1, #120	; 0x78
 800127e:	20dc      	movs	r0, #220	; 0xdc
 8001280:	f000 ff64 	bl	800214c <Paint_DrawString_CN>

	EPD_4IN2_4GrayDisplay(BlackImage);
 8001284:	6838      	ldr	r0, [r7, #0]
 8001286:	f7ff fc93 	bl	8000bb0 <EPD_4IN2_4GrayDisplay>
	DEV_Delay_ms(500);
 800128a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128e:	f001 fea9 	bl	8002fe4 <HAL_Delay>

	Paint_Clear(WHITE);
 8001292:	20ff      	movs	r0, #255	; 0xff
 8001294:	f000 fa56 	bl	8001744 <Paint_Clear>
  EPD_4IN2_4GrayDisplay(gImage_4in2_4Gray);
 8001298:	4819      	ldr	r0, [pc, #100]	; (8001300 <EPD_test+0x528>)
 800129a:	f7ff fc89 	bl	8000bb0 <EPD_4IN2_4GrayDisplay>
	DEV_Delay_ms(2000);
 800129e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012a2:	f001 fe9f 	bl	8002fe4 <HAL_Delay>


	EPD_4IN2_Clear();
 80012a6:	f7ff fbe8 	bl	8000a7a <EPD_4IN2_Clear>

	EPD_4IN2_Init_Fast();
 80012aa:	f7ff fb47 	bl	800093c <EPD_4IN2_Init_Fast>
	printf("Goto Sleep...\r\n");
 80012ae:	4815      	ldr	r0, [pc, #84]	; (8001304 <EPD_test+0x52c>)
 80012b0:	f005 fae0 	bl	8006874 <puts>
	EPD_4IN2_Sleep();
 80012b4:	f7ff fd7a 	bl	8000dac <EPD_4IN2_Sleep>
	free(BlackImage);
 80012b8:	6838      	ldr	r0, [r7, #0]
 80012ba:	f005 f965 	bl	8006588 <free>
	BlackImage = NULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]

	// close 5V
	printf("close 5V, Module enters 0 power consumption ...\r\n");
 80012c2:	4811      	ldr	r0, [pc, #68]	; (8001308 <EPD_test+0x530>)
 80012c4:	f005 fad6 	bl	8006874 <puts>
	DEV_Module_Exit();
 80012c8:	f7ff f98c 	bl	80005e4 <DEV_Module_Exit>

	return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000014 	.word	0x20000014
 80012dc:	080076ac 	.word	0x080076ac
 80012e0:	20000000 	.word	0x20000000
 80012e4:	080076b8 	.word	0x080076b8
 80012e8:	075bcd15 	.word	0x075bcd15
 80012ec:	3ade68b1 	.word	0x3ade68b1
 80012f0:	20000008 	.word	0x20000008
 80012f4:	080076c4 	.word	0x080076c4
 80012f8:	2000001c 	.word	0x2000001c
 80012fc:	080076d4 	.word	0x080076d4
 8001300:	0800b764 	.word	0x0800b764
 8001304:	08007778 	.word	0x08007778
 8001308:	08007788 	.word	0x08007788

0800130c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	4608      	mov	r0, r1
 8001316:	4611      	mov	r1, r2
 8001318:	461a      	mov	r2, r3
 800131a:	4603      	mov	r3, r0
 800131c:	817b      	strh	r3, [r7, #10]
 800131e:	460b      	mov	r3, r1
 8001320:	813b      	strh	r3, [r7, #8]
 8001322:	4613      	mov	r3, r2
 8001324:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <Paint_NewImage+0xa8>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800132c:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <Paint_NewImage+0xa8>)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8001332:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <Paint_NewImage+0xa8>)
 8001334:	897b      	ldrh	r3, [r7, #10]
 8001336:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8001338:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <Paint_NewImage+0xa8>)
 800133a:	893b      	ldrh	r3, [r7, #8]
 800133c:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <Paint_NewImage+0xa8>)
 8001340:	8b3b      	ldrh	r3, [r7, #24]
 8001342:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <Paint_NewImage+0xa8>)
 8001346:	2202      	movs	r2, #2
 8001348:	82da      	strh	r2, [r3, #22]

    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800134a:	897b      	ldrh	r3, [r7, #10]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	b29b      	uxth	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d103      	bne.n	800135e <Paint_NewImage+0x52>
 8001356:	897b      	ldrh	r3, [r7, #10]
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	b29b      	uxth	r3, r3
 800135c:	e004      	b.n	8001368 <Paint_NewImage+0x5c>
 800135e:	897b      	ldrh	r3, [r7, #10]
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	b29b      	uxth	r3, r3
 8001364:	3301      	adds	r3, #1
 8001366:	b29b      	uxth	r3, r3
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <Paint_NewImage+0xa8>)
 800136a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <Paint_NewImage+0xa8>)
 800136e:	893b      	ldrh	r3, [r7, #8]
 8001370:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    Paint.Rotate = Rotate;
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <Paint_NewImage+0xa8>)
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <Paint_NewImage+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	821a      	strh	r2, [r3, #16]

    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <Paint_NewImage+0x7e>
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	2bb4      	cmp	r3, #180	; 0xb4
 8001388:	d106      	bne.n	8001398 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <Paint_NewImage+0xa8>)
 800138c:	897b      	ldrh	r3, [r7, #10]
 800138e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <Paint_NewImage+0xa8>)
 8001392:	893b      	ldrh	r3, [r7, #8]
 8001394:	80d3      	strh	r3, [r2, #6]
 8001396:	e006      	b.n	80013a6 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <Paint_NewImage+0xa8>)
 800139a:	893b      	ldrh	r3, [r7, #8]
 800139c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <Paint_NewImage+0xa8>)
 80013a0:	897b      	ldrh	r3, [r7, #10]
 80013a2:	80d3      	strh	r3, [r2, #6]
    }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	200000b4 	.word	0x200000b4

080013b8 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <Paint_SelectImage+0x1c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	200000b4 	.word	0x200000b4

080013d8 <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d118      	bne.n	800141a <Paint_SetScale+0x42>
        Paint.Scale = scale;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <Paint_SetScale+0xc8>)
 80013ee:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 80013f0:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <Paint_SetScale+0xc8>)
 80013f2:	891b      	ldrh	r3, [r3, #8]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d104      	bne.n	8001408 <Paint_SetScale+0x30>
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <Paint_SetScale+0xc8>)
 8001400:	891b      	ldrh	r3, [r3, #8]
 8001402:	08db      	lsrs	r3, r3, #3
 8001404:	b29b      	uxth	r3, r3
 8001406:	e005      	b.n	8001414 <Paint_SetScale+0x3c>
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <Paint_SetScale+0xc8>)
 800140a:	891b      	ldrh	r3, [r3, #8]
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	b29b      	uxth	r3, r3
 8001410:	3301      	adds	r3, #1
 8001412:	b29b      	uxth	r3, r3
 8001414:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <Paint_SetScale+0xc8>)
 8001416:	8253      	strh	r3, [r2, #18]
				Paint.WidthByte = (Paint.WidthMemory % 2 == 0)? (Paint.WidthMemory / 2 ): (Paint.WidthMemory / 2 + 1);;
		}else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 7\r\n");
    }
}
 8001418:	e03d      	b.n	8001496 <Paint_SetScale+0xbe>
    }else if(scale == 4){
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d118      	bne.n	8001452 <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	b29a      	uxth	r2, r3
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <Paint_SetScale+0xc8>)
 8001426:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <Paint_SetScale+0xc8>)
 800142a:	891b      	ldrh	r3, [r3, #8]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	b29b      	uxth	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d104      	bne.n	8001440 <Paint_SetScale+0x68>
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <Paint_SetScale+0xc8>)
 8001438:	891b      	ldrh	r3, [r3, #8]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	b29b      	uxth	r3, r3
 800143e:	e005      	b.n	800144c <Paint_SetScale+0x74>
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <Paint_SetScale+0xc8>)
 8001442:	891b      	ldrh	r3, [r3, #8]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	b29b      	uxth	r3, r3
 8001448:	3301      	adds	r3, #1
 800144a:	b29b      	uxth	r3, r3
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <Paint_SetScale+0xc8>)
 800144e:	8253      	strh	r3, [r2, #18]
}
 8001450:	e021      	b.n	8001496 <Paint_SetScale+0xbe>
    }else if(scale == 7){//Only applicable with 5in65 e-Paper
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b07      	cmp	r3, #7
 8001456:	d118      	bne.n	800148a <Paint_SetScale+0xb2>
				Paint.Scale = scale;
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	b29a      	uxth	r2, r3
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <Paint_SetScale+0xc8>)
 800145e:	82da      	strh	r2, [r3, #22]
				Paint.WidthByte = (Paint.WidthMemory % 2 == 0)? (Paint.WidthMemory / 2 ): (Paint.WidthMemory / 2 + 1);;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <Paint_SetScale+0xc8>)
 8001462:	891b      	ldrh	r3, [r3, #8]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	b29b      	uxth	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d104      	bne.n	8001478 <Paint_SetScale+0xa0>
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <Paint_SetScale+0xc8>)
 8001470:	891b      	ldrh	r3, [r3, #8]
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	b29b      	uxth	r3, r3
 8001476:	e005      	b.n	8001484 <Paint_SetScale+0xac>
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <Paint_SetScale+0xc8>)
 800147a:	891b      	ldrh	r3, [r3, #8]
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	b29b      	uxth	r3, r3
 8001480:	3301      	adds	r3, #1
 8001482:	b29b      	uxth	r3, r3
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <Paint_SetScale+0xc8>)
 8001486:	8253      	strh	r3, [r2, #18]
}
 8001488:	e005      	b.n	8001496 <Paint_SetScale+0xbe>
        Debug("Set Scale Input parameter error\r\n");
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <Paint_SetScale+0xcc>)
 800148c:	f005 f9f2 	bl	8006874 <puts>
        Debug("Scale Only support: 2 4 7\r\n");
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <Paint_SetScale+0xd0>)
 8001492:	f005 f9ef 	bl	8006874 <puts>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200000b4 	.word	0x200000b4
 80014a4:	08007800 	.word	0x08007800
 80014a8:	08007828 	.word	0x08007828

080014ac <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	460b      	mov	r3, r1
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80014be:	4b9f      	ldr	r3, [pc, #636]	; (800173c <Paint_SetPixel+0x290>)
 80014c0:	889b      	ldrh	r3, [r3, #4]
 80014c2:	88fa      	ldrh	r2, [r7, #6]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d804      	bhi.n	80014d2 <Paint_SetPixel+0x26>
 80014c8:	4b9c      	ldr	r3, [pc, #624]	; (800173c <Paint_SetPixel+0x290>)
 80014ca:	88db      	ldrh	r3, [r3, #6]
 80014cc:	88ba      	ldrh	r2, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d903      	bls.n	80014da <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 80014d2:	489b      	ldr	r0, [pc, #620]	; (8001740 <Paint_SetPixel+0x294>)
 80014d4:	f005 f9ce 	bl	8006874 <puts>
        return;
 80014d8:	e12d      	b.n	8001736 <Paint_SetPixel+0x28a>
    }
    UWORD X, Y;

    switch(Paint.Rotate) {
 80014da:	4b98      	ldr	r3, [pc, #608]	; (800173c <Paint_SetPixel+0x290>)
 80014dc:	89db      	ldrh	r3, [r3, #14]
 80014de:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80014e2:	d02b      	beq.n	800153c <Paint_SetPixel+0x90>
 80014e4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80014e8:	f300 8122 	bgt.w	8001730 <Paint_SetPixel+0x284>
 80014ec:	2bb4      	cmp	r3, #180	; 0xb4
 80014ee:	d016      	beq.n	800151e <Paint_SetPixel+0x72>
 80014f0:	2bb4      	cmp	r3, #180	; 0xb4
 80014f2:	f300 811d 	bgt.w	8001730 <Paint_SetPixel+0x284>
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <Paint_SetPixel+0x54>
 80014fa:	2b5a      	cmp	r3, #90	; 0x5a
 80014fc:	d005      	beq.n	800150a <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80014fe:	e117      	b.n	8001730 <Paint_SetPixel+0x284>
        X = Xpoint;
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001508:	e022      	b.n	8001550 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 800150a:	4b8c      	ldr	r3, [pc, #560]	; (800173c <Paint_SetPixel+0x290>)
 800150c:	891a      	ldrh	r2, [r3, #8]
 800150e:	88bb      	ldrh	r3, [r7, #4]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	3b01      	subs	r3, #1
 8001516:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800151c:	e018      	b.n	8001550 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 800151e:	4b87      	ldr	r3, [pc, #540]	; (800173c <Paint_SetPixel+0x290>)
 8001520:	891a      	ldrh	r2, [r3, #8]
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	b29b      	uxth	r3, r3
 8001528:	3b01      	subs	r3, #1
 800152a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 800152c:	4b83      	ldr	r3, [pc, #524]	; (800173c <Paint_SetPixel+0x290>)
 800152e:	895a      	ldrh	r2, [r3, #10]
 8001530:	88bb      	ldrh	r3, [r7, #4]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	b29b      	uxth	r3, r3
 8001536:	3b01      	subs	r3, #1
 8001538:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800153a:	e009      	b.n	8001550 <Paint_SetPixel+0xa4>
        X = Ypoint;
 800153c:	88bb      	ldrh	r3, [r7, #4]
 800153e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8001540:	4b7e      	ldr	r3, [pc, #504]	; (800173c <Paint_SetPixel+0x290>)
 8001542:	895a      	ldrh	r2, [r3, #10]
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	b29b      	uxth	r3, r3
 800154a:	3b01      	subs	r3, #1
 800154c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800154e:	bf00      	nop
    }

    switch(Paint.Mirror) {
 8001550:	4b7a      	ldr	r3, [pc, #488]	; (800173c <Paint_SetPixel+0x290>)
 8001552:	8a1b      	ldrh	r3, [r3, #16]
 8001554:	2b03      	cmp	r3, #3
 8001556:	f200 80ed 	bhi.w	8001734 <Paint_SetPixel+0x288>
 800155a:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <Paint_SetPixel+0xb4>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	080015af 	.word	0x080015af
 8001564:	08001571 	.word	0x08001571
 8001568:	08001581 	.word	0x08001581
 800156c:	08001591 	.word	0x08001591
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8001570:	4b72      	ldr	r3, [pc, #456]	; (800173c <Paint_SetPixel+0x290>)
 8001572:	891a      	ldrh	r2, [r3, #8]
 8001574:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	b29b      	uxth	r3, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 800157e:	e017      	b.n	80015b0 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8001580:	4b6e      	ldr	r3, [pc, #440]	; (800173c <Paint_SetPixel+0x290>)
 8001582:	895a      	ldrh	r2, [r3, #10]
 8001584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	b29b      	uxth	r3, r3
 800158a:	3b01      	subs	r3, #1
 800158c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800158e:	e00f      	b.n	80015b0 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8001590:	4b6a      	ldr	r3, [pc, #424]	; (800173c <Paint_SetPixel+0x290>)
 8001592:	891a      	ldrh	r2, [r3, #8]
 8001594:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 800159e:	4b67      	ldr	r3, [pc, #412]	; (800173c <Paint_SetPixel+0x290>)
 80015a0:	895a      	ldrh	r2, [r3, #10]
 80015a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3b01      	subs	r3, #1
 80015aa:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80015ac:	e000      	b.n	80015b0 <Paint_SetPixel+0x104>
        break;
 80015ae:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80015b0:	4b62      	ldr	r3, [pc, #392]	; (800173c <Paint_SetPixel+0x290>)
 80015b2:	891b      	ldrh	r3, [r3, #8]
 80015b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d804      	bhi.n	80015c4 <Paint_SetPixel+0x118>
 80015ba:	4b60      	ldr	r3, [pc, #384]	; (800173c <Paint_SetPixel+0x290>)
 80015bc:	895b      	ldrh	r3, [r3, #10]
 80015be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d903      	bls.n	80015cc <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 80015c4:	485e      	ldr	r0, [pc, #376]	; (8001740 <Paint_SetPixel+0x294>)
 80015c6:	f005 f955 	bl	8006874 <puts>
        return;
 80015ca:	e0b4      	b.n	8001736 <Paint_SetPixel+0x28a>
    }

    if(Paint.Scale == 2){
 80015cc:	4b5b      	ldr	r3, [pc, #364]	; (800173c <Paint_SetPixel+0x290>)
 80015ce:	8adb      	ldrh	r3, [r3, #22]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d139      	bne.n	8001648 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80015d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015de:	4a57      	ldr	r2, [pc, #348]	; (800173c <Paint_SetPixel+0x290>)
 80015e0:	8a52      	ldrh	r2, [r2, #18]
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	440b      	add	r3, r1
 80015e8:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80015ea:	4b54      	ldr	r3, [pc, #336]	; (800173c <Paint_SetPixel+0x290>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4413      	add	r3, r2
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d113      	bne.n	8001624 <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80015fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	fa42 f303 	asr.w	r3, r2, r3
 8001608:	b25b      	sxtb	r3, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	b25a      	sxtb	r2, r3
 800160e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001612:	4013      	ands	r3, r2
 8001614:	b259      	sxtb	r1, r3
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <Paint_SetPixel+0x290>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4413      	add	r3, r2
 800161e:	b2ca      	uxtb	r2, r1
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	e088      	b.n	8001736 <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8001624:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	fa42 f303 	asr.w	r3, r2, r3
 8001630:	b25a      	sxtb	r2, r3
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4313      	orrs	r3, r2
 8001638:	b259      	sxtb	r1, r3
 800163a:	4b40      	ldr	r3, [pc, #256]	; (800173c <Paint_SetPixel+0x290>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4413      	add	r3, r2
 8001642:	b2ca      	uxtb	r2, r1
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	e076      	b.n	8001736 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8001648:	4b3c      	ldr	r3, [pc, #240]	; (800173c <Paint_SetPixel+0x290>)
 800164a:	8adb      	ldrh	r3, [r3, #22]
 800164c:	2b04      	cmp	r3, #4
 800164e:	d137      	bne.n	80016c0 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8001650:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	b29b      	uxth	r3, r3
 8001656:	4619      	mov	r1, r3
 8001658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800165a:	4a38      	ldr	r2, [pc, #224]	; (800173c <Paint_SetPixel+0x290>)
 800165c:	8a52      	ldrh	r2, [r2, #18]
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	440b      	add	r3, r1
 8001664:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <Paint_SetPixel+0x290>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4413      	add	r3, r2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	75fb      	strb	r3, [r7, #23]

        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800167a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	22c0      	movs	r2, #192	; 0xc0
 8001684:	fa42 f303 	asr.w	r3, r2, r3
 8001688:	b25b      	sxtb	r3, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	b25a      	sxtb	r2, r3
 800168e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001692:	4013      	ands	r3, r2
 8001694:	b25b      	sxtb	r3, r3
 8001696:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	019a      	lsls	r2, r3, #6
 800169c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa42 f303 	asr.w	r3, r2, r3
 80016a8:	b25a      	sxtb	r2, r3
 80016aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b259      	sxtb	r1, r3
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <Paint_SetPixel+0x290>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4413      	add	r3, r2
 80016ba:	b2ca      	uxtb	r2, r1
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	e03a      	b.n	8001736 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <Paint_SetPixel+0x290>)
 80016c2:	8adb      	ldrh	r3, [r3, #22]
 80016c4:	2b07      	cmp	r3, #7
 80016c6:	d136      	bne.n	8001736 <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80016c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4619      	mov	r1, r3
 80016d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016d2:	4a1a      	ldr	r2, [pc, #104]	; (800173c <Paint_SetPixel+0x290>)
 80016d4:	8a52      	ldrh	r2, [r2, #18]
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	440b      	add	r3, r1
 80016dc:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <Paint_SetPixel+0x290>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	4413      	add	r3, r2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80016ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	22f0      	movs	r2, #240	; 0xf0
 80016f4:	fa42 f303 	asr.w	r3, r2, r3
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	b25a      	sxtb	r2, r3
 80016fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001702:	4013      	ands	r3, r2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	011a      	lsls	r2, r3, #4
 800170c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	fa42 f303 	asr.w	r3, r2, r3
 8001718:	b25a      	sxtb	r2, r3
 800171a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800171e:	4313      	orrs	r3, r2
 8001720:	b259      	sxtb	r1, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <Paint_SetPixel+0x290>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	4413      	add	r3, r2
 800172a:	b2ca      	uxtb	r2, r1
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	e002      	b.n	8001736 <Paint_SetPixel+0x28a>
        return;
 8001730:	bf00      	nop
 8001732:	e000      	b.n	8001736 <Paint_SetPixel+0x28a>
        return;
 8001734:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8001736:	3728      	adds	r7, #40	; 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200000b4 	.word	0x200000b4
 8001740:	080078e4 	.word	0x080078e4

08001744 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 800174e:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <Paint_Clear+0x13c>)
 8001750:	8adb      	ldrh	r3, [r3, #22]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d125      	bne.n	80017a2 <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001756:	2300      	movs	r3, #0
 8001758:	83fb      	strh	r3, [r7, #30]
 800175a:	e01c      	b.n	8001796 <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800175c:	2300      	movs	r3, #0
 800175e:	83bb      	strh	r3, [r7, #28]
 8001760:	e011      	b.n	8001786 <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001762:	8bba      	ldrh	r2, [r7, #28]
 8001764:	8bfb      	ldrh	r3, [r7, #30]
 8001766:	4946      	ldr	r1, [pc, #280]	; (8001880 <Paint_Clear+0x13c>)
 8001768:	8a49      	ldrh	r1, [r1, #18]
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8001772:	4b43      	ldr	r3, [pc, #268]	; (8001880 <Paint_Clear+0x13c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	4413      	add	r3, r2
 800177a:	88fa      	ldrh	r2, [r7, #6]
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001780:	8bbb      	ldrh	r3, [r7, #28]
 8001782:	3301      	adds	r3, #1
 8001784:	83bb      	strh	r3, [r7, #28]
 8001786:	4b3e      	ldr	r3, [pc, #248]	; (8001880 <Paint_Clear+0x13c>)
 8001788:	8a5b      	ldrh	r3, [r3, #18]
 800178a:	8bba      	ldrh	r2, [r7, #28]
 800178c:	429a      	cmp	r2, r3
 800178e:	d3e8      	bcc.n	8001762 <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001790:	8bfb      	ldrh	r3, [r7, #30]
 8001792:	3301      	adds	r3, #1
 8001794:	83fb      	strh	r3, [r7, #30]
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <Paint_Clear+0x13c>)
 8001798:	8a9b      	ldrh	r3, [r3, #20]
 800179a:	8bfa      	ldrh	r2, [r7, #30]
 800179c:	429a      	cmp	r2, r3
 800179e:	d3dd      	bcc.n	800175c <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}
	}
}
 80017a0:	e068      	b.n	8001874 <Paint_Clear+0x130>
    }else if(Paint.Scale == 4) {
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <Paint_Clear+0x13c>)
 80017a4:	8adb      	ldrh	r3, [r3, #22]
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d135      	bne.n	8001816 <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80017aa:	2300      	movs	r3, #0
 80017ac:	837b      	strh	r3, [r7, #26]
 80017ae:	e02c      	b.n	800180a <Paint_Clear+0xc6>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	833b      	strh	r3, [r7, #24]
 80017b4:	e021      	b.n	80017fa <Paint_Clear+0xb6>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80017b6:	8b3a      	ldrh	r2, [r7, #24]
 80017b8:	8b7b      	ldrh	r3, [r7, #26]
 80017ba:	4931      	ldr	r1, [pc, #196]	; (8001880 <Paint_Clear+0x13c>)
 80017bc:	8a49      	ldrh	r1, [r1, #18]
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	019b      	lsls	r3, r3, #6
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b25a      	sxtb	r2, r3
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	b25a      	sxtb	r2, r3
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b259      	sxtb	r1, r3
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <Paint_Clear+0x13c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	b2ca      	uxtb	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80017f4:	8b3b      	ldrh	r3, [r7, #24]
 80017f6:	3301      	adds	r3, #1
 80017f8:	833b      	strh	r3, [r7, #24]
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <Paint_Clear+0x13c>)
 80017fc:	8a5b      	ldrh	r3, [r3, #18]
 80017fe:	8b3a      	ldrh	r2, [r7, #24]
 8001800:	429a      	cmp	r2, r3
 8001802:	d3d8      	bcc.n	80017b6 <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001804:	8b7b      	ldrh	r3, [r7, #26]
 8001806:	3301      	adds	r3, #1
 8001808:	837b      	strh	r3, [r7, #26]
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <Paint_Clear+0x13c>)
 800180c:	8a9b      	ldrh	r3, [r3, #20]
 800180e:	8b7a      	ldrh	r2, [r7, #26]
 8001810:	429a      	cmp	r2, r3
 8001812:	d3cd      	bcc.n	80017b0 <Paint_Clear+0x6c>
}
 8001814:	e02e      	b.n	8001874 <Paint_Clear+0x130>
	}else if(Paint.Scale == 7) {
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <Paint_Clear+0x13c>)
 8001818:	8adb      	ldrh	r3, [r3, #22]
 800181a:	2b07      	cmp	r3, #7
 800181c:	d12a      	bne.n	8001874 <Paint_Clear+0x130>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800181e:	2300      	movs	r3, #0
 8001820:	82fb      	strh	r3, [r7, #22]
 8001822:	e022      	b.n	800186a <Paint_Clear+0x126>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001824:	2300      	movs	r3, #0
 8001826:	82bb      	strh	r3, [r7, #20]
 8001828:	e017      	b.n	800185a <Paint_Clear+0x116>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800182a:	8aba      	ldrh	r2, [r7, #20]
 800182c:	8afb      	ldrh	r3, [r7, #22]
 800182e:	4914      	ldr	r1, [pc, #80]	; (8001880 <Paint_Clear+0x13c>)
 8001830:	8a49      	ldrh	r1, [r1, #18]
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	b25a      	sxtb	r2, r3
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	b25b      	sxtb	r3, r3
 8001844:	4313      	orrs	r3, r2
 8001846:	b259      	sxtb	r1, r3
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <Paint_Clear+0x13c>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4413      	add	r3, r2
 8001850:	b2ca      	uxtb	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001854:	8abb      	ldrh	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	82bb      	strh	r3, [r7, #20]
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <Paint_Clear+0x13c>)
 800185c:	8a5b      	ldrh	r3, [r3, #18]
 800185e:	8aba      	ldrh	r2, [r7, #20]
 8001860:	429a      	cmp	r2, r3
 8001862:	d3e2      	bcc.n	800182a <Paint_Clear+0xe6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001864:	8afb      	ldrh	r3, [r7, #22]
 8001866:	3301      	adds	r3, #1
 8001868:	82fb      	strh	r3, [r7, #22]
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <Paint_Clear+0x13c>)
 800186c:	8a9b      	ldrh	r3, [r3, #20]
 800186e:	8afa      	ldrh	r2, [r7, #22]
 8001870:	429a      	cmp	r2, r3
 8001872:	d3d7      	bcc.n	8001824 <Paint_Clear+0xe0>
}
 8001874:	bf00      	nop
 8001876:	3724      	adds	r7, #36	; 0x24
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	200000b4 	.word	0x200000b4

08001884 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4623      	mov	r3, r4
 8001894:	80fb      	strh	r3, [r7, #6]
 8001896:	4603      	mov	r3, r0
 8001898:	80bb      	strh	r3, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]
 800189e:	4613      	mov	r3, r2
 80018a0:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80018a2:	4b4a      	ldr	r3, [pc, #296]	; (80019cc <Paint_DrawPoint+0x148>)
 80018a4:	889b      	ldrh	r3, [r3, #4]
 80018a6:	88fa      	ldrh	r2, [r7, #6]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d804      	bhi.n	80018b6 <Paint_DrawPoint+0x32>
 80018ac:	4b47      	ldr	r3, [pc, #284]	; (80019cc <Paint_DrawPoint+0x148>)
 80018ae:	88db      	ldrh	r3, [r3, #6]
 80018b0:	88ba      	ldrh	r2, [r7, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d911      	bls.n	80018da <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 80018b6:	4846      	ldr	r0, [pc, #280]	; (80019d0 <Paint_DrawPoint+0x14c>)
 80018b8:	f004 ffdc 	bl	8006874 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	4a43      	ldr	r2, [pc, #268]	; (80019cc <Paint_DrawPoint+0x148>)
 80018c0:	8892      	ldrh	r2, [r2, #4]
 80018c2:	4619      	mov	r1, r3
 80018c4:	4843      	ldr	r0, [pc, #268]	; (80019d4 <Paint_DrawPoint+0x150>)
 80018c6:	f004 ff4f 	bl	8006768 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	4a3f      	ldr	r2, [pc, #252]	; (80019cc <Paint_DrawPoint+0x148>)
 80018ce:	88d2      	ldrh	r2, [r2, #6]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4841      	ldr	r0, [pc, #260]	; (80019d8 <Paint_DrawPoint+0x154>)
 80018d4:	f004 ff48 	bl	8006768 <iprintf>
        return;
 80018d8:	e074      	b.n	80019c4 <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 80018da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d144      	bne.n	800196c <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	81fb      	strh	r3, [r7, #14]
 80018e6:	e039      	b.n	800195c <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80018e8:	2300      	movs	r3, #0
 80018ea:	81bb      	strh	r3, [r7, #12]
 80018ec:	e029      	b.n	8001942 <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 80018ee:	88fa      	ldrh	r2, [r7, #6]
 80018f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018f4:	441a      	add	r2, r3
 80018f6:	787b      	ldrb	r3, [r7, #1]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db28      	blt.n	8001950 <Paint_DrawPoint+0xcc>
 80018fe:	88ba      	ldrh	r2, [r7, #4]
 8001900:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001904:	441a      	add	r2, r3
 8001906:	787b      	ldrb	r3, [r7, #1]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	db20      	blt.n	8001950 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800190e:	89fa      	ldrh	r2, [r7, #14]
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	4413      	add	r3, r2
 8001914:	b29a      	uxth	r2, r3
 8001916:	787b      	ldrb	r3, [r7, #1]
 8001918:	b29b      	uxth	r3, r3
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	b298      	uxth	r0, r3
 800191e:	89ba      	ldrh	r2, [r7, #12]
 8001920:	88bb      	ldrh	r3, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	b29a      	uxth	r2, r3
 8001926:	787b      	ldrb	r3, [r7, #1]
 8001928:	b29b      	uxth	r3, r3
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	b29b      	uxth	r3, r3
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	4619      	mov	r1, r3
 8001932:	f7ff fdbb 	bl	80014ac <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001936:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800193a:	b29b      	uxth	r3, r3
 800193c:	3301      	adds	r3, #1
 800193e:	b29b      	uxth	r3, r3
 8001940:	81bb      	strh	r3, [r7, #12]
 8001942:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001946:	787b      	ldrb	r3, [r7, #1]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	3b01      	subs	r3, #1
 800194c:	429a      	cmp	r2, r3
 800194e:	dbce      	blt.n	80018ee <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8001950:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001954:	b29b      	uxth	r3, r3
 8001956:	3301      	adds	r3, #1
 8001958:	b29b      	uxth	r3, r3
 800195a:	81fb      	strh	r3, [r7, #14]
 800195c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	3b01      	subs	r3, #1
 8001966:	429a      	cmp	r2, r3
 8001968:	dbbe      	blt.n	80018e8 <Paint_DrawPoint+0x64>
 800196a:	e02b      	b.n	80019c4 <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800196c:	2300      	movs	r3, #0
 800196e:	81fb      	strh	r3, [r7, #14]
 8001970:	e023      	b.n	80019ba <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001972:	2300      	movs	r3, #0
 8001974:	81bb      	strh	r3, [r7, #12]
 8001976:	e015      	b.n	80019a4 <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8001978:	89fa      	ldrh	r2, [r7, #14]
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	4413      	add	r3, r2
 800197e:	b29b      	uxth	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	b298      	uxth	r0, r3
 8001984:	89ba      	ldrh	r2, [r7, #12]
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	b29b      	uxth	r3, r3
 800198c:	3b01      	subs	r3, #1
 800198e:	b29b      	uxth	r3, r3
 8001990:	887a      	ldrh	r2, [r7, #2]
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff fd8a 	bl	80014ac <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001998:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800199c:	b29b      	uxth	r3, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	81bb      	strh	r3, [r7, #12]
 80019a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dbe4      	blt.n	8001978 <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80019ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	81fb      	strh	r3, [r7, #14]
 80019ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019be:	787b      	ldrb	r3, [r7, #1]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbd6      	blt.n	8001972 <Paint_DrawPoint+0xee>
            }
        }
    }
}
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200000b4 	.word	0x200000b4
 80019d0:	0800790c 	.word	0x0800790c
 80019d4:	0800794c 	.word	0x0800794c
 80019d8:	08007970 	.word	0x08007970

080019dc <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b08d      	sub	sp, #52	; 0x34
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	4604      	mov	r4, r0
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4623      	mov	r3, r4
 80019ec:	80fb      	strh	r3, [r7, #6]
 80019ee:	4603      	mov	r3, r0
 80019f0:	80bb      	strh	r3, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	807b      	strh	r3, [r7, #2]
 80019f6:	4613      	mov	r3, r2
 80019f8:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80019fa:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <Paint_DrawLine+0x14c>)
 80019fc:	889b      	ldrh	r3, [r3, #4]
 80019fe:	88fa      	ldrh	r2, [r7, #6]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d80e      	bhi.n	8001a22 <Paint_DrawLine+0x46>
 8001a04:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <Paint_DrawLine+0x14c>)
 8001a06:	88db      	ldrh	r3, [r3, #6]
 8001a08:	88ba      	ldrh	r2, [r7, #4]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d809      	bhi.n	8001a22 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001a0e:	4b46      	ldr	r3, [pc, #280]	; (8001b28 <Paint_DrawLine+0x14c>)
 8001a10:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d804      	bhi.n	8001a22 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <Paint_DrawLine+0x14c>)
 8001a1a:	88db      	ldrh	r3, [r3, #6]
 8001a1c:	883a      	ldrh	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d903      	bls.n	8001a2a <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8001a22:	4842      	ldr	r0, [pc, #264]	; (8001b2c <Paint_DrawLine+0x150>)
 8001a24:	f004 ff26 	bl	8006874 <puts>
        return;
 8001a28:	e07a      	b.n	8001b20 <Paint_DrawLine+0x144>
    }

    UWORD Xpoint = Xstart;
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bfb8      	it	lt
 8001a3c:	425b      	neglt	r3, r3
 8001a3e:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001a40:	883a      	ldrh	r2, [r7, #0]
 8001a42:	88bb      	ldrh	r3, [r7, #4]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	bfb8      	it	lt
 8001a4a:	425b      	neglt	r3, r3
 8001a4c:	425b      	negs	r3, r3
 8001a4e:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8001a50:	88fa      	ldrh	r2, [r7, #6]
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d201      	bcs.n	8001a5c <Paint_DrawLine+0x80>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e001      	b.n	8001a60 <Paint_DrawLine+0x84>
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a60:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8001a62:	88ba      	ldrh	r2, [r7, #4]
 8001a64:	883b      	ldrh	r3, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d201      	bcs.n	8001a6e <Paint_DrawLine+0x92>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e001      	b.n	8001a72 <Paint_DrawLine+0x96>
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	4413      	add	r3, r2
 8001a7a:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8001a80:	7ffb      	ldrb	r3, [r7, #31]
 8001a82:	3301      	adds	r3, #1
 8001a84:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8001a86:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d117      	bne.n	8001abe <Paint_DrawLine+0xe2>
 8001a8e:	7ffa      	ldrb	r2, [r7, #31]
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <Paint_DrawLine+0x154>)
 8001a92:	fba3 1302 	umull	r1, r3, r3, r2
 8001a96:	0859      	lsrs	r1, r3, #1
 8001a98:	460b      	mov	r3, r1
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	440b      	add	r3, r1
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10b      	bne.n	8001abe <Paint_DrawLine+0xe2>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8001aa6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001aaa:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001aac:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001aae:	2201      	movs	r2, #1
 8001ab0:	9200      	str	r2, [sp, #0]
 8001ab2:	22ff      	movs	r2, #255	; 0xff
 8001ab4:	f7ff fee6 	bl	8001884 <Paint_DrawPoint>
            Dotted_Len = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	77fb      	strb	r3, [r7, #31]
 8001abc:	e008      	b.n	8001ad0 <Paint_DrawLine+0xf4>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8001abe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001ac2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001ac4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001ac6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001ac8:	2401      	movs	r4, #1
 8001aca:	9400      	str	r4, [sp, #0]
 8001acc:	f7ff feda 	bl	8001884 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dc0c      	bgt.n	8001af4 <Paint_DrawLine+0x118>
            if (Xpoint == Xend)
 8001ada:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d01b      	beq.n	8001b1a <Paint_DrawLine+0x13e>
                break;
            Esp += dy;
 8001ae2:	6a3a      	ldr	r2, [r7, #32]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001af0:	4413      	add	r3, r2
 8001af2:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	dbc0      	blt.n	8001a80 <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 8001afe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b00:	883b      	ldrh	r3, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d00b      	beq.n	8001b1e <Paint_DrawLine+0x142>
                break;
            Esp += dx;
 8001b06:	6a3a      	ldr	r2, [r7, #32]
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b14:	4413      	add	r3, r2
 8001b16:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8001b18:	e7b2      	b.n	8001a80 <Paint_DrawLine+0xa4>
                break;
 8001b1a:	bf00      	nop
 8001b1c:	e000      	b.n	8001b20 <Paint_DrawLine+0x144>
                break;
 8001b1e:	bf00      	nop
        }
    }
}
 8001b20:	372c      	adds	r7, #44	; 0x2c
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd90      	pop	{r4, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200000b4 	.word	0x200000b4
 8001b2c:	08007998 	.word	0x08007998
 8001b30:	aaaaaaab 	.word	0xaaaaaaab

08001b34 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af04      	add	r7, sp, #16
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	4608      	mov	r0, r1
 8001b3e:	4611      	mov	r1, r2
 8001b40:	461a      	mov	r2, r3
 8001b42:	4623      	mov	r3, r4
 8001b44:	80fb      	strh	r3, [r7, #6]
 8001b46:	4603      	mov	r3, r0
 8001b48:	80bb      	strh	r3, [r7, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	807b      	strh	r3, [r7, #2]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <Paint_DrawRectangle+0x100>)
 8001b54:	889b      	ldrh	r3, [r3, #4]
 8001b56:	88fa      	ldrh	r2, [r7, #6]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d80e      	bhi.n	8001b7a <Paint_DrawRectangle+0x46>
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <Paint_DrawRectangle+0x100>)
 8001b5e:	88db      	ldrh	r3, [r3, #6]
 8001b60:	88ba      	ldrh	r2, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d809      	bhi.n	8001b7a <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001b66:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <Paint_DrawRectangle+0x100>)
 8001b68:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d804      	bhi.n	8001b7a <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <Paint_DrawRectangle+0x100>)
 8001b72:	88db      	ldrh	r3, [r3, #6]
 8001b74:	883a      	ldrh	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d903      	bls.n	8001b82 <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 8001b7a:	482f      	ldr	r0, [pc, #188]	; (8001c38 <Paint_DrawRectangle+0x104>)
 8001b7c:	f004 fe7a 	bl	8006874 <puts>
        return;
 8001b80:	e054      	b.n	8001c2c <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 8001b82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d018      	beq.n	8001bbc <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8001b8a:	88bb      	ldrh	r3, [r7, #4]
 8001b8c:	81fb      	strh	r3, [r7, #14]
 8001b8e:	e010      	b.n	8001bb2 <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 8001b90:	89fc      	ldrh	r4, [r7, #14]
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	89f9      	ldrh	r1, [r7, #14]
 8001b96:	88f8      	ldrh	r0, [r7, #6]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	8c3b      	ldrh	r3, [r7, #32]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	f7ff ff18 	bl	80019dc <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8001bac:	89fb      	ldrh	r3, [r7, #14]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	81fb      	strh	r3, [r7, #14]
 8001bb2:	89fa      	ldrh	r2, [r7, #14]
 8001bb4:	883b      	ldrh	r3, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3ea      	bcc.n	8001b90 <Paint_DrawRectangle+0x5c>
 8001bba:	e037      	b.n	8001c2c <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 8001bbc:	88bc      	ldrh	r4, [r7, #4]
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	88b9      	ldrh	r1, [r7, #4]
 8001bc2:	88f8      	ldrh	r0, [r7, #6]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	8c3b      	ldrh	r3, [r7, #32]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	f7ff ff02 	bl	80019dc <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 8001bd8:	883c      	ldrh	r4, [r7, #0]
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	88b9      	ldrh	r1, [r7, #4]
 8001bde:	88f8      	ldrh	r0, [r7, #6]
 8001be0:	2300      	movs	r3, #0
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	8c3b      	ldrh	r3, [r7, #32]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	4623      	mov	r3, r4
 8001bf0:	f7ff fef4 	bl	80019dc <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 8001bf4:	88bc      	ldrh	r4, [r7, #4]
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	8839      	ldrh	r1, [r7, #0]
 8001bfa:	8878      	ldrh	r0, [r7, #2]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9302      	str	r3, [sp, #8]
 8001c00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	8c3b      	ldrh	r3, [r7, #32]
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	4623      	mov	r3, r4
 8001c0c:	f7ff fee6 	bl	80019dc <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 8001c10:	883c      	ldrh	r4, [r7, #0]
 8001c12:	88fa      	ldrh	r2, [r7, #6]
 8001c14:	8839      	ldrh	r1, [r7, #0]
 8001c16:	8878      	ldrh	r0, [r7, #2]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	8c3b      	ldrh	r3, [r7, #32]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	4623      	mov	r3, r4
 8001c28:	f7ff fed8 	bl	80019dc <Paint_DrawLine>
    }
}
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200000b4 	.word	0x200000b4
 8001c38:	080079d8 	.word	0x080079d8

08001c3c <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	4604      	mov	r4, r0
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	80fb      	strh	r3, [r7, #6]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80bb      	strh	r3, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	807b      	strh	r3, [r7, #2]
 8001c56:	4613      	mov	r3, r2
 8001c58:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8001c5a:	4b67      	ldr	r3, [pc, #412]	; (8001df8 <Paint_DrawCircle+0x1bc>)
 8001c5c:	889b      	ldrh	r3, [r3, #4]
 8001c5e:	88fa      	ldrh	r2, [r7, #6]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d804      	bhi.n	8001c6e <Paint_DrawCircle+0x32>
 8001c64:	4b64      	ldr	r3, [pc, #400]	; (8001df8 <Paint_DrawCircle+0x1bc>)
 8001c66:	88db      	ldrh	r3, [r3, #6]
 8001c68:	88ba      	ldrh	r2, [r7, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d303      	bcc.n	8001c76 <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8001c6e:	4863      	ldr	r0, [pc, #396]	; (8001dfc <Paint_DrawCircle+0x1c0>)
 8001c70:	f004 fe00 	bl	8006874 <puts>
        return;
 8001c74:	e16b      	b.n	8001f4e <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f1c3 0303 	rsb	r3, r3, #3
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8001c8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	f040 8155 	bne.w	8001f40 <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 8001c96:	e0a6      	b.n	8001de6 <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	813b      	strh	r3, [r7, #8]
 8001c9c:	e075      	b.n	8001d8a <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8001c9e:	89fa      	ldrh	r2, [r7, #14]
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b298      	uxth	r0, r3
 8001ca6:	893a      	ldrh	r2, [r7, #8]
 8001ca8:	88bb      	ldrh	r3, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	b299      	uxth	r1, r3
 8001cae:	883a      	ldrh	r2, [r7, #0]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f7ff fde5 	bl	8001884 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8001cba:	89fb      	ldrh	r3, [r7, #14]
 8001cbc:	88fa      	ldrh	r2, [r7, #6]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	b298      	uxth	r0, r3
 8001cc2:	893a      	ldrh	r2, [r7, #8]
 8001cc4:	88bb      	ldrh	r3, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b299      	uxth	r1, r3
 8001cca:	883a      	ldrh	r2, [r7, #0]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f7ff fdd7 	bl	8001884 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 8001cd6:	893b      	ldrh	r3, [r7, #8]
 8001cd8:	88fa      	ldrh	r2, [r7, #6]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	b298      	uxth	r0, r3
 8001cde:	89fa      	ldrh	r2, [r7, #14]
 8001ce0:	88bb      	ldrh	r3, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b299      	uxth	r1, r3
 8001ce6:	883a      	ldrh	r2, [r7, #0]
 8001ce8:	2301      	movs	r3, #1
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2301      	movs	r3, #1
 8001cee:	f7ff fdc9 	bl	8001884 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8001cf2:	893b      	ldrh	r3, [r7, #8]
 8001cf4:	88fa      	ldrh	r2, [r7, #6]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	b298      	uxth	r0, r3
 8001cfa:	89fb      	ldrh	r3, [r7, #14]
 8001cfc:	88ba      	ldrh	r2, [r7, #4]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b299      	uxth	r1, r3
 8001d02:	883a      	ldrh	r2, [r7, #0]
 8001d04:	2301      	movs	r3, #1
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f7ff fdbb 	bl	8001884 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
 8001d10:	88fa      	ldrh	r2, [r7, #6]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	b298      	uxth	r0, r3
 8001d16:	893b      	ldrh	r3, [r7, #8]
 8001d18:	88ba      	ldrh	r2, [r7, #4]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	b299      	uxth	r1, r3
 8001d1e:	883a      	ldrh	r2, [r7, #0]
 8001d20:	2301      	movs	r3, #1
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2301      	movs	r3, #1
 8001d26:	f7ff fdad 	bl	8001884 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8001d2a:	89fa      	ldrh	r2, [r7, #14]
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b298      	uxth	r0, r3
 8001d32:	893b      	ldrh	r3, [r7, #8]
 8001d34:	88ba      	ldrh	r2, [r7, #4]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	b299      	uxth	r1, r3
 8001d3a:	883a      	ldrh	r2, [r7, #0]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2301      	movs	r3, #1
 8001d42:	f7ff fd9f 	bl	8001884 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8001d46:	893a      	ldrh	r2, [r7, #8]
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	b298      	uxth	r0, r3
 8001d4e:	89fb      	ldrh	r3, [r7, #14]
 8001d50:	88ba      	ldrh	r2, [r7, #4]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	b299      	uxth	r1, r3
 8001d56:	883a      	ldrh	r2, [r7, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f7ff fd91 	bl	8001884 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001d62:	893a      	ldrh	r2, [r7, #8]
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	4413      	add	r3, r2
 8001d68:	b298      	uxth	r0, r3
 8001d6a:	89fa      	ldrh	r2, [r7, #14]
 8001d6c:	88bb      	ldrh	r3, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	b299      	uxth	r1, r3
 8001d72:	883a      	ldrh	r2, [r7, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f7ff fd83 	bl	8001884 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001d7e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	813b      	strh	r3, [r7, #8]
 8001d8a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	dd83      	ble.n	8001c9e <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 8001d96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da09      	bge.n	8001db2 <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 8001d9e:	89fb      	ldrh	r3, [r7, #14]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	897b      	ldrh	r3, [r7, #10]
 8001da6:	4413      	add	r3, r2
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3306      	adds	r3, #6
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	817b      	strh	r3, [r7, #10]
 8001db0:	e013      	b.n	8001dda <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001db2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001db6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	330a      	adds	r3, #10
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001dce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001dda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3301      	adds	r3, #1
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8001de6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001dea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	f77f af52 	ble.w	8001c98 <Paint_DrawCircle+0x5c>
 8001df4:	e0ab      	b.n	8001f4e <Paint_DrawCircle+0x312>
 8001df6:	bf00      	nop
 8001df8:	200000b4 	.word	0x200000b4
 8001dfc:	08007a08 	.word	0x08007a08
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8001e00:	89fa      	ldrh	r2, [r7, #14]
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	4413      	add	r3, r2
 8001e06:	b298      	uxth	r0, r3
 8001e08:	89ba      	ldrh	r2, [r7, #12]
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	b299      	uxth	r1, r3
 8001e10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e14:	883a      	ldrh	r2, [r7, #0]
 8001e16:	2401      	movs	r4, #1
 8001e18:	9400      	str	r4, [sp, #0]
 8001e1a:	f7ff fd33 	bl	8001884 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8001e1e:	89fb      	ldrh	r3, [r7, #14]
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	b298      	uxth	r0, r3
 8001e26:	89ba      	ldrh	r2, [r7, #12]
 8001e28:	88bb      	ldrh	r3, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b299      	uxth	r1, r3
 8001e2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e32:	883a      	ldrh	r2, [r7, #0]
 8001e34:	2401      	movs	r4, #1
 8001e36:	9400      	str	r4, [sp, #0]
 8001e38:	f7ff fd24 	bl	8001884 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8001e3c:	89bb      	ldrh	r3, [r7, #12]
 8001e3e:	88fa      	ldrh	r2, [r7, #6]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	b298      	uxth	r0, r3
 8001e44:	89fa      	ldrh	r2, [r7, #14]
 8001e46:	88bb      	ldrh	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e50:	883a      	ldrh	r2, [r7, #0]
 8001e52:	2401      	movs	r4, #1
 8001e54:	9400      	str	r4, [sp, #0]
 8001e56:	f7ff fd15 	bl	8001884 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8001e5a:	89bb      	ldrh	r3, [r7, #12]
 8001e5c:	88fa      	ldrh	r2, [r7, #6]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	b298      	uxth	r0, r3
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	88ba      	ldrh	r2, [r7, #4]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	b299      	uxth	r1, r3
 8001e6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e6e:	883a      	ldrh	r2, [r7, #0]
 8001e70:	2401      	movs	r4, #1
 8001e72:	9400      	str	r4, [sp, #0]
 8001e74:	f7ff fd06 	bl	8001884 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8001e78:	89fb      	ldrh	r3, [r7, #14]
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	b298      	uxth	r0, r3
 8001e80:	89bb      	ldrh	r3, [r7, #12]
 8001e82:	88ba      	ldrh	r2, [r7, #4]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	b299      	uxth	r1, r3
 8001e88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e8c:	883a      	ldrh	r2, [r7, #0]
 8001e8e:	2401      	movs	r4, #1
 8001e90:	9400      	str	r4, [sp, #0]
 8001e92:	f7ff fcf7 	bl	8001884 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8001e96:	89fa      	ldrh	r2, [r7, #14]
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b298      	uxth	r0, r3
 8001e9e:	89bb      	ldrh	r3, [r7, #12]
 8001ea0:	88ba      	ldrh	r2, [r7, #4]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	b299      	uxth	r1, r3
 8001ea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eaa:	883a      	ldrh	r2, [r7, #0]
 8001eac:	2401      	movs	r4, #1
 8001eae:	9400      	str	r4, [sp, #0]
 8001eb0:	f7ff fce8 	bl	8001884 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8001eb4:	89ba      	ldrh	r2, [r7, #12]
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	4413      	add	r3, r2
 8001eba:	b298      	uxth	r0, r3
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	88ba      	ldrh	r2, [r7, #4]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	b299      	uxth	r1, r3
 8001ec4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ec8:	883a      	ldrh	r2, [r7, #0]
 8001eca:	2401      	movs	r4, #1
 8001ecc:	9400      	str	r4, [sp, #0]
 8001ece:	f7ff fcd9 	bl	8001884 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8001ed2:	89ba      	ldrh	r2, [r7, #12]
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b298      	uxth	r0, r3
 8001eda:	89fa      	ldrh	r2, [r7, #14]
 8001edc:	88bb      	ldrh	r3, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b299      	uxth	r1, r3
 8001ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ee6:	883a      	ldrh	r2, [r7, #0]
 8001ee8:	2401      	movs	r4, #1
 8001eea:	9400      	str	r4, [sp, #0]
 8001eec:	f7ff fcca 	bl	8001884 <Paint_DrawPoint>

            if (Esp < 0 )
 8001ef0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da09      	bge.n	8001f0c <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 8001ef8:	89fb      	ldrh	r3, [r7, #14]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	897b      	ldrh	r3, [r7, #10]
 8001f00:	4413      	add	r3, r2
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3306      	adds	r3, #6
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	817b      	strh	r3, [r7, #10]
 8001f0a:	e013      	b.n	8001f34 <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001f0c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	897b      	ldrh	r3, [r7, #10]
 8001f1e:	4413      	add	r3, r2
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	330a      	adds	r3, #10
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001f28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001f34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 8001f40:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f77f af59 	ble.w	8001e00 <Paint_DrawCircle+0x1c4>
        }
    }
}
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}

08001f54 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	81fb      	strh	r3, [r7, #14]
 8001f60:	460b      	mov	r3, r1
 8001f62:	81bb      	strh	r3, [r7, #12]
 8001f64:	4613      	mov	r3, r2
 8001f66:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001f68:	4b4c      	ldr	r3, [pc, #304]	; (800209c <Paint_DrawChar+0x148>)
 8001f6a:	889b      	ldrh	r3, [r3, #4]
 8001f6c:	89fa      	ldrh	r2, [r7, #14]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d804      	bhi.n	8001f7c <Paint_DrawChar+0x28>
 8001f72:	4b4a      	ldr	r3, [pc, #296]	; (800209c <Paint_DrawChar+0x148>)
 8001f74:	88db      	ldrh	r3, [r3, #6]
 8001f76:	89ba      	ldrh	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d903      	bls.n	8001f84 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8001f7c:	4848      	ldr	r0, [pc, #288]	; (80020a0 <Paint_DrawChar+0x14c>)
 8001f7e:	f004 fc79 	bl	8006874 <puts>
        return;
 8001f82:	e087      	b.n	8002094 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	3b20      	subs	r3, #32
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	88d2      	ldrh	r2, [r2, #6]
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	8892      	ldrh	r2, [r2, #4]
 8001f94:	08d2      	lsrs	r2, r2, #3
 8001f96:	b292      	uxth	r2, r2
 8001f98:	4611      	mov	r1, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	8892      	ldrh	r2, [r2, #4]
 8001f9e:	f002 0207 	and.w	r2, r2, #7
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2201      	movne	r2, #1
 8001faa:	2200      	moveq	r2, #0
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440a      	add	r2, r1
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	83fb      	strh	r3, [r7, #30]
 8001fc4:	e061      	b.n	800208a <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	83bb      	strh	r3, [r7, #28]
 8001fca:	e04c      	b.n	8002066 <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001fcc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fce:	2bff      	cmp	r3, #255	; 0xff
 8001fd0:	d118      	bne.n	8002004 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	8bbb      	ldrh	r3, [r7, #28]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	fa42 f303 	asr.w	r3, r2, r3
 8001fe4:	400b      	ands	r3, r1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d031      	beq.n	800204e <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001fea:	89fa      	ldrh	r2, [r7, #14]
 8001fec:	8bbb      	ldrh	r3, [r7, #28]
 8001fee:	4413      	add	r3, r2
 8001ff0:	b298      	uxth	r0, r3
 8001ff2:	89ba      	ldrh	r2, [r7, #12]
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7ff fa55 	bl	80014ac <Paint_SetPixel>
 8002002:	e024      	b.n	800204e <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	8bbb      	ldrh	r3, [r7, #28]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	fa42 f303 	asr.w	r3, r2, r3
 8002016:	400b      	ands	r3, r1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00c      	beq.n	8002036 <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800201c:	89fa      	ldrh	r2, [r7, #14]
 800201e:	8bbb      	ldrh	r3, [r7, #28]
 8002020:	4413      	add	r3, r2
 8002022:	b298      	uxth	r0, r3
 8002024:	89ba      	ldrh	r2, [r7, #12]
 8002026:	8bfb      	ldrh	r3, [r7, #30]
 8002028:	4413      	add	r3, r2
 800202a:	b29b      	uxth	r3, r3
 800202c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800202e:	4619      	mov	r1, r3
 8002030:	f7ff fa3c 	bl	80014ac <Paint_SetPixel>
 8002034:	e00b      	b.n	800204e <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8002036:	89fa      	ldrh	r2, [r7, #14]
 8002038:	8bbb      	ldrh	r3, [r7, #28]
 800203a:	4413      	add	r3, r2
 800203c:	b298      	uxth	r0, r3
 800203e:	89ba      	ldrh	r2, [r7, #12]
 8002040:	8bfb      	ldrh	r3, [r7, #30]
 8002042:	4413      	add	r3, r2
 8002044:	b29b      	uxth	r3, r3
 8002046:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002048:	4619      	mov	r1, r3
 800204a:	f7ff fa2f 	bl	80014ac <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800204e:	8bbb      	ldrh	r3, [r7, #28]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b07      	cmp	r3, #7
 8002058:	d102      	bne.n	8002060 <Paint_DrawChar+0x10c>
                ptr++;
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	3301      	adds	r3, #1
 800205e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8002060:	8bbb      	ldrh	r3, [r7, #28]
 8002062:	3301      	adds	r3, #1
 8002064:	83bb      	strh	r3, [r7, #28]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	889b      	ldrh	r3, [r3, #4]
 800206a:	8bba      	ldrh	r2, [r7, #28]
 800206c:	429a      	cmp	r2, r3
 800206e:	d3ad      	bcc.n	8001fcc <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	889b      	ldrh	r3, [r3, #4]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <Paint_DrawChar+0x130>
            ptr++;
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	3301      	adds	r3, #1
 8002082:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8002084:	8bfb      	ldrh	r3, [r7, #30]
 8002086:	3301      	adds	r3, #1
 8002088:	83fb      	strh	r3, [r7, #30]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	88db      	ldrh	r3, [r3, #6]
 800208e:	8bfa      	ldrh	r2, [r7, #30]
 8002090:	429a      	cmp	r2, r3
 8002092:	d398      	bcc.n	8001fc6 <Paint_DrawChar+0x72>
    }// Write all
}
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200000b4 	.word	0x200000b4
 80020a0:	08007a48 	.word	0x08007a48

080020a4 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	60ba      	str	r2, [r7, #8]
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	4603      	mov	r3, r0
 80020b0:	81fb      	strh	r3, [r7, #14]
 80020b2:	460b      	mov	r3, r1
 80020b4:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80020b6:	89fb      	ldrh	r3, [r7, #14]
 80020b8:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80020ba:	89bb      	ldrh	r3, [r7, #12]
 80020bc:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <Paint_DrawString_EN+0xa0>)
 80020c0:	889b      	ldrh	r3, [r3, #4]
 80020c2:	89fa      	ldrh	r2, [r7, #14]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d804      	bhi.n	80020d2 <Paint_DrawString_EN+0x2e>
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <Paint_DrawString_EN+0xa0>)
 80020ca:	88db      	ldrh	r3, [r3, #6]
 80020cc:	89ba      	ldrh	r2, [r7, #12]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d931      	bls.n	8002136 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80020d2:	481d      	ldr	r0, [pc, #116]	; (8002148 <Paint_DrawString_EN+0xa4>)
 80020d4:	f004 fbce 	bl	8006874 <puts>
        return;
 80020d8:	e031      	b.n	800213e <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80020da:	8afb      	ldrh	r3, [r7, #22]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	8892      	ldrh	r2, [r2, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a18      	ldr	r2, [pc, #96]	; (8002144 <Paint_DrawString_EN+0xa0>)
 80020e4:	8892      	ldrh	r2, [r2, #4]
 80020e6:	4293      	cmp	r3, r2
 80020e8:	dd06      	ble.n	80020f8 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 80020ea:	89fb      	ldrh	r3, [r7, #14]
 80020ec:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	88da      	ldrh	r2, [r3, #6]
 80020f2:	8abb      	ldrh	r3, [r7, #20]
 80020f4:	4413      	add	r3, r2
 80020f6:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80020f8:	8abb      	ldrh	r3, [r7, #20]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	88d2      	ldrh	r2, [r2, #6]
 80020fe:	4413      	add	r3, r2
 8002100:	4a10      	ldr	r2, [pc, #64]	; (8002144 <Paint_DrawString_EN+0xa0>)
 8002102:	88d2      	ldrh	r2, [r2, #6]
 8002104:	4293      	cmp	r3, r2
 8002106:	dd03      	ble.n	8002110 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800210c:	89bb      	ldrh	r3, [r7, #12]
 800210e:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	8ab9      	ldrh	r1, [r7, #20]
 8002116:	8af8      	ldrh	r0, [r7, #22]
 8002118:	8c3b      	ldrh	r3, [r7, #32]
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f7ff ff17 	bl	8001f54 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	889a      	ldrh	r2, [r3, #4]
 8002130:	8afb      	ldrh	r3, [r7, #22]
 8002132:	4413      	add	r3, r2
 8002134:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1cd      	bne.n	80020da <Paint_DrawString_EN+0x36>
    }
}
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200000b4 	.word	0x200000b4
 8002148:	08007a88 	.word	0x08007a88

0800214c <Paint_DrawString_CN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_CN(UWORD Xstart, UWORD Ystart, const char * pString, cFONT* font,
                        UWORD Color_Foreground, UWORD Color_Background)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	; 0x30
 8002150:	af00      	add	r7, sp, #0
 8002152:	60ba      	str	r2, [r7, #8]
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	4603      	mov	r3, r0
 8002158:	81fb      	strh	r3, [r7, #14]
 800215a:	460b      	mov	r3, r1
 800215c:	81bb      	strh	r3, [r7, #12]
    const char* p_text = pString;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
    int x = Xstart, y = Ystart;
 8002162:	89fb      	ldrh	r3, [r7, #14]
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
 8002166:	89bb      	ldrh	r3, [r7, #12]
 8002168:	613b      	str	r3, [r7, #16]
    int i, j,Num;

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 800216a:	e17c      	b.n	8002466 <Paint_DrawString_CN+0x31a>
        if(*p_text <= 0x7F) {  //ASCII < 126
 800216c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b25b      	sxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	f2c0 80b5 	blt.w	80022e2 <Paint_DrawString_CN+0x196>
            for(Num = 0; Num < font->size; Num++) {
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	e0a0      	b.n	80022c0 <Paint_DrawString_CN+0x174>
                if(*p_text== font->table[Num].index[0]) {
 800217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	20a6      	movs	r0, #166	; 0xa6
 800218a:	fb00 f303 	mul.w	r3, r0, r3
 800218e:	440b      	add	r3, r1
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	f040 8091 	bne.w	80022ba <Paint_DrawString_CN+0x16e>
                    const char* ptr = &font->table[Num].matrix[0];
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	21a6      	movs	r1, #166	; 0xa6
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3302      	adds	r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]

                    for (j = 0; j < font->Height; j++) {
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
 80021ae:	e07c      	b.n	80022aa <Paint_DrawString_CN+0x15e>
                        for (i = 0; i < font->Width; i++) {
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
 80021b4:	e066      	b.n	8002284 <Paint_DrawString_CN+0x138>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80021b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80021b8:	2bff      	cmp	r3, #255	; 0xff
 80021ba:	d121      	bne.n	8002200 <Paint_DrawString_CN+0xb4>
                                if (*ptr & (0x80 >> (i % 8))) {
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	425a      	negs	r2, r3
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	f002 0207 	and.w	r2, r2, #7
 80021ce:	bf58      	it	pl
 80021d0:	4253      	negpl	r3, r2
 80021d2:	2280      	movs	r2, #128	; 0x80
 80021d4:	fa42 f303 	asr.w	r3, r2, r3
 80021d8:	400b      	ands	r3, r1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d042      	beq.n	8002264 <Paint_DrawString_CN+0x118>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	b298      	uxth	r0, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7ff f957 	bl	80014ac <Paint_SetPixel>
 80021fe:	e031      	b.n	8002264 <Paint_DrawString_CN+0x118>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	425a      	negs	r2, r3
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	f002 0207 	and.w	r2, r2, #7
 8002212:	bf58      	it	pl
 8002214:	4253      	negpl	r3, r2
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	fa42 f303 	asr.w	r3, r2, r3
 800221c:	400b      	ands	r3, r1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d010      	beq.n	8002244 <Paint_DrawString_CN+0xf8>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	b29a      	uxth	r2, r3
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	b29b      	uxth	r3, r3
 800222a:	4413      	add	r3, r2
 800222c:	b298      	uxth	r0, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	b29a      	uxth	r2, r3
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4413      	add	r3, r2
 8002238:	b29b      	uxth	r3, r3
 800223a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800223c:	4619      	mov	r1, r3
 800223e:	f7ff f935 	bl	80014ac <Paint_SetPixel>
 8002242:	e00f      	b.n	8002264 <Paint_DrawString_CN+0x118>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	b29a      	uxth	r2, r3
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	b29b      	uxth	r3, r3
 800224c:	4413      	add	r3, r2
 800224e:	b298      	uxth	r0, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	b29a      	uxth	r2, r3
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	b29b      	uxth	r3, r3
 8002258:	4413      	add	r3, r2
 800225a:	b29b      	uxth	r3, r3
 800225c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800225e:	4619      	mov	r1, r3
 8002260:	f7ff f924 	bl	80014ac <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	425a      	negs	r2, r3
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	f002 0207 	and.w	r2, r2, #7
 8002270:	bf58      	it	pl
 8002272:	4253      	negpl	r3, r2
 8002274:	2b07      	cmp	r3, #7
 8002276:	d102      	bne.n	800227e <Paint_DrawString_CN+0x132>
                                ptr++;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3301      	adds	r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
                        for (i = 0; i < font->Width; i++) {
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	3301      	adds	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	891b      	ldrh	r3, [r3, #8]
 8002288:	461a      	mov	r2, r3
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	4293      	cmp	r3, r2
 800228e:	db92      	blt.n	80021b6 <Paint_DrawString_CN+0x6a>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	891b      	ldrh	r3, [r3, #8]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <Paint_DrawString_CN+0x158>
                            ptr++;
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61bb      	str	r3, [r7, #24]
                    for (j = 0; j < font->Height; j++) {
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	3301      	adds	r3, #1
 80022a8:	623b      	str	r3, [r7, #32]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	895b      	ldrh	r3, [r3, #10]
 80022ae:	461a      	mov	r2, r3
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	4293      	cmp	r3, r2
 80022b4:	f6ff af7c 	blt.w	80021b0 <Paint_DrawString_CN+0x64>
                        }
                    }
                    break;
 80022b8:	e009      	b.n	80022ce <Paint_DrawString_CN+0x182>
            for(Num = 0; Num < font->size; Num++) {
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3301      	adds	r3, #1
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	889b      	ldrh	r3, [r3, #4]
 80022c4:	461a      	mov	r2, r3
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4293      	cmp	r3, r2
 80022ca:	f6ff af58 	blt.w	800217e <Paint_DrawString_CN+0x32>
                }
            }
            /* Point on the next character */
            p_text += 1;
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	3301      	adds	r3, #1
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->ASCII_Width;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	88db      	ldrh	r3, [r3, #6]
 80022d8:	461a      	mov	r2, r3
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	4413      	add	r3, r2
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e0:	e0c1      	b.n	8002466 <Paint_DrawString_CN+0x31a>
        } else {        //Chinese
            for(Num = 0; Num < font->size; Num++) {
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	e0ae      	b.n	8002446 <Paint_DrawString_CN+0x2fa>
                if((*p_text== font->table[Num].index[0]) && (*(p_text+1) == font->table[Num].index[1])) {
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	20a6      	movs	r0, #166	; 0xa6
 80022f4:	fb00 f303 	mul.w	r3, r0, r3
 80022f8:	440b      	add	r3, r1
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 809f 	bne.w	8002440 <Paint_DrawString_CN+0x2f4>
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	3301      	adds	r3, #1
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	20a6      	movs	r0, #166	; 0xa6
 8002310:	fb00 f303 	mul.w	r3, r0, r3
 8002314:	440b      	add	r3, r1
 8002316:	785b      	ldrb	r3, [r3, #1]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8091 	bne.w	8002440 <Paint_DrawString_CN+0x2f4>
                    const char* ptr = &font->table[Num].matrix[0];
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	21a6      	movs	r1, #166	; 0xa6
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3302      	adds	r3, #2
 800232e:	617b      	str	r3, [r7, #20]

                    for (j = 0; j < font->Height; j++) {
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	e07c      	b.n	8002430 <Paint_DrawString_CN+0x2e4>
                        for (i = 0; i < font->Width; i++) {
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	e066      	b.n	800240a <Paint_DrawString_CN+0x2be>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800233c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800233e:	2bff      	cmp	r3, #255	; 0xff
 8002340:	d121      	bne.n	8002386 <Paint_DrawString_CN+0x23a>
                                if (*ptr & (0x80 >> (i % 8))) {
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	4619      	mov	r1, r3
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	425a      	negs	r2, r3
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	f002 0207 	and.w	r2, r2, #7
 8002354:	bf58      	it	pl
 8002356:	4253      	negpl	r3, r2
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	fa42 f303 	asr.w	r3, r2, r3
 800235e:	400b      	ands	r3, r1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d042      	beq.n	80023ea <Paint_DrawString_CN+0x29e>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	b29a      	uxth	r2, r3
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	b29b      	uxth	r3, r3
 800236c:	4413      	add	r3, r2
 800236e:	b298      	uxth	r0, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	b29a      	uxth	r2, r3
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	b29b      	uxth	r3, r3
 8002378:	4413      	add	r3, r2
 800237a:	b29b      	uxth	r3, r3
 800237c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800237e:	4619      	mov	r1, r3
 8002380:	f7ff f894 	bl	80014ac <Paint_SetPixel>
 8002384:	e031      	b.n	80023ea <Paint_DrawString_CN+0x29e>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	4619      	mov	r1, r3
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	425a      	negs	r2, r3
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	f002 0207 	and.w	r2, r2, #7
 8002398:	bf58      	it	pl
 800239a:	4253      	negpl	r3, r2
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	fa42 f303 	asr.w	r3, r2, r3
 80023a2:	400b      	ands	r3, r1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d010      	beq.n	80023ca <Paint_DrawString_CN+0x27e>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	b298      	uxth	r0, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4413      	add	r3, r2
 80023be:	b29b      	uxth	r3, r3
 80023c0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7ff f872 	bl	80014ac <Paint_SetPixel>
 80023c8:	e00f      	b.n	80023ea <Paint_DrawString_CN+0x29e>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	b298      	uxth	r0, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	b29a      	uxth	r2, r3
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4413      	add	r3, r2
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7ff f861 	bl	80014ac <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	425a      	negs	r2, r3
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	f002 0207 	and.w	r2, r2, #7
 80023f6:	bf58      	it	pl
 80023f8:	4253      	negpl	r3, r2
 80023fa:	2b07      	cmp	r3, #7
 80023fc:	d102      	bne.n	8002404 <Paint_DrawString_CN+0x2b8>
                                ptr++;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3301      	adds	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
                        for (i = 0; i < font->Width; i++) {
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	3301      	adds	r3, #1
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	891b      	ldrh	r3, [r3, #8]
 800240e:	461a      	mov	r2, r3
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	4293      	cmp	r3, r2
 8002414:	db92      	blt.n	800233c <Paint_DrawString_CN+0x1f0>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	891b      	ldrh	r3, [r3, #8]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <Paint_DrawString_CN+0x2de>
                            ptr++;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3301      	adds	r3, #1
 8002428:	617b      	str	r3, [r7, #20]
                    for (j = 0; j < font->Height; j++) {
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	3301      	adds	r3, #1
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	895b      	ldrh	r3, [r3, #10]
 8002434:	461a      	mov	r2, r3
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	4293      	cmp	r3, r2
 800243a:	f6ff af7c 	blt.w	8002336 <Paint_DrawString_CN+0x1ea>
                        }
                    }
                    break;
 800243e:	e009      	b.n	8002454 <Paint_DrawString_CN+0x308>
            for(Num = 0; Num < font->size; Num++) {
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3301      	adds	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	889b      	ldrh	r3, [r3, #4]
 800244a:	461a      	mov	r2, r3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4293      	cmp	r3, r2
 8002450:	f6ff af4a 	blt.w	80022e8 <Paint_DrawString_CN+0x19c>
                }
            }
            /* Point on the next character */
            p_text += 2;
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	3302      	adds	r3, #2
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->Width;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	891b      	ldrh	r3, [r3, #8]
 800245e:	461a      	mov	r2, r3
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	4413      	add	r3, r2
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
    while (*p_text != 0) {
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f47f ae7e 	bne.w	800216c <Paint_DrawString_CN+0x20>
        }
    }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3730      	adds	r7, #48	; 0x30
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <Paint_DrawNum>:
    Color_Background : Select the background color
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8002482:	af02      	add	r7, sp, #8
 8002484:	4604      	mov	r4, r0
 8002486:	4608      	mov	r0, r1
 8002488:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800248c:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8002490:	600a      	str	r2, [r1, #0]
 8002492:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8002496:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80024a0:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80024a4:	4622      	mov	r2, r4
 80024a6:	801a      	strh	r2, [r3, #0]
 80024a8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80024ac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80024b0:	4602      	mov	r2, r0
 80024b2:	801a      	strh	r2, [r3, #0]

    int16_t Num_Bit = 0, Str_Bit = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 80024c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80024c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	3304      	adds	r3, #4
 80024ce:	22fb      	movs	r2, #251	; 0xfb
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f004 f860 	bl	8006598 <memset>
 80024d8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80024dc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	3304      	adds	r3, #4
 80024e6:	22fb      	movs	r2, #251	; 0xfb
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 f854 	bl	8006598 <memset>
    uint8_t *pStr = Str_Array;
 80024f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024f4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80024f8:	4b46      	ldr	r3, [pc, #280]	; (8002614 <Paint_DrawNum+0x198>)
 80024fa:	889b      	ldrh	r3, [r3, #4]
 80024fc:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8002500:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 8002504:	8812      	ldrh	r2, [r2, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d808      	bhi.n	800251c <Paint_DrawNum+0xa0>
 800250a:	4b42      	ldr	r3, [pc, #264]	; (8002614 <Paint_DrawNum+0x198>)
 800250c:	88db      	ldrh	r3, [r3, #6]
 800250e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8002512:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8002516:	8812      	ldrh	r2, [r2, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d903      	bls.n	8002524 <Paint_DrawNum+0xa8>
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 800251c:	483e      	ldr	r0, [pc, #248]	; (8002618 <Paint_DrawNum+0x19c>)
 800251e:	f004 f9a9 	bl	8006874 <puts>
 8002522:	e072      	b.n	800260a <Paint_DrawNum+0x18e>
        return;
    }

    //Converts a number to a string
    do {
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 8002524:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002528:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <Paint_DrawNum+0x1a0>)
 8002530:	fb83 1302 	smull	r1, r3, r3, r2
 8002534:	1099      	asrs	r1, r3, #2
 8002536:	17d3      	asrs	r3, r2, #31
 8002538:	1ac9      	subs	r1, r1, r3
 800253a:	460b      	mov	r3, r1
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	1ad1      	subs	r1, r2, r3
 8002544:	b2ca      	uxtb	r2, r1
 8002546:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800254a:	3230      	adds	r2, #48	; 0x30
 800254c:	b2d1      	uxtb	r1, r2
 800254e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8002552:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8002556:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 8002558:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800255c:	b29b      	uxth	r3, r3
 800255e:	3301      	adds	r3, #1
 8002560:	b29b      	uxth	r3, r3
 8002562:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
        Nummber /= 10;
 8002566:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800256a:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800256e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002572:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4928      	ldr	r1, [pc, #160]	; (800261c <Paint_DrawNum+0x1a0>)
 800257a:	fb81 0103 	smull	r0, r1, r1, r3
 800257e:	1089      	asrs	r1, r1, #2
 8002580:	17db      	asrs	r3, r3, #31
 8002582:	1acb      	subs	r3, r1, r3
 8002584:	6013      	str	r3, [r2, #0]
    } while(Nummber);
 8002586:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800258a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1c7      	bne.n	8002524 <Paint_DrawNum+0xa8>


    //The string is inverted
    while (Num_Bit > 0) {
 8002594:	e01c      	b.n	80025d0 <Paint_DrawNum+0x154>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8002596:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800259a:	1e5a      	subs	r2, r3, #1
 800259c:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 80025a0:	f507 7106 	add.w	r1, r7, #536	; 0x218
 80025a4:	f5a1 7102 	sub.w	r1, r1, #520	; 0x208
 80025a8:	5c89      	ldrb	r1, [r1, r2]
 80025aa:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80025ae:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80025b2:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 80025b4:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
        Num_Bit --;
 80025c2:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    while (Num_Bit > 0) {
 80025d0:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	dcde      	bgt.n	8002596 <Paint_DrawNum+0x11a>
    }

    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 80025d8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80025dc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80025e0:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80025e4:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80025e8:	8811      	ldrh	r1, [r2, #0]
 80025ea:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80025ee:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 80025f2:	8810      	ldrh	r0, [r2, #0]
 80025f4:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 80025f8:	9201      	str	r2, [sp, #4]
 80025fa:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 80025fe:	9200      	str	r2, [sp, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002606:	f7ff fd4d 	bl	80020a4 <Paint_DrawString_EN>
}
 800260a:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800260e:	46bd      	mov	sp, r7
 8002610:	bd90      	pop	{r4, r7, pc}
 8002612:	bf00      	nop
 8002614:	200000b4 	.word	0x200000b4
 8002618:	08007acc 	.word	0x08007acc
 800261c:	66666667 	.word	0x66666667

08002620 <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    UWORD x, y;
    UDOUBLE Addr = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 800262c:	2300      	movs	r3, #0
 800262e:	81bb      	strh	r3, [r7, #12]
 8002630:	e01e      	b.n	8002670 <Paint_DrawBitMap+0x50>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8002632:	2300      	movs	r3, #0
 8002634:	81fb      	strh	r3, [r7, #14]
 8002636:	e013      	b.n	8002660 <Paint_DrawBitMap+0x40>
            Addr = x + y * Paint.WidthByte;
 8002638:	89fa      	ldrh	r2, [r7, #14]
 800263a:	89bb      	ldrh	r3, [r7, #12]
 800263c:	4912      	ldr	r1, [pc, #72]	; (8002688 <Paint_DrawBitMap+0x68>)
 800263e:	8a49      	ldrh	r1, [r1, #18]
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	441a      	add	r2, r3
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <Paint_DrawBitMap+0x68>)
 8002650:	6819      	ldr	r1, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	440b      	add	r3, r1
 8002656:	7812      	ldrb	r2, [r2, #0]
 8002658:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 800265a:	89fb      	ldrh	r3, [r7, #14]
 800265c:	3301      	adds	r3, #1
 800265e:	81fb      	strh	r3, [r7, #14]
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <Paint_DrawBitMap+0x68>)
 8002662:	8a5b      	ldrh	r3, [r3, #18]
 8002664:	89fa      	ldrh	r2, [r7, #14]
 8002666:	429a      	cmp	r2, r3
 8002668:	d3e6      	bcc.n	8002638 <Paint_DrawBitMap+0x18>
    for (y = 0; y < Paint.HeightByte; y++) {
 800266a:	89bb      	ldrh	r3, [r7, #12]
 800266c:	3301      	adds	r3, #1
 800266e:	81bb      	strh	r3, [r7, #12]
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <Paint_DrawBitMap+0x68>)
 8002672:	8a9b      	ldrh	r3, [r3, #20]
 8002674:	89ba      	ldrh	r2, [r7, #12]
 8002676:	429a      	cmp	r2, r3
 8002678:	d3db      	bcc.n	8002632 <Paint_DrawBitMap+0x12>
        }
    }
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	200000b4 	.word	0x200000b4

0800268c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002690:	f000 fc33 	bl	8002efa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002694:	f000 f80c 	bl	80026b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002698:	f000 f908 	bl	80028ac <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800269c:	f000 f86c 	bl	8002778 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80026a0:	f000 f8d6 	bl	8002850 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80026a4:	f000 f896 	bl	80027d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  EPD_test();
 80026a8:	f7fe fb96 	bl	8000dd8 <EPD_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <main+0x20>
	...

080026b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b096      	sub	sp, #88	; 0x58
 80026b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	2244      	movs	r2, #68	; 0x44
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 ff6a 	bl	8006598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c4:	463b      	mov	r3, r7
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80026d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80026d6:	f001 f8b7 	bl	8003848 <HAL_PWREx_ControlVoltageScaling>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80026e0:	f000 f99a 	bl	8002a18 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80026e4:	f001 f892 	bl	800380c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <SystemClock_Config+0xc4>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a21      	ldr	r2, [pc, #132]	; (8002774 <SystemClock_Config+0xc4>)
 80026f0:	f023 0318 	bic.w	r3, r3, #24
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80026f8:	2314      	movs	r3, #20
 80026fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026fc:	2301      	movs	r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002700:	2301      	movs	r3, #1
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002708:	2360      	movs	r3, #96	; 0x60
 800270a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800270c:	2302      	movs	r3, #2
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002710:	2301      	movs	r3, #1
 8002712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002714:	2301      	movs	r3, #1
 8002716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8002718:	2347      	movs	r3, #71	; 0x47
 800271a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800271c:	2302      	movs	r3, #2
 800271e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002720:	2302      	movs	r3, #2
 8002722:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8002724:	2306      	movs	r3, #6
 8002726:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4618      	mov	r0, r3
 800272e:	f001 f901 	bl	8003934 <HAL_RCC_OscConfig>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002738:	f000 f96e 	bl	8002a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800273c:	230f      	movs	r3, #15
 800273e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002740:	2303      	movs	r3, #3
 8002742:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800274c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002752:	463b      	mov	r3, r7
 8002754:	2102      	movs	r1, #2
 8002756:	4618      	mov	r0, r3
 8002758:	f001 fd06 	bl	8004168 <HAL_RCC_ClockConfig>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002762:	f000 f959 	bl	8002a18 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002766:	f002 fa1f 	bl	8004ba8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800276a:	bf00      	nop
 800276c:	3758      	adds	r7, #88	; 0x58
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000

08002778 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <MX_LPUART1_UART_Init+0x50>)
 800277e:	4a13      	ldr	r2, [pc, #76]	; (80027cc <MX_LPUART1_UART_Init+0x54>)
 8002780:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_LPUART1_UART_Init+0x50>)
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <MX_LPUART1_UART_Init+0x58>)
 8002786:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <MX_LPUART1_UART_Init+0x50>)
 800278a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002790:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <MX_LPUART1_UART_Init+0x50>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <MX_LPUART1_UART_Init+0x50>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <MX_LPUART1_UART_Init+0x50>)
 800279e:	220c      	movs	r2, #12
 80027a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <MX_LPUART1_UART_Init+0x50>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <MX_LPUART1_UART_Init+0x50>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <MX_LPUART1_UART_Init+0x50>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80027b4:	4804      	ldr	r0, [pc, #16]	; (80027c8 <MX_LPUART1_UART_Init+0x50>)
 80027b6:	f002 ff4b 	bl	8005650 <HAL_UART_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80027c0:	f000 f92a 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200000cc 	.word	0x200000cc
 80027cc:	40008000 	.word	0x40008000
 80027d0:	00033324 	.word	0x00033324

080027d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <MX_SPI1_Init+0x74>)
 80027da:	4a1c      	ldr	r2, [pc, #112]	; (800284c <MX_SPI1_Init+0x78>)
 80027dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027de:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <MX_SPI1_Init+0x74>)
 80027e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027e6:	4b18      	ldr	r3, [pc, #96]	; (8002848 <MX_SPI1_Init+0x74>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <MX_SPI1_Init+0x74>)
 80027ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <MX_SPI1_Init+0x74>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <MX_SPI1_Init+0x74>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <MX_SPI1_Init+0x74>)
 8002802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002806:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <MX_SPI1_Init+0x74>)
 800280a:	2228      	movs	r2, #40	; 0x28
 800280c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <MX_SPI1_Init+0x74>)
 8002810:	2200      	movs	r2, #0
 8002812:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <MX_SPI1_Init+0x74>)
 8002816:	2200      	movs	r2, #0
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <MX_SPI1_Init+0x74>)
 800281c:	2200      	movs	r2, #0
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <MX_SPI1_Init+0x74>)
 8002822:	2207      	movs	r2, #7
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <MX_SPI1_Init+0x74>)
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <MX_SPI1_Init+0x74>)
 800282e:	2208      	movs	r2, #8
 8002830:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002832:	4805      	ldr	r0, [pc, #20]	; (8002848 <MX_SPI1_Init+0x74>)
 8002834:	f002 fb96 	bl	8004f64 <HAL_SPI_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800283e:	f000 f8eb 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000150 	.word	0x20000150
 800284c:	40013000 	.word	0x40013000

08002850 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002856:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800285a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800285e:	2206      	movs	r2, #6
 8002860:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002864:	2202      	movs	r2, #2
 8002866:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800286a:	2202      	movs	r2, #2
 800286c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002870:	2201      	movs	r2, #1
 8002872:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002876:	2200      	movs	r2, #0
 8002878:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800287c:	2200      	movs	r2, #0
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002882:	2201      	movs	r2, #1
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800288e:	2201      	movs	r2, #1
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002892:	4805      	ldr	r0, [pc, #20]	; (80028a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002894:	f000 fe72 	bl	800357c <HAL_PCD_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800289e:	f000 f8bb 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200001b4 	.word	0x200001b4

080028ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	60da      	str	r2, [r3, #12]
 80028c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c2:	4b51      	ldr	r3, [pc, #324]	; (8002a08 <MX_GPIO_Init+0x15c>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4a50      	ldr	r2, [pc, #320]	; (8002a08 <MX_GPIO_Init+0x15c>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ce:	4b4e      	ldr	r3, [pc, #312]	; (8002a08 <MX_GPIO_Init+0x15c>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028da:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <MX_GPIO_Init+0x15c>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	4a4a      	ldr	r2, [pc, #296]	; (8002a08 <MX_GPIO_Init+0x15c>)
 80028e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e6:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <MX_GPIO_Init+0x15c>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	4b45      	ldr	r3, [pc, #276]	; (8002a08 <MX_GPIO_Init+0x15c>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	4a44      	ldr	r2, [pc, #272]	; (8002a08 <MX_GPIO_Init+0x15c>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028fe:	4b42      	ldr	r3, [pc, #264]	; (8002a08 <MX_GPIO_Init+0x15c>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	4b3f      	ldr	r3, [pc, #252]	; (8002a08 <MX_GPIO_Init+0x15c>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	4a3e      	ldr	r2, [pc, #248]	; (8002a08 <MX_GPIO_Init+0x15c>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002916:	4b3c      	ldr	r3, [pc, #240]	; (8002a08 <MX_GPIO_Init+0x15c>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <MX_GPIO_Init+0x15c>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	4a38      	ldr	r2, [pc, #224]	; (8002a08 <MX_GPIO_Init+0x15c>)
 8002928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800292c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800292e:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <MX_GPIO_Init+0x15c>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800293a:	f000 ffeb 	bl	8003914 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CS_Pin|RST_Pin|DC_Pin, GPIO_PIN_RESET);
 800293e:	2200      	movs	r2, #0
 8002940:	210d      	movs	r1, #13
 8002942:	4832      	ldr	r0, [pc, #200]	; (8002a0c <MX_GPIO_Init+0x160>)
 8002944:	f000 fe02 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002948:	2200      	movs	r2, #0
 800294a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800294e:	4830      	ldr	r0, [pc, #192]	; (8002a10 <MX_GPIO_Init+0x164>)
 8002950:	f000 fdfc 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	2140      	movs	r1, #64	; 0x40
 8002958:	482e      	ldr	r0, [pc, #184]	; (8002a14 <MX_GPIO_Init+0x168>)
 800295a:	f000 fdf7 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800295e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002964:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4619      	mov	r1, r3
 8002974:	4825      	ldr	r0, [pc, #148]	; (8002a0c <MX_GPIO_Init+0x160>)
 8002976:	f000 fc3f 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin RST_Pin DC_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|RST_Pin|DC_Pin;
 800297a:	230d      	movs	r3, #13
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297e:	2301      	movs	r3, #1
 8002980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	481e      	ldr	r0, [pc, #120]	; (8002a0c <MX_GPIO_Init+0x160>)
 8002992:	f000 fc31 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8002996:	2302      	movs	r3, #2
 8002998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	4818      	ldr	r0, [pc, #96]	; (8002a0c <MX_GPIO_Init+0x160>)
 80029aa:	f000 fc25 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80029ae:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80029b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b4:	2301      	movs	r3, #1
 80029b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4619      	mov	r1, r3
 80029c6:	4812      	ldr	r0, [pc, #72]	; (8002a10 <MX_GPIO_Init+0x164>)
 80029c8:	f000 fc16 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80029cc:	2320      	movs	r3, #32
 80029ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	4619      	mov	r1, r3
 80029de:	480d      	ldr	r0, [pc, #52]	; (8002a14 <MX_GPIO_Init+0x168>)
 80029e0:	f000 fc0a 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80029e4:	2340      	movs	r3, #64	; 0x40
 80029e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	4806      	ldr	r0, [pc, #24]	; (8002a14 <MX_GPIO_Init+0x168>)
 80029fc:	f000 fbfc 	bl	80031f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a00:	bf00      	nop
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	48000800 	.word	0x48000800
 8002a10:	48000400 	.word	0x48000400
 8002a14:	48001800 	.word	0x48001800

08002a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a1c:	b672      	cpsid	i
}
 8002a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <Error_Handler+0x8>
	...

08002a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_MspInit+0x44>)
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2e:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <HAL_MspInit+0x44>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6613      	str	r3, [r2, #96]	; 0x60
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_MspInit+0x44>)
 8002a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_MspInit+0x44>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_MspInit+0x44>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_MspInit+0x44>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000

08002a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0ac      	sub	sp, #176	; 0xb0
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	228c      	movs	r2, #140	; 0x8c
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 fd83 	bl	8006598 <memset>
  if(huart->Instance==LPUART1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <HAL_UART_MspInit+0xb4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d13d      	bne.n	8002b18 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aa4:	f107 0310 	add.w	r3, r7, #16
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 fd81 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ab4:	f7ff ffb0 	bl	8002a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002ac4:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad4:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002ae8:	f000 ff14 	bl	8003914 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002aec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b00:	2303      	movs	r3, #3
 8002b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b06:	2308      	movs	r3, #8
 8002b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b10:	4619      	mov	r1, r3
 8002b12:	4805      	ldr	r0, [pc, #20]	; (8002b28 <HAL_UART_MspInit+0xbc>)
 8002b14:	f000 fb70 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002b18:	bf00      	nop
 8002b1a:	37b0      	adds	r7, #176	; 0xb0
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40008000 	.word	0x40008000
 8002b24:	40021000 	.word	0x40021000
 8002b28:	48001800 	.word	0x48001800

08002b2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <HAL_SPI_MspInit+0x7c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d128      	bne.n	8002ba0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <HAL_SPI_MspInit+0x80>)
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	4a16      	ldr	r2, [pc, #88]	; (8002bac <HAL_SPI_MspInit+0x80>)
 8002b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b58:	6613      	str	r3, [r2, #96]	; 0x60
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <HAL_SPI_MspInit+0x80>)
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_SPI_MspInit+0x80>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	4a10      	ldr	r2, [pc, #64]	; (8002bac <HAL_SPI_MspInit+0x80>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_SPI_MspInit+0x80>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002b7e:	23c2      	movs	r3, #194	; 0xc2
 8002b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b8e:	2305      	movs	r3, #5
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	4619      	mov	r1, r3
 8002b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b9c:	f000 fb2c 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ba0:	bf00      	nop
 8002ba2:	3728      	adds	r7, #40	; 0x28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40013000 	.word	0x40013000
 8002bac:	40021000 	.word	0x40021000

08002bb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b0ae      	sub	sp, #184	; 0xb8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bc8:	f107 0318 	add.w	r3, r7, #24
 8002bcc:	228c      	movs	r2, #140	; 0x8c
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 fce1 	bl	8006598 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bde:	d17c      	bne.n	8002cda <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002be4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002be6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002bf6:	2318      	movs	r3, #24
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002c02:	2302      	movs	r3, #2
 8002c04:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002c06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c0c:	f107 0318 	add.w	r3, r7, #24
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 fccd 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002c1c:	f7ff fefc 	bl	8002a18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c24:	4a2f      	ldr	r2, [pc, #188]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002c38:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c52:	230a      	movs	r3, #10
 8002c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c62:	f000 fac9 	bl	80031f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c84:	f000 fab8 	bl	80031f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002c88:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	4a15      	ldr	r2, [pc, #84]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002c8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c94:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d114      	bne.n	8002cd6 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	4a0c      	ldr	r2, [pc, #48]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002cc4:	f000 fe16 	bl	80038f4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <HAL_PCD_MspInit+0x134>)
 8002cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002cd4:	e001      	b.n	8002cda <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002cd6:	f000 fe0d 	bl	80038f4 <HAL_PWREx_EnableVddUSB>
}
 8002cda:	bf00      	nop
 8002cdc:	37b8      	adds	r7, #184	; 0xb8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000

08002ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cec:	e7fe      	b.n	8002cec <NMI_Handler+0x4>

08002cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cf2:	e7fe      	b.n	8002cf2 <HardFault_Handler+0x4>

08002cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <MemManage_Handler+0x4>

08002cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cfe:	e7fe      	b.n	8002cfe <BusFault_Handler+0x4>

08002d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d04:	e7fe      	b.n	8002d04 <UsageFault_Handler+0x4>

08002d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d34:	f000 f936 	bl	8002fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e00a      	b.n	8002d64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d4e:	f3af 8000 	nop.w
 8002d52:	4601      	mov	r1, r0
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	60ba      	str	r2, [r7, #8]
 8002d5a:	b2ca      	uxtb	r2, r1
 8002d5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dbf0      	blt.n	8002d4e <_read+0x12>
  }

  return len;
 8002d6c:	687b      	ldr	r3, [r7, #4]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e009      	b.n	8002d9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	60ba      	str	r2, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	dbf1      	blt.n	8002d88 <_write+0x12>
  }
  return len;
 8002da4:	687b      	ldr	r3, [r7, #4]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_close>:

int _close(int file)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dd6:	605a      	str	r2, [r3, #4]
  return 0;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <_isatty>:

int _isatty(int file)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <_sbrk+0x5c>)
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <_sbrk+0x60>)
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <_sbrk+0x64>)
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <_sbrk+0x68>)
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d207      	bcs.n	8002e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e48:	f003 fb6c 	bl	8006524 <__errno>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	220c      	movs	r2, #12
 8002e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	e009      	b.n	8002e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <_sbrk+0x64>)
 8002e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20050000 	.word	0x20050000
 8002e78:	00000400 	.word	0x00000400
 8002e7c:	200006c0 	.word	0x200006c0
 8002e80:	200006d8 	.word	0x200006d8

08002e84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <SystemInit+0x20>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <SystemInit+0x20>)
 8002e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002eac:	f7ff ffea 	bl	8002e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eb2:	490d      	ldr	r1, [pc, #52]	; (8002ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <LoopForever+0xe>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb8:	e002      	b.n	8002ec0 <LoopCopyDataInit>

08002eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebe:	3304      	adds	r3, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec4:	d3f9      	bcc.n	8002eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ec8:	4c0a      	ldr	r4, [pc, #40]	; (8002ef4 <LoopForever+0x16>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ecc:	e001      	b.n	8002ed2 <LoopFillZerobss>

08002ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed0:	3204      	adds	r2, #4

08002ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed4:	d3fb      	bcc.n	8002ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ed6:	f003 fb2b 	bl	8006530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002eda:	f7ff fbd7 	bl	800268c <main>

08002ede <LoopForever>:

LoopForever:
    b LoopForever
 8002ede:	e7fe      	b.n	8002ede <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ee0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002eec:	08015534 	.word	0x08015534
  ldr r2, =_sbss
 8002ef0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002ef4:	200006d8 	.word	0x200006d8

08002ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <ADC1_2_IRQHandler>

08002efa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f04:	2003      	movs	r0, #3
 8002f06:	f000 f943 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f000 f80e 	bl	8002f2c <HAL_InitTick>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	71fb      	strb	r3, [r7, #7]
 8002f1a:	e001      	b.n	8002f20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f1c:	f7ff fd82 	bl	8002a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f20:	79fb      	ldrb	r3, [r7, #7]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f38:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <HAL_InitTick+0x6c>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d023      	beq.n	8002f88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f40:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_InitTick+0x70>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <HAL_InitTick+0x6c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f941 	bl	80031de <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10f      	bne.n	8002f82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d809      	bhi.n	8002f7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f000 f919 	bl	80031a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_InitTick+0x74>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e007      	b.n	8002f8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	e004      	b.n	8002f8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e001      	b.n	8002f8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000030 	.word	0x20000030
 8002f9c:	20000028 	.word	0x20000028
 8002fa0:	2000002c 	.word	0x2000002c

08002fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000030 	.word	0x20000030
 8002fc8:	200006c4 	.word	0x200006c4

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200006c4 	.word	0x200006c4

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000030 	.word	0x20000030

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff47 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff5c 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffb0 	bl	800314c <SysTick_Config>
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003206:	e166      	b.n	80034d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2101      	movs	r1, #1
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa01 f303 	lsl.w	r3, r1, r3
 8003214:	4013      	ands	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8158 	beq.w	80034d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d005      	beq.n	8003238 <HAL_GPIO_Init+0x40>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d130      	bne.n	800329a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800326e:	2201      	movs	r2, #1
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	f003 0201 	and.w	r2, r3, #1
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d017      	beq.n	80032d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2203      	movs	r2, #3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d123      	bne.n	800332a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	08da      	lsrs	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3208      	adds	r2, #8
 80032ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	08da      	lsrs	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3208      	adds	r2, #8
 8003324:	6939      	ldr	r1, [r7, #16]
 8003326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0203 	and.w	r2, r3, #3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80b2 	beq.w	80034d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336c:	4b61      	ldr	r3, [pc, #388]	; (80034f4 <HAL_GPIO_Init+0x2fc>)
 800336e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003370:	4a60      	ldr	r2, [pc, #384]	; (80034f4 <HAL_GPIO_Init+0x2fc>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6613      	str	r3, [r2, #96]	; 0x60
 8003378:	4b5e      	ldr	r3, [pc, #376]	; (80034f4 <HAL_GPIO_Init+0x2fc>)
 800337a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003384:	4a5c      	ldr	r2, [pc, #368]	; (80034f8 <HAL_GPIO_Init+0x300>)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	220f      	movs	r2, #15
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033ae:	d02b      	beq.n	8003408 <HAL_GPIO_Init+0x210>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a52      	ldr	r2, [pc, #328]	; (80034fc <HAL_GPIO_Init+0x304>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d025      	beq.n	8003404 <HAL_GPIO_Init+0x20c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a51      	ldr	r2, [pc, #324]	; (8003500 <HAL_GPIO_Init+0x308>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d01f      	beq.n	8003400 <HAL_GPIO_Init+0x208>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a50      	ldr	r2, [pc, #320]	; (8003504 <HAL_GPIO_Init+0x30c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d019      	beq.n	80033fc <HAL_GPIO_Init+0x204>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a4f      	ldr	r2, [pc, #316]	; (8003508 <HAL_GPIO_Init+0x310>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <HAL_GPIO_Init+0x200>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a4e      	ldr	r2, [pc, #312]	; (800350c <HAL_GPIO_Init+0x314>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00d      	beq.n	80033f4 <HAL_GPIO_Init+0x1fc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a4d      	ldr	r2, [pc, #308]	; (8003510 <HAL_GPIO_Init+0x318>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d007      	beq.n	80033f0 <HAL_GPIO_Init+0x1f8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a4c      	ldr	r2, [pc, #304]	; (8003514 <HAL_GPIO_Init+0x31c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d101      	bne.n	80033ec <HAL_GPIO_Init+0x1f4>
 80033e8:	2307      	movs	r3, #7
 80033ea:	e00e      	b.n	800340a <HAL_GPIO_Init+0x212>
 80033ec:	2308      	movs	r3, #8
 80033ee:	e00c      	b.n	800340a <HAL_GPIO_Init+0x212>
 80033f0:	2306      	movs	r3, #6
 80033f2:	e00a      	b.n	800340a <HAL_GPIO_Init+0x212>
 80033f4:	2305      	movs	r3, #5
 80033f6:	e008      	b.n	800340a <HAL_GPIO_Init+0x212>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e006      	b.n	800340a <HAL_GPIO_Init+0x212>
 80033fc:	2303      	movs	r3, #3
 80033fe:	e004      	b.n	800340a <HAL_GPIO_Init+0x212>
 8003400:	2302      	movs	r3, #2
 8003402:	e002      	b.n	800340a <HAL_GPIO_Init+0x212>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_GPIO_Init+0x212>
 8003408:	2300      	movs	r3, #0
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	f002 0203 	and.w	r2, r2, #3
 8003410:	0092      	lsls	r2, r2, #2
 8003412:	4093      	lsls	r3, r2
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800341a:	4937      	ldr	r1, [pc, #220]	; (80034f8 <HAL_GPIO_Init+0x300>)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	3302      	adds	r3, #2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003428:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_GPIO_Init+0x320>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	43db      	mvns	r3, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800344c:	4a32      	ldr	r2, [pc, #200]	; (8003518 <HAL_GPIO_Init+0x320>)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003452:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_GPIO_Init+0x320>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003476:	4a28      	ldr	r2, [pc, #160]	; (8003518 <HAL_GPIO_Init+0x320>)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800347c:	4b26      	ldr	r3, [pc, #152]	; (8003518 <HAL_GPIO_Init+0x320>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	43db      	mvns	r3, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034a0:	4a1d      	ldr	r2, [pc, #116]	; (8003518 <HAL_GPIO_Init+0x320>)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034a6:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <HAL_GPIO_Init+0x320>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034ca:	4a13      	ldr	r2, [pc, #76]	; (8003518 <HAL_GPIO_Init+0x320>)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3301      	adds	r3, #1
 80034d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f47f ae91 	bne.w	8003208 <HAL_GPIO_Init+0x10>
  }
}
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40010000 	.word	0x40010000
 80034fc:	48000400 	.word	0x48000400
 8003500:	48000800 	.word	0x48000800
 8003504:	48000c00 	.word	0x48000c00
 8003508:	48001000 	.word	0x48001000
 800350c:	48001400 	.word	0x48001400
 8003510:	48001800 	.word	0x48001800
 8003514:	48001c00 	.word	0x48001c00
 8003518:	40010400 	.word	0x40010400

0800351c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e001      	b.n	800353e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
 8003558:	4613      	mov	r3, r2
 800355a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800355c:	787b      	ldrb	r3, [r7, #1]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003568:	e002      	b.n	8003570 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800357c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357e:	b08f      	sub	sp, #60	; 0x3c
 8003580:	af0a      	add	r7, sp, #40	; 0x28
 8003582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e116      	b.n	80037bc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff fb01 	bl	8002bb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2203      	movs	r2, #3
 80035b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 fd20 	bl	8006012 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	687e      	ldr	r6, [r7, #4]
 80035da:	466d      	mov	r5, sp
 80035dc:	f106 0410 	add.w	r4, r6, #16
 80035e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80035f0:	1d33      	adds	r3, r6, #4
 80035f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f4:	6838      	ldr	r0, [r7, #0]
 80035f6:	f002 fce0 	bl	8005fba <USB_CoreInit>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0d7      	b.n	80037bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f002 fd0e 	bl	8006034 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	e04a      	b.n	80036b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	333d      	adds	r3, #61	; 0x3d
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	333c      	adds	r3, #60	; 0x3c
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	b298      	uxth	r0, r3
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	3344      	adds	r3, #68	; 0x44
 800365a:	4602      	mov	r2, r0
 800365c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800365e:	7bfa      	ldrb	r2, [r7, #15]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3340      	adds	r3, #64	; 0x40
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	3348      	adds	r3, #72	; 0x48
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	334c      	adds	r3, #76	; 0x4c
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	3354      	adds	r3, #84	; 0x54
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	3301      	adds	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d3af      	bcc.n	800361e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	e044      	b.n	800374e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	3301      	adds	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	7bfa      	ldrb	r2, [r7, #15]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d3b5      	bcc.n	80036c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	687e      	ldr	r6, [r7, #4]
 8003760:	466d      	mov	r5, sp
 8003762:	f106 0410 	add.w	r4, r6, #16
 8003766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800376a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800376c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800376e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003772:	e885 0003 	stmia.w	r5, {r0, r1}
 8003776:	1d33      	adds	r3, r6, #4
 8003778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800377a:	6838      	ldr	r0, [r7, #0]
 800377c:	f002 fca6 	bl	80060cc <USB_DevInit>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e014      	b.n	80037bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d102      	bne.n	80037b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f80a 	bl	80037c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 fe52 	bl	800645e <USB_DevDisconnect>

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f6:	f043 0303 	orr.w	r3, r3, #3
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381a:	6013      	str	r3, [r2, #0]
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40007000 	.word	0x40007000

0800382c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <HAL_PWREx_GetVoltageRange+0x18>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40007000 	.word	0x40007000

08003848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003856:	d130      	bne.n	80038ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003864:	d038      	beq.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800386e:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2232      	movs	r2, #50	; 0x32
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0c9b      	lsrs	r3, r3, #18
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800388c:	e002      	b.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b01      	subs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a0:	d102      	bne.n	80038a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f2      	bne.n	800388e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	d110      	bne.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e00f      	b.n	80038da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c6:	d007      	beq.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038c8:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d0:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40007000 	.word	0x40007000
 80038ec:	20000028 	.word	0x20000028
 80038f0:	431bde83 	.word	0x431bde83

080038f4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003902:	6053      	str	r3, [r2, #4]
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40007000 	.word	0x40007000

08003914 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_PWREx_EnableVddIO2+0x1c>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4a04      	ldr	r2, [pc, #16]	; (8003930 <HAL_PWREx_EnableVddIO2+0x1c>)
 800391e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003922:	6053      	str	r3, [r2, #4]
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40007000 	.word	0x40007000

08003934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f000 bc08 	b.w	8004158 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003948:	4b96      	ldr	r3, [pc, #600]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003952:	4b94      	ldr	r3, [pc, #592]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80e4 	beq.w	8003b32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <HAL_RCC_OscConfig+0x4c>
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	f040 808b 	bne.w	8003a8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b01      	cmp	r3, #1
 800397c:	f040 8087 	bne.w	8003a8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003980:	4b88      	ldr	r3, [pc, #544]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_OscConfig+0x64>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e3df      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1a      	ldr	r2, [r3, #32]
 800399c:	4b81      	ldr	r3, [pc, #516]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_RCC_OscConfig+0x7e>
 80039a8:	4b7e      	ldr	r3, [pc, #504]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b0:	e005      	b.n	80039be <HAL_RCC_OscConfig+0x8a>
 80039b2:	4b7c      	ldr	r3, [pc, #496]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 80039b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039be:	4293      	cmp	r3, r2
 80039c0:	d223      	bcs.n	8003a0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fd92 	bl	80044f0 <RCC_SetFlashLatencyFromMSIRange>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e3c0      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d6:	4b73      	ldr	r3, [pc, #460]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a72      	ldr	r2, [pc, #456]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 80039dc:	f043 0308 	orr.w	r3, r3, #8
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	4b70      	ldr	r3, [pc, #448]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	496d      	ldr	r1, [pc, #436]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039f4:	4b6b      	ldr	r3, [pc, #428]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	4968      	ldr	r1, [pc, #416]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
 8003a08:	e025      	b.n	8003a56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a0a:	4b66      	ldr	r3, [pc, #408]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a65      	ldr	r2, [pc, #404]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003a10:	f043 0308 	orr.w	r3, r3, #8
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b63      	ldr	r3, [pc, #396]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4960      	ldr	r1, [pc, #384]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a28:	4b5e      	ldr	r3, [pc, #376]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	495b      	ldr	r1, [pc, #364]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fd52 	bl	80044f0 <RCC_SetFlashLatencyFromMSIRange>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e380      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a56:	f000 fc87 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	4b51      	ldr	r3, [pc, #324]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	4950      	ldr	r1, [pc, #320]	; (8003ba8 <HAL_RCC_OscConfig+0x274>)
 8003a68:	5ccb      	ldrb	r3, [r1, r3]
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a72:	4a4e      	ldr	r2, [pc, #312]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a76:	4b4e      	ldr	r3, [pc, #312]	; (8003bb0 <HAL_RCC_OscConfig+0x27c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fa56 	bl	8002f2c <HAL_InitTick>
 8003a80:	4603      	mov	r3, r0
 8003a82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d052      	beq.n	8003b30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	e364      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d032      	beq.n	8003afc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a96:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a42      	ldr	r2, [pc, #264]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aa2:	f7ff fa93 	bl	8002fcc <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aaa:	f7ff fa8f 	bl	8002fcc <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e34d      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003abc:	4b39      	ldr	r3, [pc, #228]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ac8:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a35      	ldr	r2, [pc, #212]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003ace:	f043 0308 	orr.w	r3, r3, #8
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	4b33      	ldr	r3, [pc, #204]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	4930      	ldr	r1, [pc, #192]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ae6:	4b2f      	ldr	r3, [pc, #188]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	492b      	ldr	r1, [pc, #172]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
 8003afa:	e01a      	b.n	8003b32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003afc:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a28      	ldr	r2, [pc, #160]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b08:	f7ff fa60 	bl	8002fcc <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b10:	f7ff fa5c 	bl	8002fcc <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e31a      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1dc>
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d073      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_OscConfig+0x21c>
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b0c      	cmp	r3, #12
 8003b48:	d10e      	bne.n	8003b68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d10b      	bne.n	8003b68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d063      	beq.n	8003c24 <HAL_RCC_OscConfig+0x2f0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d15f      	bne.n	8003c24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e2f7      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b70:	d106      	bne.n	8003b80 <HAL_RCC_OscConfig+0x24c>
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a0b      	ldr	r2, [pc, #44]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e025      	b.n	8003bcc <HAL_RCC_OscConfig+0x298>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b88:	d114      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x280>
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a05      	ldr	r2, [pc, #20]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a02      	ldr	r2, [pc, #8]	; (8003ba4 <HAL_RCC_OscConfig+0x270>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e013      	b.n	8003bcc <HAL_RCC_OscConfig+0x298>
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	08015444 	.word	0x08015444
 8003bac:	20000028 	.word	0x20000028
 8003bb0:	2000002c 	.word	0x2000002c
 8003bb4:	4ba0      	ldr	r3, [pc, #640]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a9f      	ldr	r2, [pc, #636]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b9d      	ldr	r3, [pc, #628]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a9c      	ldr	r2, [pc, #624]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d013      	beq.n	8003bfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7ff f9fa 	bl	8002fcc <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7ff f9f6 	bl	8002fcc <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e2b4      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bee:	4b92      	ldr	r3, [pc, #584]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x2a8>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7ff f9e6 	bl	8002fcc <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c04:	f7ff f9e2 	bl	8002fcc <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e2a0      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c16:	4b88      	ldr	r3, [pc, #544]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x2d0>
 8003c22:	e000      	b.n	8003c26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d060      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_OscConfig+0x310>
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d119      	bne.n	8003c72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d116      	bne.n	8003c72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c44:	4b7c      	ldr	r3, [pc, #496]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_OscConfig+0x328>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e27d      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5c:	4b76      	ldr	r3, [pc, #472]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	4973      	ldr	r1, [pc, #460]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c70:	e040      	b.n	8003cf4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d023      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c7a:	4b6f      	ldr	r3, [pc, #444]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a6e      	ldr	r2, [pc, #440]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7ff f9a1 	bl	8002fcc <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8e:	f7ff f99d 	bl	8002fcc <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e25b      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ca0:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cac:	4b62      	ldr	r3, [pc, #392]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	061b      	lsls	r3, r3, #24
 8003cba:	495f      	ldr	r1, [pc, #380]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
 8003cc0:	e018      	b.n	8003cf4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc2:	4b5d      	ldr	r3, [pc, #372]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a5c      	ldr	r2, [pc, #368]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cce:	f7ff f97d 	bl	8002fcc <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd6:	f7ff f979 	bl	8002fcc <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e237      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce8:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f0      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d03c      	beq.n	8003d7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01c      	beq.n	8003d42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d08:	4b4b      	ldr	r3, [pc, #300]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0e:	4a4a      	ldr	r2, [pc, #296]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7ff f958 	bl	8002fcc <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d20:	f7ff f954 	bl	8002fcc <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e212      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d32:	4b41      	ldr	r3, [pc, #260]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ef      	beq.n	8003d20 <HAL_RCC_OscConfig+0x3ec>
 8003d40:	e01b      	b.n	8003d7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d42:	4b3d      	ldr	r3, [pc, #244]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d48:	4a3b      	ldr	r2, [pc, #236]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7ff f93b 	bl	8002fcc <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7ff f937 	bl	8002fcc <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1f5      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d6c:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1ef      	bne.n	8003d5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80a6 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d8c:	4b2a      	ldr	r3, [pc, #168]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10d      	bne.n	8003db4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d98:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	4a26      	ldr	r2, [pc, #152]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da2:	6593      	str	r3, [r2, #88]	; 0x58
 8003da4:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db0:	2301      	movs	r3, #1
 8003db2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db4:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <HAL_RCC_OscConfig+0x508>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d118      	bne.n	8003df2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <HAL_RCC_OscConfig+0x508>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <HAL_RCC_OscConfig+0x508>)
 8003dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dcc:	f7ff f8fe 	bl	8002fcc <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd4:	f7ff f8fa 	bl	8002fcc <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e1b8      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_RCC_OscConfig+0x508>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d108      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4d8>
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e0a:	e029      	b.n	8003e60 <HAL_RCC_OscConfig+0x52c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d115      	bne.n	8003e40 <HAL_RCC_OscConfig+0x50c>
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003e1c:	f043 0304 	orr.w	r3, r3, #4
 8003e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e24:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	4a03      	ldr	r2, [pc, #12]	; (8003e38 <HAL_RCC_OscConfig+0x504>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e34:	e014      	b.n	8003e60 <HAL_RCC_OscConfig+0x52c>
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	4b9d      	ldr	r3, [pc, #628]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	4a9c      	ldr	r2, [pc, #624]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e50:	4b99      	ldr	r3, [pc, #612]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	4a98      	ldr	r2, [pc, #608]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003e58:	f023 0304 	bic.w	r3, r3, #4
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d016      	beq.n	8003e96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7ff f8b0 	bl	8002fcc <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7ff f8ac 	bl	8002fcc <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e168      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e86:	4b8c      	ldr	r3, [pc, #560]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ed      	beq.n	8003e70 <HAL_RCC_OscConfig+0x53c>
 8003e94:	e015      	b.n	8003ec2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e96:	f7ff f899 	bl	8002fcc <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e9c:	e00a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9e:	f7ff f895 	bl	8002fcc <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e151      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eb4:	4b80      	ldr	r3, [pc, #512]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1ed      	bne.n	8003e9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec2:	7ffb      	ldrb	r3, [r7, #31]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec8:	4b7b      	ldr	r3, [pc, #492]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	4a7a      	ldr	r2, [pc, #488]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d03c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01c      	beq.n	8003f22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ee8:	4b73      	ldr	r3, [pc, #460]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eee:	4a72      	ldr	r2, [pc, #456]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7ff f868 	bl	8002fcc <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f00:	f7ff f864 	bl	8002fcc <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e122      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f12:	4b69      	ldr	r3, [pc, #420]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ef      	beq.n	8003f00 <HAL_RCC_OscConfig+0x5cc>
 8003f20:	e01b      	b.n	8003f5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f28:	4a63      	ldr	r2, [pc, #396]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f32:	f7ff f84b 	bl	8002fcc <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f3a:	f7ff f847 	bl	8002fcc <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e105      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f4c:	4b5a      	ldr	r3, [pc, #360]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ef      	bne.n	8003f3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80f9 	beq.w	8004156 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	f040 80cf 	bne.w	800410c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f6e:	4b52      	ldr	r3, [pc, #328]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f003 0203 	and.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d12c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d123      	bne.n	8003fdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d11b      	bne.n	8003fdc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d113      	bne.n	8003fdc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d109      	bne.n	8003fdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d071      	beq.n	80040c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d068      	beq.n	80040b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fe2:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d105      	bne.n	8003ffa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fee:	4b32      	ldr	r3, [pc, #200]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e0ac      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ffe:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2d      	ldr	r2, [pc, #180]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8004004:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004008:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800400a:	f7fe ffdf 	bl	8002fcc <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004012:	f7fe ffdb 	bl	8002fcc <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e099      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004024:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f0      	bne.n	8004012 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004030:	4b21      	ldr	r3, [pc, #132]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <HAL_RCC_OscConfig+0x788>)
 8004036:	4013      	ands	r3, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004040:	3a01      	subs	r2, #1
 8004042:	0112      	lsls	r2, r2, #4
 8004044:	4311      	orrs	r1, r2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800404a:	0212      	lsls	r2, r2, #8
 800404c:	4311      	orrs	r1, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004052:	0852      	lsrs	r2, r2, #1
 8004054:	3a01      	subs	r2, #1
 8004056:	0552      	lsls	r2, r2, #21
 8004058:	4311      	orrs	r1, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800405e:	0852      	lsrs	r2, r2, #1
 8004060:	3a01      	subs	r2, #1
 8004062:	0652      	lsls	r2, r2, #25
 8004064:	4311      	orrs	r1, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800406a:	06d2      	lsls	r2, r2, #27
 800406c:	430a      	orrs	r2, r1
 800406e:	4912      	ldr	r1, [pc, #72]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8004070:	4313      	orrs	r3, r2
 8004072:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004074:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 800407a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004080:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a0c      	ldr	r2, [pc, #48]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 8004086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800408a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800408c:	f7fe ff9e 	bl	8002fcc <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004094:	f7fe ff9a 	bl	8002fcc <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e058      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a6:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <HAL_RCC_OscConfig+0x784>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b2:	e050      	b.n	8004156 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e04f      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
 80040b8:	40021000 	.word	0x40021000
 80040bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <HAL_RCC_OscConfig+0x82c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d144      	bne.n	8004156 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040cc:	4b24      	ldr	r3, [pc, #144]	; (8004160 <HAL_RCC_OscConfig+0x82c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a23      	ldr	r2, [pc, #140]	; (8004160 <HAL_RCC_OscConfig+0x82c>)
 80040d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d8:	4b21      	ldr	r3, [pc, #132]	; (8004160 <HAL_RCC_OscConfig+0x82c>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a20      	ldr	r2, [pc, #128]	; (8004160 <HAL_RCC_OscConfig+0x82c>)
 80040de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040e4:	f7fe ff72 	bl	8002fcc <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fe ff6e 	bl	8002fcc <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e02c      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fe:	4b18      	ldr	r3, [pc, #96]	; (8004160 <HAL_RCC_OscConfig+0x82c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x7b8>
 800410a:	e024      	b.n	8004156 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d01f      	beq.n	8004152 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b13      	ldr	r3, [pc, #76]	; (8004160 <HAL_RCC_OscConfig+0x82c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a12      	ldr	r2, [pc, #72]	; (8004160 <HAL_RCC_OscConfig+0x82c>)
 8004118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411e:	f7fe ff55 	bl	8002fcc <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004126:	f7fe ff51 	bl	8002fcc <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e00f      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_RCC_OscConfig+0x82c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f0      	bne.n	8004126 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_RCC_OscConfig+0x82c>)
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	4905      	ldr	r1, [pc, #20]	; (8004160 <HAL_RCC_OscConfig+0x82c>)
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_OscConfig+0x830>)
 800414c:	4013      	ands	r3, r2
 800414e:	60cb      	str	r3, [r1, #12]
 8004150:	e001      	b.n	8004156 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000
 8004164:	feeefffc 	.word	0xfeeefffc

08004168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0e7      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800417c:	4b75      	ldr	r3, [pc, #468]	; (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d910      	bls.n	80041ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b72      	ldr	r3, [pc, #456]	; (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 0207 	bic.w	r2, r3, #7
 8004192:	4970      	ldr	r1, [pc, #448]	; (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b6e      	ldr	r3, [pc, #440]	; (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0cf      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d010      	beq.n	80041da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d908      	bls.n	80041da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c8:	4b63      	ldr	r3, [pc, #396]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4960      	ldr	r1, [pc, #384]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d04c      	beq.n	8004280 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ee:	4b5a      	ldr	r3, [pc, #360]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d121      	bne.n	800423e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0a6      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d107      	bne.n	8004216 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004206:	4b54      	ldr	r3, [pc, #336]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d115      	bne.n	800423e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e09a      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800421e:	4b4e      	ldr	r3, [pc, #312]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e08e      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800422e:	4b4a      	ldr	r3, [pc, #296]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e086      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800423e:	4b46      	ldr	r3, [pc, #280]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4943      	ldr	r1, [pc, #268]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004250:	f7fe febc 	bl	8002fcc <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	e00a      	b.n	800426e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fe feb8 	bl	8002fcc <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	; 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e06e      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	4b3a      	ldr	r3, [pc, #232]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 020c 	and.w	r2, r3, #12
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d1eb      	bne.n	8004258 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d010      	beq.n	80042ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	4b31      	ldr	r3, [pc, #196]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004298:	429a      	cmp	r2, r3
 800429a:	d208      	bcs.n	80042ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800429c:	4b2e      	ldr	r3, [pc, #184]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	492b      	ldr	r1, [pc, #172]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ae:	4b29      	ldr	r3, [pc, #164]	; (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d210      	bcs.n	80042de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042bc:	4b25      	ldr	r3, [pc, #148]	; (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f023 0207 	bic.w	r2, r3, #7
 80042c4:	4923      	ldr	r1, [pc, #140]	; (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042cc:	4b21      	ldr	r3, [pc, #132]	; (8004354 <HAL_RCC_ClockConfig+0x1ec>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e036      	b.n	800434c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	4918      	ldr	r1, [pc, #96]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4910      	ldr	r1, [pc, #64]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800431c:	f000 f824 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <HAL_RCC_ClockConfig+0x1f0>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	091b      	lsrs	r3, r3, #4
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	490b      	ldr	r1, [pc, #44]	; (800435c <HAL_RCC_ClockConfig+0x1f4>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	4a09      	ldr	r2, [pc, #36]	; (8004360 <HAL_RCC_ClockConfig+0x1f8>)
 800433a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_RCC_ClockConfig+0x1fc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f7fe fdf3 	bl	8002f2c <HAL_InitTick>
 8004346:	4603      	mov	r3, r0
 8004348:	72fb      	strb	r3, [r7, #11]

  return status;
 800434a:	7afb      	ldrb	r3, [r7, #11]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40022000 	.word	0x40022000
 8004358:	40021000 	.word	0x40021000
 800435c:	08015444 	.word	0x08015444
 8004360:	20000028 	.word	0x20000028
 8004364:	2000002c 	.word	0x2000002c

08004368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	2300      	movs	r3, #0
 8004374:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004376:	4b3e      	ldr	r3, [pc, #248]	; (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004380:	4b3b      	ldr	r3, [pc, #236]	; (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x34>
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b0c      	cmp	r3, #12
 8004394:	d121      	bne.n	80043da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d11e      	bne.n	80043da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800439c:	4b34      	ldr	r3, [pc, #208]	; (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043a8:	4b31      	ldr	r3, [pc, #196]	; (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 80043aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	e005      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043b8:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043c4:	4a2b      	ldr	r2, [pc, #172]	; (8004474 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d102      	bne.n	80043e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <HAL_RCC_GetSysClockFreq+0x110>)
 80043e2:	61bb      	str	r3, [r7, #24]
 80043e4:	e004      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043ec:	4b23      	ldr	r3, [pc, #140]	; (800447c <HAL_RCC_GetSysClockFreq+0x114>)
 80043ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	d134      	bne.n	8004460 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043f6:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d003      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0xa6>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d003      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0xac>
 800440c:	e005      	b.n	800441a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800440e:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <HAL_RCC_GetSysClockFreq+0x110>)
 8004410:	617b      	str	r3, [r7, #20]
      break;
 8004412:	e005      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <HAL_RCC_GetSysClockFreq+0x114>)
 8004416:	617b      	str	r3, [r7, #20]
      break;
 8004418:	e002      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	617b      	str	r3, [r7, #20]
      break;
 800441e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004420:	4b13      	ldr	r3, [pc, #76]	; (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	091b      	lsrs	r3, r3, #4
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	3301      	adds	r3, #1
 800442c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	fb03 f202 	mul.w	r2, r3, r2
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <HAL_RCC_GetSysClockFreq+0x108>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	0e5b      	lsrs	r3, r3, #25
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	3301      	adds	r3, #1
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	fbb2 f3f3 	udiv	r3, r2, r3
 800445e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004460:	69bb      	ldr	r3, [r7, #24]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3724      	adds	r7, #36	; 0x24
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000
 8004474:	0801545c 	.word	0x0801545c
 8004478:	00f42400 	.word	0x00f42400
 800447c:	007a1200 	.word	0x007a1200

08004480 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <HAL_RCC_GetHCLKFreq+0x14>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000028 	.word	0x20000028

08004498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800449c:	f7ff fff0 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0a1b      	lsrs	r3, r3, #8
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4904      	ldr	r1, [pc, #16]	; (80044c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40021000 	.word	0x40021000
 80044c0:	08015454 	.word	0x08015454

080044c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044c8:	f7ff ffda 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	0adb      	lsrs	r3, r3, #11
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4904      	ldr	r1, [pc, #16]	; (80044ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	08015454 	.word	0x08015454

080044f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044fc:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004508:	f7ff f990 	bl	800382c <HAL_PWREx_GetVoltageRange>
 800450c:	6178      	str	r0, [r7, #20]
 800450e:	e014      	b.n	800453a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451a:	6593      	str	r3, [r2, #88]	; 0x58
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800451e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004528:	f7ff f980 	bl	800382c <HAL_PWREx_GetVoltageRange>
 800452c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004532:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004538:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004540:	d10b      	bne.n	800455a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b80      	cmp	r3, #128	; 0x80
 8004546:	d919      	bls.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2ba0      	cmp	r3, #160	; 0xa0
 800454c:	d902      	bls.n	8004554 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800454e:	2302      	movs	r3, #2
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e013      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004554:	2301      	movs	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	e010      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	d902      	bls.n	8004566 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004560:	2303      	movs	r3, #3
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	e00a      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b80      	cmp	r3, #128	; 0x80
 800456a:	d102      	bne.n	8004572 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800456c:	2302      	movs	r3, #2
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	e004      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b70      	cmp	r3, #112	; 0x70
 8004576:	d101      	bne.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004578:	2301      	movs	r3, #1
 800457a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 0207 	bic.w	r2, r3, #7
 8004584:	4909      	ldr	r1, [pc, #36]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800458c:	4b07      	ldr	r3, [pc, #28]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	429a      	cmp	r2, r3
 8004598:	d001      	beq.n	800459e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40022000 	.word	0x40022000

080045b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045b8:	2300      	movs	r3, #0
 80045ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045bc:	2300      	movs	r3, #0
 80045be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d041      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045d4:	d02a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045da:	d824      	bhi.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045e0:	d008      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045e6:	d81e      	bhi.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f0:	d010      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045f2:	e018      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045f4:	4b86      	ldr	r3, [pc, #536]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a85      	ldr	r2, [pc, #532]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004600:	e015      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3304      	adds	r3, #4
 8004606:	2100      	movs	r1, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fadd 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004612:	e00c      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3320      	adds	r3, #32
 8004618:	2100      	movs	r1, #0
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fbc6 	bl	8004dac <RCCEx_PLLSAI2_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004624:	e003      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	74fb      	strb	r3, [r7, #19]
      break;
 800462a:	e000      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800462c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800462e:	7cfb      	ldrb	r3, [r7, #19]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004634:	4b76      	ldr	r3, [pc, #472]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004642:	4973      	ldr	r1, [pc, #460]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800464a:	e001      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d041      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004660:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004664:	d02a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004666:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800466a:	d824      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800466c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004670:	d008      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004676:	d81e      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800467c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004680:	d010      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004682:	e018      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004684:	4b62      	ldr	r3, [pc, #392]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4a61      	ldr	r2, [pc, #388]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004690:	e015      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3304      	adds	r3, #4
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fa95 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 800469e:	4603      	mov	r3, r0
 80046a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046a2:	e00c      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3320      	adds	r3, #32
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fb7e 	bl	8004dac <RCCEx_PLLSAI2_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046b4:	e003      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	74fb      	strb	r3, [r7, #19]
      break;
 80046ba:	e000      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046be:	7cfb      	ldrb	r3, [r7, #19]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046c4:	4b52      	ldr	r3, [pc, #328]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d2:	494f      	ldr	r1, [pc, #316]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046da:	e001      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80a0 	beq.w	800482e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ee:	2300      	movs	r3, #0
 80046f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046f2:	4b47      	ldr	r3, [pc, #284]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004702:	2300      	movs	r3, #0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004708:	4b41      	ldr	r3, [pc, #260]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470c:	4a40      	ldr	r2, [pc, #256]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004712:	6593      	str	r3, [r2, #88]	; 0x58
 8004714:	4b3e      	ldr	r3, [pc, #248]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004720:	2301      	movs	r3, #1
 8004722:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004724:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a3a      	ldr	r2, [pc, #232]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800472a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004730:	f7fe fc4c 	bl	8002fcc <HAL_GetTick>
 8004734:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004736:	e009      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004738:	f7fe fc48 	bl	8002fcc <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d902      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	74fb      	strb	r3, [r7, #19]
        break;
 800474a:	e005      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800474c:	4b31      	ldr	r3, [pc, #196]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ef      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d15c      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800475e:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004768:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01f      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	429a      	cmp	r2, r3
 800477a:	d019      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800477c:	4b24      	ldr	r3, [pc, #144]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004786:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004788:	4b21      	ldr	r3, [pc, #132]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	4a20      	ldr	r2, [pc, #128]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004798:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	4a1c      	ldr	r2, [pc, #112]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047a8:	4a19      	ldr	r2, [pc, #100]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d016      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ba:	f7fe fc07 	bl	8002fcc <HAL_GetTick>
 80047be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c0:	e00b      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fe fc03 	bl	8002fcc <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d902      	bls.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	74fb      	strb	r3, [r7, #19]
            break;
 80047d8:	e006      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047da:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ec      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10c      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	4904      	ldr	r1, [pc, #16]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004806:	e009      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	74bb      	strb	r3, [r7, #18]
 800480c:	e006      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000
 8004814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800481c:	7c7b      	ldrb	r3, [r7, #17]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d105      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004822:	4ba6      	ldr	r3, [pc, #664]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	4aa5      	ldr	r2, [pc, #660]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800482c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800483a:	4ba0      	ldr	r3, [pc, #640]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f023 0203 	bic.w	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	499c      	ldr	r1, [pc, #624]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800485c:	4b97      	ldr	r3, [pc, #604]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f023 020c 	bic.w	r2, r3, #12
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	4994      	ldr	r1, [pc, #592]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800487e:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	498b      	ldr	r1, [pc, #556]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048a0:	4b86      	ldr	r3, [pc, #536]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	4983      	ldr	r1, [pc, #524]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048c2:	4b7e      	ldr	r3, [pc, #504]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d0:	497a      	ldr	r1, [pc, #488]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048e4:	4b75      	ldr	r3, [pc, #468]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f2:	4972      	ldr	r1, [pc, #456]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004906:	4b6d      	ldr	r3, [pc, #436]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004914:	4969      	ldr	r1, [pc, #420]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004928:	4b64      	ldr	r3, [pc, #400]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004936:	4961      	ldr	r1, [pc, #388]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800494a:	4b5c      	ldr	r3, [pc, #368]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	4958      	ldr	r1, [pc, #352]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800496c:	4b53      	ldr	r3, [pc, #332]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	4950      	ldr	r1, [pc, #320]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800498e:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	4947      	ldr	r1, [pc, #284]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049b0:	4b42      	ldr	r3, [pc, #264]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b6:	f023 0203 	bic.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049be:	493f      	ldr	r1, [pc, #252]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d028      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049d2:	4b3a      	ldr	r3, [pc, #232]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e0:	4936      	ldr	r1, [pc, #216]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049f0:	d106      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f2:	4b32      	ldr	r3, [pc, #200]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	4a31      	ldr	r2, [pc, #196]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fc:	60d3      	str	r3, [r2, #12]
 80049fe:	e011      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a08:	d10c      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	2101      	movs	r1, #1
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 f8d9 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a1a:	7cfb      	ldrb	r3, [r7, #19]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d028      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3e:	491f      	ldr	r1, [pc, #124]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a19      	ldr	r2, [pc, #100]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a5a:	60d3      	str	r3, [r2, #12]
 8004a5c:	e011      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f8aa 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004a7e:	7cfb      	ldrb	r3, [r7, #19]
 8004a80:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a9c:	4907      	ldr	r1, [pc, #28]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aac:	d108      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aae:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	4a02      	ldr	r2, [pc, #8]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab8:	60d3      	str	r3, [r2, #12]
 8004aba:	e013      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004abc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3304      	adds	r3, #4
 8004ace:	2101      	movs	r1, #1
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 f879 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ada:	7cfb      	ldrb	r3, [r7, #19]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d02f      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004af0:	4b2c      	ldr	r3, [pc, #176]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afe:	4929      	ldr	r1, [pc, #164]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b0e:	d10d      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	2102      	movs	r1, #2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f856 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d014      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	74bb      	strb	r3, [r7, #18]
 8004b2a:	e011      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b34:	d10c      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3320      	adds	r3, #32
 8004b3a:	2102      	movs	r1, #2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 f935 	bl	8004dac <RCCEx_PLLSAI2_Config>
 8004b42:	4603      	mov	r3, r0
 8004b44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b46:	7cfb      	ldrb	r3, [r7, #19]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004b4c:	7cfb      	ldrb	r3, [r7, #19]
 8004b4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00b      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b5c:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b6c:	490d      	ldr	r1, [pc, #52]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00b      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b80:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b90:	4904      	ldr	r1, [pc, #16]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b98:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40021000 	.word	0x40021000

08004ba8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a04      	ldr	r2, [pc, #16]	; (8004bc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	6013      	str	r3, [r2, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bd6:	4b74      	ldr	r3, [pc, #464]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d018      	beq.n	8004c14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004be2:	4b71      	ldr	r3, [pc, #452]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 0203 	and.w	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d10d      	bne.n	8004c0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
       ||
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bfa:	4b6b      	ldr	r3, [pc, #428]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	091b      	lsrs	r3, r3, #4
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
       ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d047      	beq.n	8004c9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
 8004c12:	e044      	b.n	8004c9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d018      	beq.n	8004c4e <RCCEx_PLLSAI1_Config+0x86>
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d825      	bhi.n	8004c6c <RCCEx_PLLSAI1_Config+0xa4>
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d002      	beq.n	8004c2a <RCCEx_PLLSAI1_Config+0x62>
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d009      	beq.n	8004c3c <RCCEx_PLLSAI1_Config+0x74>
 8004c28:	e020      	b.n	8004c6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c2a:	4b5f      	ldr	r3, [pc, #380]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d11d      	bne.n	8004c72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3a:	e01a      	b.n	8004c72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c3c:	4b5a      	ldr	r3, [pc, #360]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d116      	bne.n	8004c76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c4c:	e013      	b.n	8004c76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c4e:	4b56      	ldr	r3, [pc, #344]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10f      	bne.n	8004c7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c5a:	4b53      	ldr	r3, [pc, #332]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c6a:	e006      	b.n	8004c7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c70:	e004      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c72:	bf00      	nop
 8004c74:	e002      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10d      	bne.n	8004c9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c82:	4b49      	ldr	r3, [pc, #292]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6819      	ldr	r1, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	430b      	orrs	r3, r1
 8004c98:	4943      	ldr	r1, [pc, #268]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d17c      	bne.n	8004d9e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ca4:	4b40      	ldr	r3, [pc, #256]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a3f      	ldr	r2, [pc, #252]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004caa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb0:	f7fe f98c 	bl	8002fcc <HAL_GetTick>
 8004cb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cb6:	e009      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cb8:	f7fe f988 	bl	8002fcc <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d902      	bls.n	8004ccc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cca:	e005      	b.n	8004cd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ccc:	4b36      	ldr	r3, [pc, #216]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1ef      	bne.n	8004cb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d15f      	bne.n	8004d9e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d110      	bne.n	8004d06 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce4:	4b30      	ldr	r3, [pc, #192]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004cec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6892      	ldr	r2, [r2, #8]
 8004cf4:	0211      	lsls	r1, r2, #8
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68d2      	ldr	r2, [r2, #12]
 8004cfa:	06d2      	lsls	r2, r2, #27
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	492a      	ldr	r1, [pc, #168]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	610b      	str	r3, [r1, #16]
 8004d04:	e027      	b.n	8004d56 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d112      	bne.n	8004d32 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d0c:	4b26      	ldr	r3, [pc, #152]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6892      	ldr	r2, [r2, #8]
 8004d1c:	0211      	lsls	r1, r2, #8
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6912      	ldr	r2, [r2, #16]
 8004d22:	0852      	lsrs	r2, r2, #1
 8004d24:	3a01      	subs	r2, #1
 8004d26:	0552      	lsls	r2, r2, #21
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	491f      	ldr	r1, [pc, #124]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	610b      	str	r3, [r1, #16]
 8004d30:	e011      	b.n	8004d56 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d32:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6892      	ldr	r2, [r2, #8]
 8004d42:	0211      	lsls	r1, r2, #8
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6952      	ldr	r2, [r2, #20]
 8004d48:	0852      	lsrs	r2, r2, #1
 8004d4a:	3a01      	subs	r2, #1
 8004d4c:	0652      	lsls	r2, r2, #25
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	4915      	ldr	r1, [pc, #84]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d56:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a13      	ldr	r2, [pc, #76]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d62:	f7fe f933 	bl	8002fcc <HAL_GetTick>
 8004d66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d68:	e009      	b.n	8004d7e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d6a:	f7fe f92f 	bl	8002fcc <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d902      	bls.n	8004d7e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	73fb      	strb	r3, [r7, #15]
          break;
 8004d7c:	e005      	b.n	8004d8a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ef      	beq.n	8004d6a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	4903      	ldr	r1, [pc, #12]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40021000 	.word	0x40021000

08004dac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dba:	4b69      	ldr	r3, [pc, #420]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d018      	beq.n	8004df8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dc6:	4b66      	ldr	r3, [pc, #408]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0203 	and.w	r2, r3, #3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d10d      	bne.n	8004df2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
       ||
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dde:	4b60      	ldr	r3, [pc, #384]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	091b      	lsrs	r3, r3, #4
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
       ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d047      	beq.n	8004e82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
 8004df6:	e044      	b.n	8004e82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d018      	beq.n	8004e32 <RCCEx_PLLSAI2_Config+0x86>
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d825      	bhi.n	8004e50 <RCCEx_PLLSAI2_Config+0xa4>
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d002      	beq.n	8004e0e <RCCEx_PLLSAI2_Config+0x62>
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d009      	beq.n	8004e20 <RCCEx_PLLSAI2_Config+0x74>
 8004e0c:	e020      	b.n	8004e50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e0e:	4b54      	ldr	r3, [pc, #336]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d11d      	bne.n	8004e56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e1e:	e01a      	b.n	8004e56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e20:	4b4f      	ldr	r3, [pc, #316]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d116      	bne.n	8004e5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e30:	e013      	b.n	8004e5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e32:	4b4b      	ldr	r3, [pc, #300]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10f      	bne.n	8004e5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e3e:	4b48      	ldr	r3, [pc, #288]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e4e:	e006      	b.n	8004e5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
      break;
 8004e54:	e004      	b.n	8004e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e56:	bf00      	nop
 8004e58:	e002      	b.n	8004e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e000      	b.n	8004e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10d      	bne.n	8004e82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e66:	4b3e      	ldr	r3, [pc, #248]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6819      	ldr	r1, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	4938      	ldr	r1, [pc, #224]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d166      	bne.n	8004f56 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e88:	4b35      	ldr	r3, [pc, #212]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a34      	ldr	r2, [pc, #208]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e94:	f7fe f89a 	bl	8002fcc <HAL_GetTick>
 8004e98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e9a:	e009      	b.n	8004eb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e9c:	f7fe f896 	bl	8002fcc <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d902      	bls.n	8004eb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	73fb      	strb	r3, [r7, #15]
        break;
 8004eae:	e005      	b.n	8004ebc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eb0:	4b2b      	ldr	r3, [pc, #172]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ef      	bne.n	8004e9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d149      	bne.n	8004f56 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d110      	bne.n	8004eea <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ec8:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ed0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6892      	ldr	r2, [r2, #8]
 8004ed8:	0211      	lsls	r1, r2, #8
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68d2      	ldr	r2, [r2, #12]
 8004ede:	06d2      	lsls	r2, r2, #27
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	491f      	ldr	r1, [pc, #124]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	614b      	str	r3, [r1, #20]
 8004ee8:	e011      	b.n	8004f0e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eea:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ef2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6892      	ldr	r2, [r2, #8]
 8004efa:	0211      	lsls	r1, r2, #8
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6912      	ldr	r2, [r2, #16]
 8004f00:	0852      	lsrs	r2, r2, #1
 8004f02:	3a01      	subs	r2, #1
 8004f04:	0652      	lsls	r2, r2, #25
 8004f06:	430a      	orrs	r2, r1
 8004f08:	4915      	ldr	r1, [pc, #84]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f0e:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1a:	f7fe f857 	bl	8002fcc <HAL_GetTick>
 8004f1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f20:	e009      	b.n	8004f36 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f22:	f7fe f853 	bl	8002fcc <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d902      	bls.n	8004f36 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	73fb      	strb	r3, [r7, #15]
          break;
 8004f34:	e005      	b.n	8004f42 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ef      	beq.n	8004f22 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	4903      	ldr	r1, [pc, #12]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40021000 	.word	0x40021000

08004f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e095      	b.n	80050a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d108      	bne.n	8004f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f86:	d009      	beq.n	8004f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	61da      	str	r2, [r3, #28]
 8004f8e:	e005      	b.n	8004f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fd fdb8 	bl	8002b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fdc:	d902      	bls.n	8004fe4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e002      	b.n	8004fea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fe8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ff2:	d007      	beq.n	8005004 <HAL_SPI_Init+0xa0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ffc:	d002      	beq.n	8005004 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	ea42 0103 	orr.w	r1, r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	0c1b      	lsrs	r3, r3, #16
 8005060:	f003 0204 	and.w	r2, r3, #4
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005080:	ea42 0103 	orr.w	r1, r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b088      	sub	sp, #32
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	603b      	str	r3, [r7, #0]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_SPI_Transmit+0x22>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e158      	b.n	800537e <HAL_SPI_Transmit+0x2d4>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050d4:	f7fd ff7a 	bl	8002fcc <HAL_GetTick>
 80050d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d002      	beq.n	80050f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050ea:	2302      	movs	r3, #2
 80050ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050ee:	e13d      	b.n	800536c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_SPI_Transmit+0x52>
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005100:	e134      	b.n	800536c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2203      	movs	r2, #3
 8005106:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	88fa      	ldrh	r2, [r7, #6]
 8005120:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514c:	d10f      	bne.n	800516e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800516c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d007      	beq.n	800518c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800518a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005194:	d94b      	bls.n	800522e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_SPI_Transmit+0xfa>
 800519e:	8afb      	ldrh	r3, [r7, #22]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d13e      	bne.n	8005222 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	881a      	ldrh	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	1c9a      	adds	r2, r3, #2
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051c8:	e02b      	b.n	8005222 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d112      	bne.n	80051fe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	881a      	ldrh	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	1c9a      	adds	r2, r3, #2
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051fc:	e011      	b.n	8005222 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051fe:	f7fd fee5 	bl	8002fcc <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d803      	bhi.n	8005216 <HAL_SPI_Transmit+0x16c>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d102      	bne.n	800521c <HAL_SPI_Transmit+0x172>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005220:	e0a4      	b.n	800536c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1ce      	bne.n	80051ca <HAL_SPI_Transmit+0x120>
 800522c:	e07c      	b.n	8005328 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <HAL_SPI_Transmit+0x192>
 8005236:	8afb      	ldrh	r3, [r7, #22]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d170      	bne.n	800531e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d912      	bls.n	800526c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	881a      	ldrh	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	1c9a      	adds	r2, r3, #2
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b02      	subs	r3, #2
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	87da      	strh	r2, [r3, #62]	; 0x3e
 800526a:	e058      	b.n	800531e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	7812      	ldrb	r2, [r2, #0]
 8005278:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005292:	e044      	b.n	800531e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d12b      	bne.n	80052fa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d912      	bls.n	80052d2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	881a      	ldrh	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b02      	subs	r3, #2
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052d0:	e025      	b.n	800531e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	7812      	ldrb	r2, [r2, #0]
 80052de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052f8:	e011      	b.n	800531e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052fa:	f7fd fe67 	bl	8002fcc <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d803      	bhi.n	8005312 <HAL_SPI_Transmit+0x268>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005310:	d102      	bne.n	8005318 <HAL_SPI_Transmit+0x26e>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d102      	bne.n	800531e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800531c:	e026      	b.n	800536c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1b5      	bne.n	8005294 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f949 	bl	80055c4 <SPI_EndRxTxTransaction>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	77fb      	strb	r3, [r7, #31]
 8005368:	e000      	b.n	800536c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800536a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800537c:	7ffb      	ldrb	r3, [r7, #31]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3720      	adds	r7, #32
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	4613      	mov	r3, r2
 8005396:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005398:	f7fd fe18 	bl	8002fcc <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	4413      	add	r3, r2
 80053a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053a8:	f7fd fe10 	bl	8002fcc <HAL_GetTick>
 80053ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053ae:	4b39      	ldr	r3, [pc, #228]	; (8005494 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	015b      	lsls	r3, r3, #5
 80053b4:	0d1b      	lsrs	r3, r3, #20
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	fb02 f303 	mul.w	r3, r2, r3
 80053bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053be:	e054      	b.n	800546a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d050      	beq.n	800546a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053c8:	f7fd fe00 	bl	8002fcc <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d902      	bls.n	80053de <SPI_WaitFlagStateUntilTimeout+0x56>
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d13d      	bne.n	800545a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f6:	d111      	bne.n	800541c <SPI_WaitFlagStateUntilTimeout+0x94>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005400:	d004      	beq.n	800540c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540a:	d107      	bne.n	800541c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005424:	d10f      	bne.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005444:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e017      	b.n	800548a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3b01      	subs	r3, #1
 8005468:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4013      	ands	r3, r2
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	429a      	cmp	r2, r3
 8005478:	bf0c      	ite	eq
 800547a:	2301      	moveq	r3, #1
 800547c:	2300      	movne	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	429a      	cmp	r2, r3
 8005486:	d19b      	bne.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000028 	.word	0x20000028

08005498 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054aa:	f7fd fd8f 	bl	8002fcc <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	4413      	add	r3, r2
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80054ba:	f7fd fd87 	bl	8002fcc <HAL_GetTick>
 80054be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	330c      	adds	r3, #12
 80054c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054c8:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	00da      	lsls	r2, r3, #3
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	0d1b      	lsrs	r3, r3, #20
 80054d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054e0:	e060      	b.n	80055a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054e8:	d107      	bne.n	80054fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005500:	d050      	beq.n	80055a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005502:	f7fd fd63 	bl	8002fcc <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550e:	429a      	cmp	r2, r3
 8005510:	d902      	bls.n	8005518 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d13d      	bne.n	8005594 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005526:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005530:	d111      	bne.n	8005556 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553a:	d004      	beq.n	8005546 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005544:	d107      	bne.n	8005556 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005554:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800555e:	d10f      	bne.n	8005580 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800557e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e010      	b.n	80055b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d196      	bne.n	80054e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3728      	adds	r7, #40	; 0x28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000028 	.word	0x20000028

080055c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7ff ff5b 	bl	8005498 <SPI_WaitFifoStateUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	f043 0220 	orr.w	r2, r3, #32
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e027      	b.n	8005648 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	2180      	movs	r1, #128	; 0x80
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7ff fec0 	bl	8005388 <SPI_WaitFlagStateUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005612:	f043 0220 	orr.w	r2, r3, #32
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e014      	b.n	8005648 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2200      	movs	r2, #0
 8005626:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff ff34 	bl	8005498 <SPI_WaitFifoStateUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e000      	b.n	8005648 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e040      	b.n	80056e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fd f9fa 	bl	8002a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2224      	movs	r2, #36	; 0x24
 800567c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0201 	bic.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f82c 	bl	80056ec <UART_SetConfig>
 8005694:	4603      	mov	r3, r0
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e022      	b.n	80056e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fad8 	bl	8005c5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fb5f 	bl	8005da0 <UART_CheckIdleState>
 80056e2:	4603      	mov	r3, r0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f0:	b08a      	sub	sp, #40	; 0x28
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	431a      	orrs	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	431a      	orrs	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	4313      	orrs	r3, r2
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4ba4      	ldr	r3, [pc, #656]	; (80059ac <UART_SetConfig+0x2c0>)
 800571c:	4013      	ands	r3, r2
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005724:	430b      	orrs	r3, r1
 8005726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a99      	ldr	r2, [pc, #612]	; (80059b0 <UART_SetConfig+0x2c4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005754:	4313      	orrs	r3, r2
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005768:	430a      	orrs	r2, r1
 800576a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a90      	ldr	r2, [pc, #576]	; (80059b4 <UART_SetConfig+0x2c8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d126      	bne.n	80057c4 <UART_SetConfig+0xd8>
 8005776:	4b90      	ldr	r3, [pc, #576]	; (80059b8 <UART_SetConfig+0x2cc>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b03      	cmp	r3, #3
 8005782:	d81b      	bhi.n	80057bc <UART_SetConfig+0xd0>
 8005784:	a201      	add	r2, pc, #4	; (adr r2, 800578c <UART_SetConfig+0xa0>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	0800579d 	.word	0x0800579d
 8005790:	080057ad 	.word	0x080057ad
 8005794:	080057a5 	.word	0x080057a5
 8005798:	080057b5 	.word	0x080057b5
 800579c:	2301      	movs	r3, #1
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a2:	e116      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80057a4:	2302      	movs	r3, #2
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057aa:	e112      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80057ac:	2304      	movs	r3, #4
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b2:	e10e      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80057b4:	2308      	movs	r3, #8
 80057b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ba:	e10a      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80057bc:	2310      	movs	r3, #16
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c2:	e106      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a7c      	ldr	r2, [pc, #496]	; (80059bc <UART_SetConfig+0x2d0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d138      	bne.n	8005840 <UART_SetConfig+0x154>
 80057ce:	4b7a      	ldr	r3, [pc, #488]	; (80059b8 <UART_SetConfig+0x2cc>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d4:	f003 030c 	and.w	r3, r3, #12
 80057d8:	2b0c      	cmp	r3, #12
 80057da:	d82d      	bhi.n	8005838 <UART_SetConfig+0x14c>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <UART_SetConfig+0xf8>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	08005819 	.word	0x08005819
 80057e8:	08005839 	.word	0x08005839
 80057ec:	08005839 	.word	0x08005839
 80057f0:	08005839 	.word	0x08005839
 80057f4:	08005829 	.word	0x08005829
 80057f8:	08005839 	.word	0x08005839
 80057fc:	08005839 	.word	0x08005839
 8005800:	08005839 	.word	0x08005839
 8005804:	08005821 	.word	0x08005821
 8005808:	08005839 	.word	0x08005839
 800580c:	08005839 	.word	0x08005839
 8005810:	08005839 	.word	0x08005839
 8005814:	08005831 	.word	0x08005831
 8005818:	2300      	movs	r3, #0
 800581a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800581e:	e0d8      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005820:	2302      	movs	r3, #2
 8005822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005826:	e0d4      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005828:	2304      	movs	r3, #4
 800582a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800582e:	e0d0      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005830:	2308      	movs	r3, #8
 8005832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005836:	e0cc      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005838:	2310      	movs	r3, #16
 800583a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800583e:	e0c8      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a5e      	ldr	r2, [pc, #376]	; (80059c0 <UART_SetConfig+0x2d4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d125      	bne.n	8005896 <UART_SetConfig+0x1aa>
 800584a:	4b5b      	ldr	r3, [pc, #364]	; (80059b8 <UART_SetConfig+0x2cc>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005850:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005854:	2b30      	cmp	r3, #48	; 0x30
 8005856:	d016      	beq.n	8005886 <UART_SetConfig+0x19a>
 8005858:	2b30      	cmp	r3, #48	; 0x30
 800585a:	d818      	bhi.n	800588e <UART_SetConfig+0x1a2>
 800585c:	2b20      	cmp	r3, #32
 800585e:	d00a      	beq.n	8005876 <UART_SetConfig+0x18a>
 8005860:	2b20      	cmp	r3, #32
 8005862:	d814      	bhi.n	800588e <UART_SetConfig+0x1a2>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <UART_SetConfig+0x182>
 8005868:	2b10      	cmp	r3, #16
 800586a:	d008      	beq.n	800587e <UART_SetConfig+0x192>
 800586c:	e00f      	b.n	800588e <UART_SetConfig+0x1a2>
 800586e:	2300      	movs	r3, #0
 8005870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005874:	e0ad      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005876:	2302      	movs	r3, #2
 8005878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800587c:	e0a9      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800587e:	2304      	movs	r3, #4
 8005880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005884:	e0a5      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005886:	2308      	movs	r3, #8
 8005888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588c:	e0a1      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800588e:	2310      	movs	r3, #16
 8005890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005894:	e09d      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a4a      	ldr	r2, [pc, #296]	; (80059c4 <UART_SetConfig+0x2d8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d125      	bne.n	80058ec <UART_SetConfig+0x200>
 80058a0:	4b45      	ldr	r3, [pc, #276]	; (80059b8 <UART_SetConfig+0x2cc>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058aa:	2bc0      	cmp	r3, #192	; 0xc0
 80058ac:	d016      	beq.n	80058dc <UART_SetConfig+0x1f0>
 80058ae:	2bc0      	cmp	r3, #192	; 0xc0
 80058b0:	d818      	bhi.n	80058e4 <UART_SetConfig+0x1f8>
 80058b2:	2b80      	cmp	r3, #128	; 0x80
 80058b4:	d00a      	beq.n	80058cc <UART_SetConfig+0x1e0>
 80058b6:	2b80      	cmp	r3, #128	; 0x80
 80058b8:	d814      	bhi.n	80058e4 <UART_SetConfig+0x1f8>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <UART_SetConfig+0x1d8>
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d008      	beq.n	80058d4 <UART_SetConfig+0x1e8>
 80058c2:	e00f      	b.n	80058e4 <UART_SetConfig+0x1f8>
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ca:	e082      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80058cc:	2302      	movs	r3, #2
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058d2:	e07e      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80058d4:	2304      	movs	r3, #4
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058da:	e07a      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80058dc:	2308      	movs	r3, #8
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e2:	e076      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80058e4:	2310      	movs	r3, #16
 80058e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ea:	e072      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a35      	ldr	r2, [pc, #212]	; (80059c8 <UART_SetConfig+0x2dc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d12a      	bne.n	800594c <UART_SetConfig+0x260>
 80058f6:	4b30      	ldr	r3, [pc, #192]	; (80059b8 <UART_SetConfig+0x2cc>)
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005904:	d01a      	beq.n	800593c <UART_SetConfig+0x250>
 8005906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800590a:	d81b      	bhi.n	8005944 <UART_SetConfig+0x258>
 800590c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005910:	d00c      	beq.n	800592c <UART_SetConfig+0x240>
 8005912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005916:	d815      	bhi.n	8005944 <UART_SetConfig+0x258>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <UART_SetConfig+0x238>
 800591c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005920:	d008      	beq.n	8005934 <UART_SetConfig+0x248>
 8005922:	e00f      	b.n	8005944 <UART_SetConfig+0x258>
 8005924:	2300      	movs	r3, #0
 8005926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800592a:	e052      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800592c:	2302      	movs	r3, #2
 800592e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005932:	e04e      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005934:	2304      	movs	r3, #4
 8005936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800593a:	e04a      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800593c:	2308      	movs	r3, #8
 800593e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005942:	e046      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005944:	2310      	movs	r3, #16
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800594a:	e042      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <UART_SetConfig+0x2c4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d13a      	bne.n	80059cc <UART_SetConfig+0x2e0>
 8005956:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <UART_SetConfig+0x2cc>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005960:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005964:	d01a      	beq.n	800599c <UART_SetConfig+0x2b0>
 8005966:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800596a:	d81b      	bhi.n	80059a4 <UART_SetConfig+0x2b8>
 800596c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005970:	d00c      	beq.n	800598c <UART_SetConfig+0x2a0>
 8005972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005976:	d815      	bhi.n	80059a4 <UART_SetConfig+0x2b8>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <UART_SetConfig+0x298>
 800597c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005980:	d008      	beq.n	8005994 <UART_SetConfig+0x2a8>
 8005982:	e00f      	b.n	80059a4 <UART_SetConfig+0x2b8>
 8005984:	2300      	movs	r3, #0
 8005986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598a:	e022      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800598c:	2302      	movs	r3, #2
 800598e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005992:	e01e      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005994:	2304      	movs	r3, #4
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599a:	e01a      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800599c:	2308      	movs	r3, #8
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a2:	e016      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80059a4:	2310      	movs	r3, #16
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059aa:	e012      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80059ac:	efff69f3 	.word	0xefff69f3
 80059b0:	40008000 	.word	0x40008000
 80059b4:	40013800 	.word	0x40013800
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40004400 	.word	0x40004400
 80059c0:	40004800 	.word	0x40004800
 80059c4:	40004c00 	.word	0x40004c00
 80059c8:	40005000 	.word	0x40005000
 80059cc:	2310      	movs	r3, #16
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a9f      	ldr	r2, [pc, #636]	; (8005c54 <UART_SetConfig+0x568>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d17a      	bne.n	8005ad2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d824      	bhi.n	8005a2e <UART_SetConfig+0x342>
 80059e4:	a201      	add	r2, pc, #4	; (adr r2, 80059ec <UART_SetConfig+0x300>)
 80059e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ea:	bf00      	nop
 80059ec:	08005a11 	.word	0x08005a11
 80059f0:	08005a2f 	.word	0x08005a2f
 80059f4:	08005a19 	.word	0x08005a19
 80059f8:	08005a2f 	.word	0x08005a2f
 80059fc:	08005a1f 	.word	0x08005a1f
 8005a00:	08005a2f 	.word	0x08005a2f
 8005a04:	08005a2f 	.word	0x08005a2f
 8005a08:	08005a2f 	.word	0x08005a2f
 8005a0c:	08005a27 	.word	0x08005a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a10:	f7fe fd42 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8005a14:	61f8      	str	r0, [r7, #28]
        break;
 8005a16:	e010      	b.n	8005a3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a18:	4b8f      	ldr	r3, [pc, #572]	; (8005c58 <UART_SetConfig+0x56c>)
 8005a1a:	61fb      	str	r3, [r7, #28]
        break;
 8005a1c:	e00d      	b.n	8005a3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a1e:	f7fe fca3 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8005a22:	61f8      	str	r0, [r7, #28]
        break;
 8005a24:	e009      	b.n	8005a3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2a:	61fb      	str	r3, [r7, #28]
        break;
 8005a2c:	e005      	b.n	8005a3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80fb 	beq.w	8005c38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	4413      	add	r3, r2
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d305      	bcc.n	8005a5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d903      	bls.n	8005a66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a64:	e0e8      	b.n	8005c38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	461c      	mov	r4, r3
 8005a6c:	4615      	mov	r5, r2
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	022b      	lsls	r3, r5, #8
 8005a78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a7c:	0222      	lsls	r2, r4, #8
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	6849      	ldr	r1, [r1, #4]
 8005a82:	0849      	lsrs	r1, r1, #1
 8005a84:	2000      	movs	r0, #0
 8005a86:	4688      	mov	r8, r1
 8005a88:	4681      	mov	r9, r0
 8005a8a:	eb12 0a08 	adds.w	sl, r2, r8
 8005a8e:	eb43 0b09 	adc.w	fp, r3, r9
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aa0:	4650      	mov	r0, sl
 8005aa2:	4659      	mov	r1, fp
 8005aa4:	f7fa fbf4 	bl	8000290 <__aeabi_uldivmod>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4613      	mov	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab6:	d308      	bcc.n	8005aca <UART_SetConfig+0x3de>
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005abe:	d204      	bcs.n	8005aca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	60da      	str	r2, [r3, #12]
 8005ac8:	e0b6      	b.n	8005c38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ad0:	e0b2      	b.n	8005c38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ada:	d15e      	bne.n	8005b9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d828      	bhi.n	8005b36 <UART_SetConfig+0x44a>
 8005ae4:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <UART_SetConfig+0x400>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	08005b37 	.word	0x08005b37
 8005afc:	08005b27 	.word	0x08005b27
 8005b00:	08005b37 	.word	0x08005b37
 8005b04:	08005b37 	.word	0x08005b37
 8005b08:	08005b37 	.word	0x08005b37
 8005b0c:	08005b2f 	.word	0x08005b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b10:	f7fe fcc2 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8005b14:	61f8      	str	r0, [r7, #28]
        break;
 8005b16:	e014      	b.n	8005b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b18:	f7fe fcd4 	bl	80044c4 <HAL_RCC_GetPCLK2Freq>
 8005b1c:	61f8      	str	r0, [r7, #28]
        break;
 8005b1e:	e010      	b.n	8005b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b20:	4b4d      	ldr	r3, [pc, #308]	; (8005c58 <UART_SetConfig+0x56c>)
 8005b22:	61fb      	str	r3, [r7, #28]
        break;
 8005b24:	e00d      	b.n	8005b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b26:	f7fe fc1f 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8005b2a:	61f8      	str	r0, [r7, #28]
        break;
 8005b2c:	e009      	b.n	8005b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b32:	61fb      	str	r3, [r7, #28]
        break;
 8005b34:	e005      	b.n	8005b42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d077      	beq.n	8005c38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	005a      	lsls	r2, r3, #1
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	441a      	add	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b0f      	cmp	r3, #15
 8005b62:	d916      	bls.n	8005b92 <UART_SetConfig+0x4a6>
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b6a:	d212      	bcs.n	8005b92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f023 030f 	bic.w	r3, r3, #15
 8005b74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	085b      	lsrs	r3, r3, #1
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	8afb      	ldrh	r3, [r7, #22]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	8afa      	ldrh	r2, [r7, #22]
 8005b8e:	60da      	str	r2, [r3, #12]
 8005b90:	e052      	b.n	8005c38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b98:	e04e      	b.n	8005c38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d827      	bhi.n	8005bf2 <UART_SetConfig+0x506>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <UART_SetConfig+0x4bc>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005bd5 	.word	0x08005bd5
 8005bb0:	08005bdd 	.word	0x08005bdd
 8005bb4:	08005bf3 	.word	0x08005bf3
 8005bb8:	08005be3 	.word	0x08005be3
 8005bbc:	08005bf3 	.word	0x08005bf3
 8005bc0:	08005bf3 	.word	0x08005bf3
 8005bc4:	08005bf3 	.word	0x08005bf3
 8005bc8:	08005beb 	.word	0x08005beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bcc:	f7fe fc64 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8005bd0:	61f8      	str	r0, [r7, #28]
        break;
 8005bd2:	e014      	b.n	8005bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bd4:	f7fe fc76 	bl	80044c4 <HAL_RCC_GetPCLK2Freq>
 8005bd8:	61f8      	str	r0, [r7, #28]
        break;
 8005bda:	e010      	b.n	8005bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <UART_SetConfig+0x56c>)
 8005bde:	61fb      	str	r3, [r7, #28]
        break;
 8005be0:	e00d      	b.n	8005bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005be2:	f7fe fbc1 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8005be6:	61f8      	str	r0, [r7, #28]
        break;
 8005be8:	e009      	b.n	8005bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bee:	61fb      	str	r3, [r7, #28]
        break;
 8005bf0:	e005      	b.n	8005bfe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bfc:	bf00      	nop
    }

    if (pclk != 0U)
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d019      	beq.n	8005c38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	085a      	lsrs	r2, r3, #1
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	441a      	add	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b0f      	cmp	r3, #15
 8005c1c:	d909      	bls.n	8005c32 <UART_SetConfig+0x546>
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c24:	d205      	bcs.n	8005c32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60da      	str	r2, [r3, #12]
 8005c30:	e002      	b.n	8005c38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3728      	adds	r7, #40	; 0x28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c52:	bf00      	nop
 8005c54:	40008000 	.word	0x40008000
 8005c58:	00f42400 	.word	0x00f42400

08005c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01a      	beq.n	8005d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d5a:	d10a      	bne.n	8005d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	605a      	str	r2, [r3, #4]
  }
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005db0:	f7fd f90c 	bl	8002fcc <HAL_GetTick>
 8005db4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d10e      	bne.n	8005de2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f82d 	bl	8005e32 <UART_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e023      	b.n	8005e2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d10e      	bne.n	8005e0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f817 	bl	8005e32 <UART_WaitOnFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e00d      	b.n	8005e2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b09c      	sub	sp, #112	; 0x70
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e42:	e0a5      	b.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	f000 80a1 	beq.w	8005f90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4e:	f7fd f8bd 	bl	8002fcc <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d302      	bcc.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d13e      	bne.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e78:	667b      	str	r3, [r7, #100]	; 0x64
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e6      	bne.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	663b      	str	r3, [r7, #96]	; 0x60
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005eb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e5      	bne.n	8005e96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e067      	b.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d04f      	beq.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efe:	d147      	bne.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f08:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f28:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3308      	adds	r3, #8
 8005f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f5c:	623a      	str	r2, [r7, #32]
 8005f5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	69f9      	ldr	r1, [r7, #28]
 8005f62:	6a3a      	ldr	r2, [r7, #32]
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e010      	b.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2301      	moveq	r3, #1
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	f43f af4a 	beq.w	8005e44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3770      	adds	r7, #112	; 0x70
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fba:	b084      	sub	sp, #16
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	f107 001c 	add.w	r0, r7, #28
 8005fc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fa6f 	bl	80064bc <USB_CoreReset>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ff4:	e005      	b.n	8006002 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006002:	7bfb      	ldrb	r3, [r7, #15]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800600e:	b004      	add	sp, #16
 8006010:	4770      	bx	lr

08006012 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f023 0201 	bic.w	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d115      	bne.n	8006082 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006062:	2001      	movs	r0, #1
 8006064:	f7fc ffbe 	bl	8002fe4 <HAL_Delay>
      ms++;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3301      	adds	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa16 	bl	80064a0 <USB_GetMode>
 8006074:	4603      	mov	r3, r0
 8006076:	2b01      	cmp	r3, #1
 8006078:	d01e      	beq.n	80060b8 <USB_SetCurrentMode+0x84>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b31      	cmp	r3, #49	; 0x31
 800607e:	d9f0      	bls.n	8006062 <USB_SetCurrentMode+0x2e>
 8006080:	e01a      	b.n	80060b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d115      	bne.n	80060b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006094:	2001      	movs	r0, #1
 8006096:	f7fc ffa5 	bl	8002fe4 <HAL_Delay>
      ms++;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3301      	adds	r3, #1
 800609e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f9fd 	bl	80064a0 <USB_GetMode>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <USB_SetCurrentMode+0x84>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b31      	cmp	r3, #49	; 0x31
 80060b0:	d9f0      	bls.n	8006094 <USB_SetCurrentMode+0x60>
 80060b2:	e001      	b.n	80060b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e005      	b.n	80060c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b32      	cmp	r3, #50	; 0x32
 80060bc:	d101      	bne.n	80060c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060cc:	b084      	sub	sp, #16
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b086      	sub	sp, #24
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060e6:	2300      	movs	r3, #0
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	e009      	b.n	8006100 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	3340      	adds	r3, #64	; 0x40
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	2200      	movs	r2, #0
 80060f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	3301      	adds	r3, #1
 80060fe:	613b      	str	r3, [r7, #16]
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b0e      	cmp	r3, #14
 8006104:	d9f2      	bls.n	80060ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d11c      	bne.n	8006146 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800611a:	f043 0302 	orr.w	r3, r3, #2
 800611e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e005      	b.n	8006152 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006158:	461a      	mov	r2, r3
 800615a:	2300      	movs	r3, #0
 800615c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006164:	4619      	mov	r1, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616c:	461a      	mov	r2, r3
 800616e:	680b      	ldr	r3, [r1, #0]
 8006170:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006172:	2103      	movs	r1, #3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f959 	bl	800642c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800617a:	2110      	movs	r1, #16
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f8f1 	bl	8006364 <USB_FlushTxFifo>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f91d 	bl	80063cc <USB_FlushRxFifo>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a2:	461a      	mov	r2, r3
 80061a4:	2300      	movs	r3, #0
 80061a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ae:	461a      	mov	r2, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	461a      	mov	r2, r3
 80061bc:	2300      	movs	r3, #0
 80061be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	e043      	b.n	800624e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061dc:	d118      	bne.n	8006210 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f0:	461a      	mov	r2, r3
 80061f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	e013      	b.n	8006222 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006206:	461a      	mov	r2, r3
 8006208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	e008      	b.n	8006222 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621c:	461a      	mov	r2, r3
 800621e:	2300      	movs	r3, #0
 8006220:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622e:	461a      	mov	r2, r3
 8006230:	2300      	movs	r3, #0
 8006232:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006240:	461a      	mov	r2, r3
 8006242:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006246:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	3301      	adds	r3, #1
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	429a      	cmp	r2, r3
 8006254:	d3b7      	bcc.n	80061c6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006256:	2300      	movs	r3, #0
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	e043      	b.n	80062e4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800626e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006272:	d118      	bne.n	80062a6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006286:	461a      	mov	r2, r3
 8006288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	e013      	b.n	80062b8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629c:	461a      	mov	r2, r3
 800629e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	e008      	b.n	80062b8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	461a      	mov	r2, r3
 80062b4:	2300      	movs	r3, #0
 80062b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	461a      	mov	r2, r3
 80062c6:	2300      	movs	r3, #0
 80062c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d6:	461a      	mov	r2, r3
 80062d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	3301      	adds	r3, #1
 80062e2:	613b      	str	r3, [r7, #16]
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d3b7      	bcc.n	800625c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800630c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f043 0210 	orr.w	r2, r3, #16
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	4b10      	ldr	r3, [pc, #64]	; (8006360 <USB_DevInit+0x294>)
 8006320:	4313      	orrs	r3, r2
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	f043 0208 	orr.w	r2, r3, #8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633a:	2b01      	cmp	r3, #1
 800633c:	d107      	bne.n	800634e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006346:	f043 0304 	orr.w	r3, r3, #4
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800634e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800635a:	b004      	add	sp, #16
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	803c3800 	.word	0x803c3800

08006364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <USB_FlushTxFifo+0x64>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d901      	bls.n	8006384 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e01b      	b.n	80063bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	daf2      	bge.n	8006372 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	019b      	lsls	r3, r3, #6
 8006394:	f043 0220 	orr.w	r2, r3, #32
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a08      	ldr	r2, [pc, #32]	; (80063c8 <USB_FlushTxFifo+0x64>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e006      	b.n	80063bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d0f0      	beq.n	800639c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	00030d40 	.word	0x00030d40

080063cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a11      	ldr	r2, [pc, #68]	; (8006428 <USB_FlushRxFifo+0x5c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d901      	bls.n	80063ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e018      	b.n	800641c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	daf2      	bge.n	80063d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2210      	movs	r2, #16
 80063fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3301      	adds	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a08      	ldr	r2, [pc, #32]	; (8006428 <USB_FlushRxFifo+0x5c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e006      	b.n	800641c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b10      	cmp	r3, #16
 8006418:	d0f0      	beq.n	80063fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	00030d40 	.word	0x00030d40

0800642c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800644c:	4313      	orrs	r3, r2
 800644e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800645e:	b480      	push	{r7}
 8006460:	b085      	sub	sp, #20
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006478:	f023 0303 	bic.w	r3, r3, #3
 800647c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800648c:	f043 0302 	orr.w	r3, r3, #2
 8006490:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	f003 0301 	and.w	r3, r3, #1
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3301      	adds	r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4a13      	ldr	r2, [pc, #76]	; (8006520 <USB_CoreReset+0x64>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d901      	bls.n	80064da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e01b      	b.n	8006512 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	daf2      	bge.n	80064c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f043 0201 	orr.w	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4a09      	ldr	r2, [pc, #36]	; (8006520 <USB_CoreReset+0x64>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d901      	bls.n	8006504 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e006      	b.n	8006512 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b01      	cmp	r3, #1
 800650e:	d0f0      	beq.n	80064f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	00030d40 	.word	0x00030d40

08006524 <__errno>:
 8006524:	4b01      	ldr	r3, [pc, #4]	; (800652c <__errno+0x8>)
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20000034 	.word	0x20000034

08006530 <__libc_init_array>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4d0d      	ldr	r5, [pc, #52]	; (8006568 <__libc_init_array+0x38>)
 8006534:	4c0d      	ldr	r4, [pc, #52]	; (800656c <__libc_init_array+0x3c>)
 8006536:	1b64      	subs	r4, r4, r5
 8006538:	10a4      	asrs	r4, r4, #2
 800653a:	2600      	movs	r6, #0
 800653c:	42a6      	cmp	r6, r4
 800653e:	d109      	bne.n	8006554 <__libc_init_array+0x24>
 8006540:	4d0b      	ldr	r5, [pc, #44]	; (8006570 <__libc_init_array+0x40>)
 8006542:	4c0c      	ldr	r4, [pc, #48]	; (8006574 <__libc_init_array+0x44>)
 8006544:	f001 f834 	bl	80075b0 <_init>
 8006548:	1b64      	subs	r4, r4, r5
 800654a:	10a4      	asrs	r4, r4, #2
 800654c:	2600      	movs	r6, #0
 800654e:	42a6      	cmp	r6, r4
 8006550:	d105      	bne.n	800655e <__libc_init_array+0x2e>
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	f855 3b04 	ldr.w	r3, [r5], #4
 8006558:	4798      	blx	r3
 800655a:	3601      	adds	r6, #1
 800655c:	e7ee      	b.n	800653c <__libc_init_array+0xc>
 800655e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006562:	4798      	blx	r3
 8006564:	3601      	adds	r6, #1
 8006566:	e7f2      	b.n	800654e <__libc_init_array+0x1e>
 8006568:	0801552c 	.word	0x0801552c
 800656c:	0801552c 	.word	0x0801552c
 8006570:	0801552c 	.word	0x0801552c
 8006574:	08015530 	.word	0x08015530

08006578 <malloc>:
 8006578:	4b02      	ldr	r3, [pc, #8]	; (8006584 <malloc+0xc>)
 800657a:	4601      	mov	r1, r0
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	f000 b87f 	b.w	8006680 <_malloc_r>
 8006582:	bf00      	nop
 8006584:	20000034 	.word	0x20000034

08006588 <free>:
 8006588:	4b02      	ldr	r3, [pc, #8]	; (8006594 <free+0xc>)
 800658a:	4601      	mov	r1, r0
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	f000 b80b 	b.w	80065a8 <_free_r>
 8006592:	bf00      	nop
 8006594:	20000034 	.word	0x20000034

08006598 <memset>:
 8006598:	4402      	add	r2, r0
 800659a:	4603      	mov	r3, r0
 800659c:	4293      	cmp	r3, r2
 800659e:	d100      	bne.n	80065a2 <memset+0xa>
 80065a0:	4770      	bx	lr
 80065a2:	f803 1b01 	strb.w	r1, [r3], #1
 80065a6:	e7f9      	b.n	800659c <memset+0x4>

080065a8 <_free_r>:
 80065a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065aa:	2900      	cmp	r1, #0
 80065ac:	d044      	beq.n	8006638 <_free_r+0x90>
 80065ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b2:	9001      	str	r0, [sp, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f1a1 0404 	sub.w	r4, r1, #4
 80065ba:	bfb8      	it	lt
 80065bc:	18e4      	addlt	r4, r4, r3
 80065be:	f000 fc51 	bl	8006e64 <__malloc_lock>
 80065c2:	4a1e      	ldr	r2, [pc, #120]	; (800663c <_free_r+0x94>)
 80065c4:	9801      	ldr	r0, [sp, #4]
 80065c6:	6813      	ldr	r3, [r2, #0]
 80065c8:	b933      	cbnz	r3, 80065d8 <_free_r+0x30>
 80065ca:	6063      	str	r3, [r4, #4]
 80065cc:	6014      	str	r4, [r2, #0]
 80065ce:	b003      	add	sp, #12
 80065d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065d4:	f000 bc4c 	b.w	8006e70 <__malloc_unlock>
 80065d8:	42a3      	cmp	r3, r4
 80065da:	d908      	bls.n	80065ee <_free_r+0x46>
 80065dc:	6825      	ldr	r5, [r4, #0]
 80065de:	1961      	adds	r1, r4, r5
 80065e0:	428b      	cmp	r3, r1
 80065e2:	bf01      	itttt	eq
 80065e4:	6819      	ldreq	r1, [r3, #0]
 80065e6:	685b      	ldreq	r3, [r3, #4]
 80065e8:	1949      	addeq	r1, r1, r5
 80065ea:	6021      	streq	r1, [r4, #0]
 80065ec:	e7ed      	b.n	80065ca <_free_r+0x22>
 80065ee:	461a      	mov	r2, r3
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	b10b      	cbz	r3, 80065f8 <_free_r+0x50>
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	d9fa      	bls.n	80065ee <_free_r+0x46>
 80065f8:	6811      	ldr	r1, [r2, #0]
 80065fa:	1855      	adds	r5, r2, r1
 80065fc:	42a5      	cmp	r5, r4
 80065fe:	d10b      	bne.n	8006618 <_free_r+0x70>
 8006600:	6824      	ldr	r4, [r4, #0]
 8006602:	4421      	add	r1, r4
 8006604:	1854      	adds	r4, r2, r1
 8006606:	42a3      	cmp	r3, r4
 8006608:	6011      	str	r1, [r2, #0]
 800660a:	d1e0      	bne.n	80065ce <_free_r+0x26>
 800660c:	681c      	ldr	r4, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	6053      	str	r3, [r2, #4]
 8006612:	4421      	add	r1, r4
 8006614:	6011      	str	r1, [r2, #0]
 8006616:	e7da      	b.n	80065ce <_free_r+0x26>
 8006618:	d902      	bls.n	8006620 <_free_r+0x78>
 800661a:	230c      	movs	r3, #12
 800661c:	6003      	str	r3, [r0, #0]
 800661e:	e7d6      	b.n	80065ce <_free_r+0x26>
 8006620:	6825      	ldr	r5, [r4, #0]
 8006622:	1961      	adds	r1, r4, r5
 8006624:	428b      	cmp	r3, r1
 8006626:	bf04      	itt	eq
 8006628:	6819      	ldreq	r1, [r3, #0]
 800662a:	685b      	ldreq	r3, [r3, #4]
 800662c:	6063      	str	r3, [r4, #4]
 800662e:	bf04      	itt	eq
 8006630:	1949      	addeq	r1, r1, r5
 8006632:	6021      	streq	r1, [r4, #0]
 8006634:	6054      	str	r4, [r2, #4]
 8006636:	e7ca      	b.n	80065ce <_free_r+0x26>
 8006638:	b003      	add	sp, #12
 800663a:	bd30      	pop	{r4, r5, pc}
 800663c:	200006c8 	.word	0x200006c8

08006640 <sbrk_aligned>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	4e0e      	ldr	r6, [pc, #56]	; (800667c <sbrk_aligned+0x3c>)
 8006644:	460c      	mov	r4, r1
 8006646:	6831      	ldr	r1, [r6, #0]
 8006648:	4605      	mov	r5, r0
 800664a:	b911      	cbnz	r1, 8006652 <sbrk_aligned+0x12>
 800664c:	f000 f91a 	bl	8006884 <_sbrk_r>
 8006650:	6030      	str	r0, [r6, #0]
 8006652:	4621      	mov	r1, r4
 8006654:	4628      	mov	r0, r5
 8006656:	f000 f915 	bl	8006884 <_sbrk_r>
 800665a:	1c43      	adds	r3, r0, #1
 800665c:	d00a      	beq.n	8006674 <sbrk_aligned+0x34>
 800665e:	1cc4      	adds	r4, r0, #3
 8006660:	f024 0403 	bic.w	r4, r4, #3
 8006664:	42a0      	cmp	r0, r4
 8006666:	d007      	beq.n	8006678 <sbrk_aligned+0x38>
 8006668:	1a21      	subs	r1, r4, r0
 800666a:	4628      	mov	r0, r5
 800666c:	f000 f90a 	bl	8006884 <_sbrk_r>
 8006670:	3001      	adds	r0, #1
 8006672:	d101      	bne.n	8006678 <sbrk_aligned+0x38>
 8006674:	f04f 34ff 	mov.w	r4, #4294967295
 8006678:	4620      	mov	r0, r4
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	200006cc 	.word	0x200006cc

08006680 <_malloc_r>:
 8006680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006684:	1ccd      	adds	r5, r1, #3
 8006686:	f025 0503 	bic.w	r5, r5, #3
 800668a:	3508      	adds	r5, #8
 800668c:	2d0c      	cmp	r5, #12
 800668e:	bf38      	it	cc
 8006690:	250c      	movcc	r5, #12
 8006692:	2d00      	cmp	r5, #0
 8006694:	4607      	mov	r7, r0
 8006696:	db01      	blt.n	800669c <_malloc_r+0x1c>
 8006698:	42a9      	cmp	r1, r5
 800669a:	d905      	bls.n	80066a8 <_malloc_r+0x28>
 800669c:	230c      	movs	r3, #12
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	2600      	movs	r6, #0
 80066a2:	4630      	mov	r0, r6
 80066a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a8:	4e2e      	ldr	r6, [pc, #184]	; (8006764 <_malloc_r+0xe4>)
 80066aa:	f000 fbdb 	bl	8006e64 <__malloc_lock>
 80066ae:	6833      	ldr	r3, [r6, #0]
 80066b0:	461c      	mov	r4, r3
 80066b2:	bb34      	cbnz	r4, 8006702 <_malloc_r+0x82>
 80066b4:	4629      	mov	r1, r5
 80066b6:	4638      	mov	r0, r7
 80066b8:	f7ff ffc2 	bl	8006640 <sbrk_aligned>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	4604      	mov	r4, r0
 80066c0:	d14d      	bne.n	800675e <_malloc_r+0xde>
 80066c2:	6834      	ldr	r4, [r6, #0]
 80066c4:	4626      	mov	r6, r4
 80066c6:	2e00      	cmp	r6, #0
 80066c8:	d140      	bne.n	800674c <_malloc_r+0xcc>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	4631      	mov	r1, r6
 80066ce:	4638      	mov	r0, r7
 80066d0:	eb04 0803 	add.w	r8, r4, r3
 80066d4:	f000 f8d6 	bl	8006884 <_sbrk_r>
 80066d8:	4580      	cmp	r8, r0
 80066da:	d13a      	bne.n	8006752 <_malloc_r+0xd2>
 80066dc:	6821      	ldr	r1, [r4, #0]
 80066de:	3503      	adds	r5, #3
 80066e0:	1a6d      	subs	r5, r5, r1
 80066e2:	f025 0503 	bic.w	r5, r5, #3
 80066e6:	3508      	adds	r5, #8
 80066e8:	2d0c      	cmp	r5, #12
 80066ea:	bf38      	it	cc
 80066ec:	250c      	movcc	r5, #12
 80066ee:	4629      	mov	r1, r5
 80066f0:	4638      	mov	r0, r7
 80066f2:	f7ff ffa5 	bl	8006640 <sbrk_aligned>
 80066f6:	3001      	adds	r0, #1
 80066f8:	d02b      	beq.n	8006752 <_malloc_r+0xd2>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	442b      	add	r3, r5
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	e00e      	b.n	8006720 <_malloc_r+0xa0>
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	1b52      	subs	r2, r2, r5
 8006706:	d41e      	bmi.n	8006746 <_malloc_r+0xc6>
 8006708:	2a0b      	cmp	r2, #11
 800670a:	d916      	bls.n	800673a <_malloc_r+0xba>
 800670c:	1961      	adds	r1, r4, r5
 800670e:	42a3      	cmp	r3, r4
 8006710:	6025      	str	r5, [r4, #0]
 8006712:	bf18      	it	ne
 8006714:	6059      	strne	r1, [r3, #4]
 8006716:	6863      	ldr	r3, [r4, #4]
 8006718:	bf08      	it	eq
 800671a:	6031      	streq	r1, [r6, #0]
 800671c:	5162      	str	r2, [r4, r5]
 800671e:	604b      	str	r3, [r1, #4]
 8006720:	4638      	mov	r0, r7
 8006722:	f104 060b 	add.w	r6, r4, #11
 8006726:	f000 fba3 	bl	8006e70 <__malloc_unlock>
 800672a:	f026 0607 	bic.w	r6, r6, #7
 800672e:	1d23      	adds	r3, r4, #4
 8006730:	1af2      	subs	r2, r6, r3
 8006732:	d0b6      	beq.n	80066a2 <_malloc_r+0x22>
 8006734:	1b9b      	subs	r3, r3, r6
 8006736:	50a3      	str	r3, [r4, r2]
 8006738:	e7b3      	b.n	80066a2 <_malloc_r+0x22>
 800673a:	6862      	ldr	r2, [r4, #4]
 800673c:	42a3      	cmp	r3, r4
 800673e:	bf0c      	ite	eq
 8006740:	6032      	streq	r2, [r6, #0]
 8006742:	605a      	strne	r2, [r3, #4]
 8006744:	e7ec      	b.n	8006720 <_malloc_r+0xa0>
 8006746:	4623      	mov	r3, r4
 8006748:	6864      	ldr	r4, [r4, #4]
 800674a:	e7b2      	b.n	80066b2 <_malloc_r+0x32>
 800674c:	4634      	mov	r4, r6
 800674e:	6876      	ldr	r6, [r6, #4]
 8006750:	e7b9      	b.n	80066c6 <_malloc_r+0x46>
 8006752:	230c      	movs	r3, #12
 8006754:	603b      	str	r3, [r7, #0]
 8006756:	4638      	mov	r0, r7
 8006758:	f000 fb8a 	bl	8006e70 <__malloc_unlock>
 800675c:	e7a1      	b.n	80066a2 <_malloc_r+0x22>
 800675e:	6025      	str	r5, [r4, #0]
 8006760:	e7de      	b.n	8006720 <_malloc_r+0xa0>
 8006762:	bf00      	nop
 8006764:	200006c8 	.word	0x200006c8

08006768 <iprintf>:
 8006768:	b40f      	push	{r0, r1, r2, r3}
 800676a:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <iprintf+0x2c>)
 800676c:	b513      	push	{r0, r1, r4, lr}
 800676e:	681c      	ldr	r4, [r3, #0]
 8006770:	b124      	cbz	r4, 800677c <iprintf+0x14>
 8006772:	69a3      	ldr	r3, [r4, #24]
 8006774:	b913      	cbnz	r3, 800677c <iprintf+0x14>
 8006776:	4620      	mov	r0, r4
 8006778:	f000 fa6e 	bl	8006c58 <__sinit>
 800677c:	ab05      	add	r3, sp, #20
 800677e:	9a04      	ldr	r2, [sp, #16]
 8006780:	68a1      	ldr	r1, [r4, #8]
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	4620      	mov	r0, r4
 8006786:	f000 fba3 	bl	8006ed0 <_vfiprintf_r>
 800678a:	b002      	add	sp, #8
 800678c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006790:	b004      	add	sp, #16
 8006792:	4770      	bx	lr
 8006794:	20000034 	.word	0x20000034

08006798 <_puts_r>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	460e      	mov	r6, r1
 800679c:	4605      	mov	r5, r0
 800679e:	b118      	cbz	r0, 80067a8 <_puts_r+0x10>
 80067a0:	6983      	ldr	r3, [r0, #24]
 80067a2:	b90b      	cbnz	r3, 80067a8 <_puts_r+0x10>
 80067a4:	f000 fa58 	bl	8006c58 <__sinit>
 80067a8:	69ab      	ldr	r3, [r5, #24]
 80067aa:	68ac      	ldr	r4, [r5, #8]
 80067ac:	b913      	cbnz	r3, 80067b4 <_puts_r+0x1c>
 80067ae:	4628      	mov	r0, r5
 80067b0:	f000 fa52 	bl	8006c58 <__sinit>
 80067b4:	4b2c      	ldr	r3, [pc, #176]	; (8006868 <_puts_r+0xd0>)
 80067b6:	429c      	cmp	r4, r3
 80067b8:	d120      	bne.n	80067fc <_puts_r+0x64>
 80067ba:	686c      	ldr	r4, [r5, #4]
 80067bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067be:	07db      	lsls	r3, r3, #31
 80067c0:	d405      	bmi.n	80067ce <_puts_r+0x36>
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	0598      	lsls	r0, r3, #22
 80067c6:	d402      	bmi.n	80067ce <_puts_r+0x36>
 80067c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ca:	f000 fae3 	bl	8006d94 <__retarget_lock_acquire_recursive>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	0719      	lsls	r1, r3, #28
 80067d2:	d51d      	bpl.n	8006810 <_puts_r+0x78>
 80067d4:	6923      	ldr	r3, [r4, #16]
 80067d6:	b1db      	cbz	r3, 8006810 <_puts_r+0x78>
 80067d8:	3e01      	subs	r6, #1
 80067da:	68a3      	ldr	r3, [r4, #8]
 80067dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067e0:	3b01      	subs	r3, #1
 80067e2:	60a3      	str	r3, [r4, #8]
 80067e4:	bb39      	cbnz	r1, 8006836 <_puts_r+0x9e>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da38      	bge.n	800685c <_puts_r+0xc4>
 80067ea:	4622      	mov	r2, r4
 80067ec:	210a      	movs	r1, #10
 80067ee:	4628      	mov	r0, r5
 80067f0:	f000 f858 	bl	80068a4 <__swbuf_r>
 80067f4:	3001      	adds	r0, #1
 80067f6:	d011      	beq.n	800681c <_puts_r+0x84>
 80067f8:	250a      	movs	r5, #10
 80067fa:	e011      	b.n	8006820 <_puts_r+0x88>
 80067fc:	4b1b      	ldr	r3, [pc, #108]	; (800686c <_puts_r+0xd4>)
 80067fe:	429c      	cmp	r4, r3
 8006800:	d101      	bne.n	8006806 <_puts_r+0x6e>
 8006802:	68ac      	ldr	r4, [r5, #8]
 8006804:	e7da      	b.n	80067bc <_puts_r+0x24>
 8006806:	4b1a      	ldr	r3, [pc, #104]	; (8006870 <_puts_r+0xd8>)
 8006808:	429c      	cmp	r4, r3
 800680a:	bf08      	it	eq
 800680c:	68ec      	ldreq	r4, [r5, #12]
 800680e:	e7d5      	b.n	80067bc <_puts_r+0x24>
 8006810:	4621      	mov	r1, r4
 8006812:	4628      	mov	r0, r5
 8006814:	f000 f898 	bl	8006948 <__swsetup_r>
 8006818:	2800      	cmp	r0, #0
 800681a:	d0dd      	beq.n	80067d8 <_puts_r+0x40>
 800681c:	f04f 35ff 	mov.w	r5, #4294967295
 8006820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006822:	07da      	lsls	r2, r3, #31
 8006824:	d405      	bmi.n	8006832 <_puts_r+0x9a>
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	059b      	lsls	r3, r3, #22
 800682a:	d402      	bmi.n	8006832 <_puts_r+0x9a>
 800682c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800682e:	f000 fab2 	bl	8006d96 <__retarget_lock_release_recursive>
 8006832:	4628      	mov	r0, r5
 8006834:	bd70      	pop	{r4, r5, r6, pc}
 8006836:	2b00      	cmp	r3, #0
 8006838:	da04      	bge.n	8006844 <_puts_r+0xac>
 800683a:	69a2      	ldr	r2, [r4, #24]
 800683c:	429a      	cmp	r2, r3
 800683e:	dc06      	bgt.n	800684e <_puts_r+0xb6>
 8006840:	290a      	cmp	r1, #10
 8006842:	d004      	beq.n	800684e <_puts_r+0xb6>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	6022      	str	r2, [r4, #0]
 800684a:	7019      	strb	r1, [r3, #0]
 800684c:	e7c5      	b.n	80067da <_puts_r+0x42>
 800684e:	4622      	mov	r2, r4
 8006850:	4628      	mov	r0, r5
 8006852:	f000 f827 	bl	80068a4 <__swbuf_r>
 8006856:	3001      	adds	r0, #1
 8006858:	d1bf      	bne.n	80067da <_puts_r+0x42>
 800685a:	e7df      	b.n	800681c <_puts_r+0x84>
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	250a      	movs	r5, #10
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	6022      	str	r2, [r4, #0]
 8006864:	701d      	strb	r5, [r3, #0]
 8006866:	e7db      	b.n	8006820 <_puts_r+0x88>
 8006868:	080154b0 	.word	0x080154b0
 800686c:	080154d0 	.word	0x080154d0
 8006870:	08015490 	.word	0x08015490

08006874 <puts>:
 8006874:	4b02      	ldr	r3, [pc, #8]	; (8006880 <puts+0xc>)
 8006876:	4601      	mov	r1, r0
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	f7ff bf8d 	b.w	8006798 <_puts_r>
 800687e:	bf00      	nop
 8006880:	20000034 	.word	0x20000034

08006884 <_sbrk_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d06      	ldr	r5, [pc, #24]	; (80068a0 <_sbrk_r+0x1c>)
 8006888:	2300      	movs	r3, #0
 800688a:	4604      	mov	r4, r0
 800688c:	4608      	mov	r0, r1
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	f7fc fac2 	bl	8002e18 <_sbrk>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d102      	bne.n	800689e <_sbrk_r+0x1a>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	b103      	cbz	r3, 800689e <_sbrk_r+0x1a>
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	200006d4 	.word	0x200006d4

080068a4 <__swbuf_r>:
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a6:	460e      	mov	r6, r1
 80068a8:	4614      	mov	r4, r2
 80068aa:	4605      	mov	r5, r0
 80068ac:	b118      	cbz	r0, 80068b6 <__swbuf_r+0x12>
 80068ae:	6983      	ldr	r3, [r0, #24]
 80068b0:	b90b      	cbnz	r3, 80068b6 <__swbuf_r+0x12>
 80068b2:	f000 f9d1 	bl	8006c58 <__sinit>
 80068b6:	4b21      	ldr	r3, [pc, #132]	; (800693c <__swbuf_r+0x98>)
 80068b8:	429c      	cmp	r4, r3
 80068ba:	d12b      	bne.n	8006914 <__swbuf_r+0x70>
 80068bc:	686c      	ldr	r4, [r5, #4]
 80068be:	69a3      	ldr	r3, [r4, #24]
 80068c0:	60a3      	str	r3, [r4, #8]
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	071a      	lsls	r2, r3, #28
 80068c6:	d52f      	bpl.n	8006928 <__swbuf_r+0x84>
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	b36b      	cbz	r3, 8006928 <__swbuf_r+0x84>
 80068cc:	6923      	ldr	r3, [r4, #16]
 80068ce:	6820      	ldr	r0, [r4, #0]
 80068d0:	1ac0      	subs	r0, r0, r3
 80068d2:	6963      	ldr	r3, [r4, #20]
 80068d4:	b2f6      	uxtb	r6, r6
 80068d6:	4283      	cmp	r3, r0
 80068d8:	4637      	mov	r7, r6
 80068da:	dc04      	bgt.n	80068e6 <__swbuf_r+0x42>
 80068dc:	4621      	mov	r1, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 f926 	bl	8006b30 <_fflush_r>
 80068e4:	bb30      	cbnz	r0, 8006934 <__swbuf_r+0x90>
 80068e6:	68a3      	ldr	r3, [r4, #8]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	60a3      	str	r3, [r4, #8]
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	6022      	str	r2, [r4, #0]
 80068f2:	701e      	strb	r6, [r3, #0]
 80068f4:	6963      	ldr	r3, [r4, #20]
 80068f6:	3001      	adds	r0, #1
 80068f8:	4283      	cmp	r3, r0
 80068fa:	d004      	beq.n	8006906 <__swbuf_r+0x62>
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	07db      	lsls	r3, r3, #31
 8006900:	d506      	bpl.n	8006910 <__swbuf_r+0x6c>
 8006902:	2e0a      	cmp	r6, #10
 8006904:	d104      	bne.n	8006910 <__swbuf_r+0x6c>
 8006906:	4621      	mov	r1, r4
 8006908:	4628      	mov	r0, r5
 800690a:	f000 f911 	bl	8006b30 <_fflush_r>
 800690e:	b988      	cbnz	r0, 8006934 <__swbuf_r+0x90>
 8006910:	4638      	mov	r0, r7
 8006912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006914:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <__swbuf_r+0x9c>)
 8006916:	429c      	cmp	r4, r3
 8006918:	d101      	bne.n	800691e <__swbuf_r+0x7a>
 800691a:	68ac      	ldr	r4, [r5, #8]
 800691c:	e7cf      	b.n	80068be <__swbuf_r+0x1a>
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <__swbuf_r+0xa0>)
 8006920:	429c      	cmp	r4, r3
 8006922:	bf08      	it	eq
 8006924:	68ec      	ldreq	r4, [r5, #12]
 8006926:	e7ca      	b.n	80068be <__swbuf_r+0x1a>
 8006928:	4621      	mov	r1, r4
 800692a:	4628      	mov	r0, r5
 800692c:	f000 f80c 	bl	8006948 <__swsetup_r>
 8006930:	2800      	cmp	r0, #0
 8006932:	d0cb      	beq.n	80068cc <__swbuf_r+0x28>
 8006934:	f04f 37ff 	mov.w	r7, #4294967295
 8006938:	e7ea      	b.n	8006910 <__swbuf_r+0x6c>
 800693a:	bf00      	nop
 800693c:	080154b0 	.word	0x080154b0
 8006940:	080154d0 	.word	0x080154d0
 8006944:	08015490 	.word	0x08015490

08006948 <__swsetup_r>:
 8006948:	4b32      	ldr	r3, [pc, #200]	; (8006a14 <__swsetup_r+0xcc>)
 800694a:	b570      	push	{r4, r5, r6, lr}
 800694c:	681d      	ldr	r5, [r3, #0]
 800694e:	4606      	mov	r6, r0
 8006950:	460c      	mov	r4, r1
 8006952:	b125      	cbz	r5, 800695e <__swsetup_r+0x16>
 8006954:	69ab      	ldr	r3, [r5, #24]
 8006956:	b913      	cbnz	r3, 800695e <__swsetup_r+0x16>
 8006958:	4628      	mov	r0, r5
 800695a:	f000 f97d 	bl	8006c58 <__sinit>
 800695e:	4b2e      	ldr	r3, [pc, #184]	; (8006a18 <__swsetup_r+0xd0>)
 8006960:	429c      	cmp	r4, r3
 8006962:	d10f      	bne.n	8006984 <__swsetup_r+0x3c>
 8006964:	686c      	ldr	r4, [r5, #4]
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800696c:	0719      	lsls	r1, r3, #28
 800696e:	d42c      	bmi.n	80069ca <__swsetup_r+0x82>
 8006970:	06dd      	lsls	r5, r3, #27
 8006972:	d411      	bmi.n	8006998 <__swsetup_r+0x50>
 8006974:	2309      	movs	r3, #9
 8006976:	6033      	str	r3, [r6, #0]
 8006978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	f04f 30ff 	mov.w	r0, #4294967295
 8006982:	e03e      	b.n	8006a02 <__swsetup_r+0xba>
 8006984:	4b25      	ldr	r3, [pc, #148]	; (8006a1c <__swsetup_r+0xd4>)
 8006986:	429c      	cmp	r4, r3
 8006988:	d101      	bne.n	800698e <__swsetup_r+0x46>
 800698a:	68ac      	ldr	r4, [r5, #8]
 800698c:	e7eb      	b.n	8006966 <__swsetup_r+0x1e>
 800698e:	4b24      	ldr	r3, [pc, #144]	; (8006a20 <__swsetup_r+0xd8>)
 8006990:	429c      	cmp	r4, r3
 8006992:	bf08      	it	eq
 8006994:	68ec      	ldreq	r4, [r5, #12]
 8006996:	e7e6      	b.n	8006966 <__swsetup_r+0x1e>
 8006998:	0758      	lsls	r0, r3, #29
 800699a:	d512      	bpl.n	80069c2 <__swsetup_r+0x7a>
 800699c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800699e:	b141      	cbz	r1, 80069b2 <__swsetup_r+0x6a>
 80069a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069a4:	4299      	cmp	r1, r3
 80069a6:	d002      	beq.n	80069ae <__swsetup_r+0x66>
 80069a8:	4630      	mov	r0, r6
 80069aa:	f7ff fdfd 	bl	80065a8 <_free_r>
 80069ae:	2300      	movs	r3, #0
 80069b0:	6363      	str	r3, [r4, #52]	; 0x34
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069b8:	81a3      	strh	r3, [r4, #12]
 80069ba:	2300      	movs	r3, #0
 80069bc:	6063      	str	r3, [r4, #4]
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	f043 0308 	orr.w	r3, r3, #8
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	b94b      	cbnz	r3, 80069e2 <__swsetup_r+0x9a>
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d8:	d003      	beq.n	80069e2 <__swsetup_r+0x9a>
 80069da:	4621      	mov	r1, r4
 80069dc:	4630      	mov	r0, r6
 80069de:	f000 fa01 	bl	8006de4 <__smakebuf_r>
 80069e2:	89a0      	ldrh	r0, [r4, #12]
 80069e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069e8:	f010 0301 	ands.w	r3, r0, #1
 80069ec:	d00a      	beq.n	8006a04 <__swsetup_r+0xbc>
 80069ee:	2300      	movs	r3, #0
 80069f0:	60a3      	str	r3, [r4, #8]
 80069f2:	6963      	ldr	r3, [r4, #20]
 80069f4:	425b      	negs	r3, r3
 80069f6:	61a3      	str	r3, [r4, #24]
 80069f8:	6923      	ldr	r3, [r4, #16]
 80069fa:	b943      	cbnz	r3, 8006a0e <__swsetup_r+0xc6>
 80069fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a00:	d1ba      	bne.n	8006978 <__swsetup_r+0x30>
 8006a02:	bd70      	pop	{r4, r5, r6, pc}
 8006a04:	0781      	lsls	r1, r0, #30
 8006a06:	bf58      	it	pl
 8006a08:	6963      	ldrpl	r3, [r4, #20]
 8006a0a:	60a3      	str	r3, [r4, #8]
 8006a0c:	e7f4      	b.n	80069f8 <__swsetup_r+0xb0>
 8006a0e:	2000      	movs	r0, #0
 8006a10:	e7f7      	b.n	8006a02 <__swsetup_r+0xba>
 8006a12:	bf00      	nop
 8006a14:	20000034 	.word	0x20000034
 8006a18:	080154b0 	.word	0x080154b0
 8006a1c:	080154d0 	.word	0x080154d0
 8006a20:	08015490 	.word	0x08015490

08006a24 <__sflush_r>:
 8006a24:	898a      	ldrh	r2, [r1, #12]
 8006a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	0710      	lsls	r0, r2, #28
 8006a2e:	460c      	mov	r4, r1
 8006a30:	d458      	bmi.n	8006ae4 <__sflush_r+0xc0>
 8006a32:	684b      	ldr	r3, [r1, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dc05      	bgt.n	8006a44 <__sflush_r+0x20>
 8006a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	dc02      	bgt.n	8006a44 <__sflush_r+0x20>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a46:	2e00      	cmp	r6, #0
 8006a48:	d0f9      	beq.n	8006a3e <__sflush_r+0x1a>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a50:	682f      	ldr	r7, [r5, #0]
 8006a52:	602b      	str	r3, [r5, #0]
 8006a54:	d032      	beq.n	8006abc <__sflush_r+0x98>
 8006a56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	075a      	lsls	r2, r3, #29
 8006a5c:	d505      	bpl.n	8006a6a <__sflush_r+0x46>
 8006a5e:	6863      	ldr	r3, [r4, #4]
 8006a60:	1ac0      	subs	r0, r0, r3
 8006a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a64:	b10b      	cbz	r3, 8006a6a <__sflush_r+0x46>
 8006a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a68:	1ac0      	subs	r0, r0, r3
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a70:	6a21      	ldr	r1, [r4, #32]
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b0      	blx	r6
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	d106      	bne.n	8006a8a <__sflush_r+0x66>
 8006a7c:	6829      	ldr	r1, [r5, #0]
 8006a7e:	291d      	cmp	r1, #29
 8006a80:	d82c      	bhi.n	8006adc <__sflush_r+0xb8>
 8006a82:	4a2a      	ldr	r2, [pc, #168]	; (8006b2c <__sflush_r+0x108>)
 8006a84:	40ca      	lsrs	r2, r1
 8006a86:	07d6      	lsls	r6, r2, #31
 8006a88:	d528      	bpl.n	8006adc <__sflush_r+0xb8>
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	6062      	str	r2, [r4, #4]
 8006a8e:	04d9      	lsls	r1, r3, #19
 8006a90:	6922      	ldr	r2, [r4, #16]
 8006a92:	6022      	str	r2, [r4, #0]
 8006a94:	d504      	bpl.n	8006aa0 <__sflush_r+0x7c>
 8006a96:	1c42      	adds	r2, r0, #1
 8006a98:	d101      	bne.n	8006a9e <__sflush_r+0x7a>
 8006a9a:	682b      	ldr	r3, [r5, #0]
 8006a9c:	b903      	cbnz	r3, 8006aa0 <__sflush_r+0x7c>
 8006a9e:	6560      	str	r0, [r4, #84]	; 0x54
 8006aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aa2:	602f      	str	r7, [r5, #0]
 8006aa4:	2900      	cmp	r1, #0
 8006aa6:	d0ca      	beq.n	8006a3e <__sflush_r+0x1a>
 8006aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aac:	4299      	cmp	r1, r3
 8006aae:	d002      	beq.n	8006ab6 <__sflush_r+0x92>
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	f7ff fd79 	bl	80065a8 <_free_r>
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	6360      	str	r0, [r4, #52]	; 0x34
 8006aba:	e7c1      	b.n	8006a40 <__sflush_r+0x1c>
 8006abc:	6a21      	ldr	r1, [r4, #32]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b0      	blx	r6
 8006ac4:	1c41      	adds	r1, r0, #1
 8006ac6:	d1c7      	bne.n	8006a58 <__sflush_r+0x34>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0c4      	beq.n	8006a58 <__sflush_r+0x34>
 8006ace:	2b1d      	cmp	r3, #29
 8006ad0:	d001      	beq.n	8006ad6 <__sflush_r+0xb2>
 8006ad2:	2b16      	cmp	r3, #22
 8006ad4:	d101      	bne.n	8006ada <__sflush_r+0xb6>
 8006ad6:	602f      	str	r7, [r5, #0]
 8006ad8:	e7b1      	b.n	8006a3e <__sflush_r+0x1a>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae0:	81a3      	strh	r3, [r4, #12]
 8006ae2:	e7ad      	b.n	8006a40 <__sflush_r+0x1c>
 8006ae4:	690f      	ldr	r7, [r1, #16]
 8006ae6:	2f00      	cmp	r7, #0
 8006ae8:	d0a9      	beq.n	8006a3e <__sflush_r+0x1a>
 8006aea:	0793      	lsls	r3, r2, #30
 8006aec:	680e      	ldr	r6, [r1, #0]
 8006aee:	bf08      	it	eq
 8006af0:	694b      	ldreq	r3, [r1, #20]
 8006af2:	600f      	str	r7, [r1, #0]
 8006af4:	bf18      	it	ne
 8006af6:	2300      	movne	r3, #0
 8006af8:	eba6 0807 	sub.w	r8, r6, r7
 8006afc:	608b      	str	r3, [r1, #8]
 8006afe:	f1b8 0f00 	cmp.w	r8, #0
 8006b02:	dd9c      	ble.n	8006a3e <__sflush_r+0x1a>
 8006b04:	6a21      	ldr	r1, [r4, #32]
 8006b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b08:	4643      	mov	r3, r8
 8006b0a:	463a      	mov	r2, r7
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	47b0      	blx	r6
 8006b10:	2800      	cmp	r0, #0
 8006b12:	dc06      	bgt.n	8006b22 <__sflush_r+0xfe>
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	e78e      	b.n	8006a40 <__sflush_r+0x1c>
 8006b22:	4407      	add	r7, r0
 8006b24:	eba8 0800 	sub.w	r8, r8, r0
 8006b28:	e7e9      	b.n	8006afe <__sflush_r+0xda>
 8006b2a:	bf00      	nop
 8006b2c:	20400001 	.word	0x20400001

08006b30 <_fflush_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	690b      	ldr	r3, [r1, #16]
 8006b34:	4605      	mov	r5, r0
 8006b36:	460c      	mov	r4, r1
 8006b38:	b913      	cbnz	r3, 8006b40 <_fflush_r+0x10>
 8006b3a:	2500      	movs	r5, #0
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	b118      	cbz	r0, 8006b4a <_fflush_r+0x1a>
 8006b42:	6983      	ldr	r3, [r0, #24]
 8006b44:	b90b      	cbnz	r3, 8006b4a <_fflush_r+0x1a>
 8006b46:	f000 f887 	bl	8006c58 <__sinit>
 8006b4a:	4b14      	ldr	r3, [pc, #80]	; (8006b9c <_fflush_r+0x6c>)
 8006b4c:	429c      	cmp	r4, r3
 8006b4e:	d11b      	bne.n	8006b88 <_fflush_r+0x58>
 8006b50:	686c      	ldr	r4, [r5, #4]
 8006b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0ef      	beq.n	8006b3a <_fflush_r+0xa>
 8006b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b5c:	07d0      	lsls	r0, r2, #31
 8006b5e:	d404      	bmi.n	8006b6a <_fflush_r+0x3a>
 8006b60:	0599      	lsls	r1, r3, #22
 8006b62:	d402      	bmi.n	8006b6a <_fflush_r+0x3a>
 8006b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b66:	f000 f915 	bl	8006d94 <__retarget_lock_acquire_recursive>
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	f7ff ff59 	bl	8006a24 <__sflush_r>
 8006b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b74:	07da      	lsls	r2, r3, #31
 8006b76:	4605      	mov	r5, r0
 8006b78:	d4e0      	bmi.n	8006b3c <_fflush_r+0xc>
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	059b      	lsls	r3, r3, #22
 8006b7e:	d4dd      	bmi.n	8006b3c <_fflush_r+0xc>
 8006b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b82:	f000 f908 	bl	8006d96 <__retarget_lock_release_recursive>
 8006b86:	e7d9      	b.n	8006b3c <_fflush_r+0xc>
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <_fflush_r+0x70>)
 8006b8a:	429c      	cmp	r4, r3
 8006b8c:	d101      	bne.n	8006b92 <_fflush_r+0x62>
 8006b8e:	68ac      	ldr	r4, [r5, #8]
 8006b90:	e7df      	b.n	8006b52 <_fflush_r+0x22>
 8006b92:	4b04      	ldr	r3, [pc, #16]	; (8006ba4 <_fflush_r+0x74>)
 8006b94:	429c      	cmp	r4, r3
 8006b96:	bf08      	it	eq
 8006b98:	68ec      	ldreq	r4, [r5, #12]
 8006b9a:	e7da      	b.n	8006b52 <_fflush_r+0x22>
 8006b9c:	080154b0 	.word	0x080154b0
 8006ba0:	080154d0 	.word	0x080154d0
 8006ba4:	08015490 	.word	0x08015490

08006ba8 <std>:
 8006ba8:	2300      	movs	r3, #0
 8006baa:	b510      	push	{r4, lr}
 8006bac:	4604      	mov	r4, r0
 8006bae:	e9c0 3300 	strd	r3, r3, [r0]
 8006bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bb6:	6083      	str	r3, [r0, #8]
 8006bb8:	8181      	strh	r1, [r0, #12]
 8006bba:	6643      	str	r3, [r0, #100]	; 0x64
 8006bbc:	81c2      	strh	r2, [r0, #14]
 8006bbe:	6183      	str	r3, [r0, #24]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	2208      	movs	r2, #8
 8006bc4:	305c      	adds	r0, #92	; 0x5c
 8006bc6:	f7ff fce7 	bl	8006598 <memset>
 8006bca:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <std+0x38>)
 8006bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8006bce:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <std+0x3c>)
 8006bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bd2:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <std+0x40>)
 8006bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bd6:	4b05      	ldr	r3, [pc, #20]	; (8006bec <std+0x44>)
 8006bd8:	6224      	str	r4, [r4, #32]
 8006bda:	6323      	str	r3, [r4, #48]	; 0x30
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	bf00      	nop
 8006be0:	08007459 	.word	0x08007459
 8006be4:	0800747b 	.word	0x0800747b
 8006be8:	080074b3 	.word	0x080074b3
 8006bec:	080074d7 	.word	0x080074d7

08006bf0 <_cleanup_r>:
 8006bf0:	4901      	ldr	r1, [pc, #4]	; (8006bf8 <_cleanup_r+0x8>)
 8006bf2:	f000 b8af 	b.w	8006d54 <_fwalk_reent>
 8006bf6:	bf00      	nop
 8006bf8:	08006b31 	.word	0x08006b31

08006bfc <__sfmoreglue>:
 8006bfc:	b570      	push	{r4, r5, r6, lr}
 8006bfe:	2268      	movs	r2, #104	; 0x68
 8006c00:	1e4d      	subs	r5, r1, #1
 8006c02:	4355      	muls	r5, r2
 8006c04:	460e      	mov	r6, r1
 8006c06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c0a:	f7ff fd39 	bl	8006680 <_malloc_r>
 8006c0e:	4604      	mov	r4, r0
 8006c10:	b140      	cbz	r0, 8006c24 <__sfmoreglue+0x28>
 8006c12:	2100      	movs	r1, #0
 8006c14:	e9c0 1600 	strd	r1, r6, [r0]
 8006c18:	300c      	adds	r0, #12
 8006c1a:	60a0      	str	r0, [r4, #8]
 8006c1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c20:	f7ff fcba 	bl	8006598 <memset>
 8006c24:	4620      	mov	r0, r4
 8006c26:	bd70      	pop	{r4, r5, r6, pc}

08006c28 <__sfp_lock_acquire>:
 8006c28:	4801      	ldr	r0, [pc, #4]	; (8006c30 <__sfp_lock_acquire+0x8>)
 8006c2a:	f000 b8b3 	b.w	8006d94 <__retarget_lock_acquire_recursive>
 8006c2e:	bf00      	nop
 8006c30:	200006d1 	.word	0x200006d1

08006c34 <__sfp_lock_release>:
 8006c34:	4801      	ldr	r0, [pc, #4]	; (8006c3c <__sfp_lock_release+0x8>)
 8006c36:	f000 b8ae 	b.w	8006d96 <__retarget_lock_release_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	200006d1 	.word	0x200006d1

08006c40 <__sinit_lock_acquire>:
 8006c40:	4801      	ldr	r0, [pc, #4]	; (8006c48 <__sinit_lock_acquire+0x8>)
 8006c42:	f000 b8a7 	b.w	8006d94 <__retarget_lock_acquire_recursive>
 8006c46:	bf00      	nop
 8006c48:	200006d2 	.word	0x200006d2

08006c4c <__sinit_lock_release>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	; (8006c54 <__sinit_lock_release+0x8>)
 8006c4e:	f000 b8a2 	b.w	8006d96 <__retarget_lock_release_recursive>
 8006c52:	bf00      	nop
 8006c54:	200006d2 	.word	0x200006d2

08006c58 <__sinit>:
 8006c58:	b510      	push	{r4, lr}
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	f7ff fff0 	bl	8006c40 <__sinit_lock_acquire>
 8006c60:	69a3      	ldr	r3, [r4, #24]
 8006c62:	b11b      	cbz	r3, 8006c6c <__sinit+0x14>
 8006c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c68:	f7ff bff0 	b.w	8006c4c <__sinit_lock_release>
 8006c6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c70:	6523      	str	r3, [r4, #80]	; 0x50
 8006c72:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <__sinit+0x68>)
 8006c74:	4a13      	ldr	r2, [pc, #76]	; (8006cc4 <__sinit+0x6c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c7a:	42a3      	cmp	r3, r4
 8006c7c:	bf04      	itt	eq
 8006c7e:	2301      	moveq	r3, #1
 8006c80:	61a3      	streq	r3, [r4, #24]
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 f820 	bl	8006cc8 <__sfp>
 8006c88:	6060      	str	r0, [r4, #4]
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 f81c 	bl	8006cc8 <__sfp>
 8006c90:	60a0      	str	r0, [r4, #8]
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 f818 	bl	8006cc8 <__sfp>
 8006c98:	2200      	movs	r2, #0
 8006c9a:	60e0      	str	r0, [r4, #12]
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	6860      	ldr	r0, [r4, #4]
 8006ca0:	f7ff ff82 	bl	8006ba8 <std>
 8006ca4:	68a0      	ldr	r0, [r4, #8]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	2109      	movs	r1, #9
 8006caa:	f7ff ff7d 	bl	8006ba8 <std>
 8006cae:	68e0      	ldr	r0, [r4, #12]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	2112      	movs	r1, #18
 8006cb4:	f7ff ff78 	bl	8006ba8 <std>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	61a3      	str	r3, [r4, #24]
 8006cbc:	e7d2      	b.n	8006c64 <__sinit+0xc>
 8006cbe:	bf00      	nop
 8006cc0:	0801548c 	.word	0x0801548c
 8006cc4:	08006bf1 	.word	0x08006bf1

08006cc8 <__sfp>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	4607      	mov	r7, r0
 8006ccc:	f7ff ffac 	bl	8006c28 <__sfp_lock_acquire>
 8006cd0:	4b1e      	ldr	r3, [pc, #120]	; (8006d4c <__sfp+0x84>)
 8006cd2:	681e      	ldr	r6, [r3, #0]
 8006cd4:	69b3      	ldr	r3, [r6, #24]
 8006cd6:	b913      	cbnz	r3, 8006cde <__sfp+0x16>
 8006cd8:	4630      	mov	r0, r6
 8006cda:	f7ff ffbd 	bl	8006c58 <__sinit>
 8006cde:	3648      	adds	r6, #72	; 0x48
 8006ce0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	d503      	bpl.n	8006cf0 <__sfp+0x28>
 8006ce8:	6833      	ldr	r3, [r6, #0]
 8006cea:	b30b      	cbz	r3, 8006d30 <__sfp+0x68>
 8006cec:	6836      	ldr	r6, [r6, #0]
 8006cee:	e7f7      	b.n	8006ce0 <__sfp+0x18>
 8006cf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cf4:	b9d5      	cbnz	r5, 8006d2c <__sfp+0x64>
 8006cf6:	4b16      	ldr	r3, [pc, #88]	; (8006d50 <__sfp+0x88>)
 8006cf8:	60e3      	str	r3, [r4, #12]
 8006cfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cfe:	6665      	str	r5, [r4, #100]	; 0x64
 8006d00:	f000 f847 	bl	8006d92 <__retarget_lock_init_recursive>
 8006d04:	f7ff ff96 	bl	8006c34 <__sfp_lock_release>
 8006d08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d10:	6025      	str	r5, [r4, #0]
 8006d12:	61a5      	str	r5, [r4, #24]
 8006d14:	2208      	movs	r2, #8
 8006d16:	4629      	mov	r1, r5
 8006d18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d1c:	f7ff fc3c 	bl	8006598 <memset>
 8006d20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d28:	4620      	mov	r0, r4
 8006d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d2c:	3468      	adds	r4, #104	; 0x68
 8006d2e:	e7d9      	b.n	8006ce4 <__sfp+0x1c>
 8006d30:	2104      	movs	r1, #4
 8006d32:	4638      	mov	r0, r7
 8006d34:	f7ff ff62 	bl	8006bfc <__sfmoreglue>
 8006d38:	4604      	mov	r4, r0
 8006d3a:	6030      	str	r0, [r6, #0]
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d1d5      	bne.n	8006cec <__sfp+0x24>
 8006d40:	f7ff ff78 	bl	8006c34 <__sfp_lock_release>
 8006d44:	230c      	movs	r3, #12
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	e7ee      	b.n	8006d28 <__sfp+0x60>
 8006d4a:	bf00      	nop
 8006d4c:	0801548c 	.word	0x0801548c
 8006d50:	ffff0001 	.word	0xffff0001

08006d54 <_fwalk_reent>:
 8006d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d58:	4606      	mov	r6, r0
 8006d5a:	4688      	mov	r8, r1
 8006d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d60:	2700      	movs	r7, #0
 8006d62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d66:	f1b9 0901 	subs.w	r9, r9, #1
 8006d6a:	d505      	bpl.n	8006d78 <_fwalk_reent+0x24>
 8006d6c:	6824      	ldr	r4, [r4, #0]
 8006d6e:	2c00      	cmp	r4, #0
 8006d70:	d1f7      	bne.n	8006d62 <_fwalk_reent+0xe>
 8006d72:	4638      	mov	r0, r7
 8006d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d78:	89ab      	ldrh	r3, [r5, #12]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d907      	bls.n	8006d8e <_fwalk_reent+0x3a>
 8006d7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d82:	3301      	adds	r3, #1
 8006d84:	d003      	beq.n	8006d8e <_fwalk_reent+0x3a>
 8006d86:	4629      	mov	r1, r5
 8006d88:	4630      	mov	r0, r6
 8006d8a:	47c0      	blx	r8
 8006d8c:	4307      	orrs	r7, r0
 8006d8e:	3568      	adds	r5, #104	; 0x68
 8006d90:	e7e9      	b.n	8006d66 <_fwalk_reent+0x12>

08006d92 <__retarget_lock_init_recursive>:
 8006d92:	4770      	bx	lr

08006d94 <__retarget_lock_acquire_recursive>:
 8006d94:	4770      	bx	lr

08006d96 <__retarget_lock_release_recursive>:
 8006d96:	4770      	bx	lr

08006d98 <__swhatbuf_r>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	460e      	mov	r6, r1
 8006d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da0:	2900      	cmp	r1, #0
 8006da2:	b096      	sub	sp, #88	; 0x58
 8006da4:	4614      	mov	r4, r2
 8006da6:	461d      	mov	r5, r3
 8006da8:	da08      	bge.n	8006dbc <__swhatbuf_r+0x24>
 8006daa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	602a      	str	r2, [r5, #0]
 8006db2:	061a      	lsls	r2, r3, #24
 8006db4:	d410      	bmi.n	8006dd8 <__swhatbuf_r+0x40>
 8006db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dba:	e00e      	b.n	8006dda <__swhatbuf_r+0x42>
 8006dbc:	466a      	mov	r2, sp
 8006dbe:	f000 fbb1 	bl	8007524 <_fstat_r>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	dbf1      	blt.n	8006daa <__swhatbuf_r+0x12>
 8006dc6:	9a01      	ldr	r2, [sp, #4]
 8006dc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006dcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006dd0:	425a      	negs	r2, r3
 8006dd2:	415a      	adcs	r2, r3
 8006dd4:	602a      	str	r2, [r5, #0]
 8006dd6:	e7ee      	b.n	8006db6 <__swhatbuf_r+0x1e>
 8006dd8:	2340      	movs	r3, #64	; 0x40
 8006dda:	2000      	movs	r0, #0
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	b016      	add	sp, #88	; 0x58
 8006de0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006de4 <__smakebuf_r>:
 8006de4:	898b      	ldrh	r3, [r1, #12]
 8006de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006de8:	079d      	lsls	r5, r3, #30
 8006dea:	4606      	mov	r6, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	d507      	bpl.n	8006e00 <__smakebuf_r+0x1c>
 8006df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	6123      	str	r3, [r4, #16]
 8006df8:	2301      	movs	r3, #1
 8006dfa:	6163      	str	r3, [r4, #20]
 8006dfc:	b002      	add	sp, #8
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}
 8006e00:	ab01      	add	r3, sp, #4
 8006e02:	466a      	mov	r2, sp
 8006e04:	f7ff ffc8 	bl	8006d98 <__swhatbuf_r>
 8006e08:	9900      	ldr	r1, [sp, #0]
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f7ff fc37 	bl	8006680 <_malloc_r>
 8006e12:	b948      	cbnz	r0, 8006e28 <__smakebuf_r+0x44>
 8006e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e18:	059a      	lsls	r2, r3, #22
 8006e1a:	d4ef      	bmi.n	8006dfc <__smakebuf_r+0x18>
 8006e1c:	f023 0303 	bic.w	r3, r3, #3
 8006e20:	f043 0302 	orr.w	r3, r3, #2
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	e7e3      	b.n	8006df0 <__smakebuf_r+0xc>
 8006e28:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <__smakebuf_r+0x7c>)
 8006e2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	6020      	str	r0, [r4, #0]
 8006e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e34:	81a3      	strh	r3, [r4, #12]
 8006e36:	9b00      	ldr	r3, [sp, #0]
 8006e38:	6163      	str	r3, [r4, #20]
 8006e3a:	9b01      	ldr	r3, [sp, #4]
 8006e3c:	6120      	str	r0, [r4, #16]
 8006e3e:	b15b      	cbz	r3, 8006e58 <__smakebuf_r+0x74>
 8006e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e44:	4630      	mov	r0, r6
 8006e46:	f000 fb7f 	bl	8007548 <_isatty_r>
 8006e4a:	b128      	cbz	r0, 8006e58 <__smakebuf_r+0x74>
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	f023 0303 	bic.w	r3, r3, #3
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	81a3      	strh	r3, [r4, #12]
 8006e58:	89a0      	ldrh	r0, [r4, #12]
 8006e5a:	4305      	orrs	r5, r0
 8006e5c:	81a5      	strh	r5, [r4, #12]
 8006e5e:	e7cd      	b.n	8006dfc <__smakebuf_r+0x18>
 8006e60:	08006bf1 	.word	0x08006bf1

08006e64 <__malloc_lock>:
 8006e64:	4801      	ldr	r0, [pc, #4]	; (8006e6c <__malloc_lock+0x8>)
 8006e66:	f7ff bf95 	b.w	8006d94 <__retarget_lock_acquire_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	200006d0 	.word	0x200006d0

08006e70 <__malloc_unlock>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__malloc_unlock+0x8>)
 8006e72:	f7ff bf90 	b.w	8006d96 <__retarget_lock_release_recursive>
 8006e76:	bf00      	nop
 8006e78:	200006d0 	.word	0x200006d0

08006e7c <__sfputc_r>:
 8006e7c:	6893      	ldr	r3, [r2, #8]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	b410      	push	{r4}
 8006e84:	6093      	str	r3, [r2, #8]
 8006e86:	da08      	bge.n	8006e9a <__sfputc_r+0x1e>
 8006e88:	6994      	ldr	r4, [r2, #24]
 8006e8a:	42a3      	cmp	r3, r4
 8006e8c:	db01      	blt.n	8006e92 <__sfputc_r+0x16>
 8006e8e:	290a      	cmp	r1, #10
 8006e90:	d103      	bne.n	8006e9a <__sfputc_r+0x1e>
 8006e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e96:	f7ff bd05 	b.w	80068a4 <__swbuf_r>
 8006e9a:	6813      	ldr	r3, [r2, #0]
 8006e9c:	1c58      	adds	r0, r3, #1
 8006e9e:	6010      	str	r0, [r2, #0]
 8006ea0:	7019      	strb	r1, [r3, #0]
 8006ea2:	4608      	mov	r0, r1
 8006ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <__sfputs_r>:
 8006eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eac:	4606      	mov	r6, r0
 8006eae:	460f      	mov	r7, r1
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	18d5      	adds	r5, r2, r3
 8006eb4:	42ac      	cmp	r4, r5
 8006eb6:	d101      	bne.n	8006ebc <__sfputs_r+0x12>
 8006eb8:	2000      	movs	r0, #0
 8006eba:	e007      	b.n	8006ecc <__sfputs_r+0x22>
 8006ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec0:	463a      	mov	r2, r7
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f7ff ffda 	bl	8006e7c <__sfputc_r>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d1f3      	bne.n	8006eb4 <__sfputs_r+0xa>
 8006ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ed0 <_vfiprintf_r>:
 8006ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	b09d      	sub	sp, #116	; 0x74
 8006ed8:	4614      	mov	r4, r2
 8006eda:	4698      	mov	r8, r3
 8006edc:	4606      	mov	r6, r0
 8006ede:	b118      	cbz	r0, 8006ee8 <_vfiprintf_r+0x18>
 8006ee0:	6983      	ldr	r3, [r0, #24]
 8006ee2:	b90b      	cbnz	r3, 8006ee8 <_vfiprintf_r+0x18>
 8006ee4:	f7ff feb8 	bl	8006c58 <__sinit>
 8006ee8:	4b89      	ldr	r3, [pc, #548]	; (8007110 <_vfiprintf_r+0x240>)
 8006eea:	429d      	cmp	r5, r3
 8006eec:	d11b      	bne.n	8006f26 <_vfiprintf_r+0x56>
 8006eee:	6875      	ldr	r5, [r6, #4]
 8006ef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ef2:	07d9      	lsls	r1, r3, #31
 8006ef4:	d405      	bmi.n	8006f02 <_vfiprintf_r+0x32>
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	059a      	lsls	r2, r3, #22
 8006efa:	d402      	bmi.n	8006f02 <_vfiprintf_r+0x32>
 8006efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006efe:	f7ff ff49 	bl	8006d94 <__retarget_lock_acquire_recursive>
 8006f02:	89ab      	ldrh	r3, [r5, #12]
 8006f04:	071b      	lsls	r3, r3, #28
 8006f06:	d501      	bpl.n	8006f0c <_vfiprintf_r+0x3c>
 8006f08:	692b      	ldr	r3, [r5, #16]
 8006f0a:	b9eb      	cbnz	r3, 8006f48 <_vfiprintf_r+0x78>
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f7ff fd1a 	bl	8006948 <__swsetup_r>
 8006f14:	b1c0      	cbz	r0, 8006f48 <_vfiprintf_r+0x78>
 8006f16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f18:	07dc      	lsls	r4, r3, #31
 8006f1a:	d50e      	bpl.n	8006f3a <_vfiprintf_r+0x6a>
 8006f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f20:	b01d      	add	sp, #116	; 0x74
 8006f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f26:	4b7b      	ldr	r3, [pc, #492]	; (8007114 <_vfiprintf_r+0x244>)
 8006f28:	429d      	cmp	r5, r3
 8006f2a:	d101      	bne.n	8006f30 <_vfiprintf_r+0x60>
 8006f2c:	68b5      	ldr	r5, [r6, #8]
 8006f2e:	e7df      	b.n	8006ef0 <_vfiprintf_r+0x20>
 8006f30:	4b79      	ldr	r3, [pc, #484]	; (8007118 <_vfiprintf_r+0x248>)
 8006f32:	429d      	cmp	r5, r3
 8006f34:	bf08      	it	eq
 8006f36:	68f5      	ldreq	r5, [r6, #12]
 8006f38:	e7da      	b.n	8006ef0 <_vfiprintf_r+0x20>
 8006f3a:	89ab      	ldrh	r3, [r5, #12]
 8006f3c:	0598      	lsls	r0, r3, #22
 8006f3e:	d4ed      	bmi.n	8006f1c <_vfiprintf_r+0x4c>
 8006f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f42:	f7ff ff28 	bl	8006d96 <__retarget_lock_release_recursive>
 8006f46:	e7e9      	b.n	8006f1c <_vfiprintf_r+0x4c>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f4c:	2320      	movs	r3, #32
 8006f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f56:	2330      	movs	r3, #48	; 0x30
 8006f58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800711c <_vfiprintf_r+0x24c>
 8006f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f60:	f04f 0901 	mov.w	r9, #1
 8006f64:	4623      	mov	r3, r4
 8006f66:	469a      	mov	sl, r3
 8006f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f6c:	b10a      	cbz	r2, 8006f72 <_vfiprintf_r+0xa2>
 8006f6e:	2a25      	cmp	r2, #37	; 0x25
 8006f70:	d1f9      	bne.n	8006f66 <_vfiprintf_r+0x96>
 8006f72:	ebba 0b04 	subs.w	fp, sl, r4
 8006f76:	d00b      	beq.n	8006f90 <_vfiprintf_r+0xc0>
 8006f78:	465b      	mov	r3, fp
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f7ff ff93 	bl	8006eaa <__sfputs_r>
 8006f84:	3001      	adds	r0, #1
 8006f86:	f000 80aa 	beq.w	80070de <_vfiprintf_r+0x20e>
 8006f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f8c:	445a      	add	r2, fp
 8006f8e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f90:	f89a 3000 	ldrb.w	r3, [sl]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80a2 	beq.w	80070de <_vfiprintf_r+0x20e>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fa4:	f10a 0a01 	add.w	sl, sl, #1
 8006fa8:	9304      	str	r3, [sp, #16]
 8006faa:	9307      	str	r3, [sp, #28]
 8006fac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fb0:	931a      	str	r3, [sp, #104]	; 0x68
 8006fb2:	4654      	mov	r4, sl
 8006fb4:	2205      	movs	r2, #5
 8006fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fba:	4858      	ldr	r0, [pc, #352]	; (800711c <_vfiprintf_r+0x24c>)
 8006fbc:	f7f9 f918 	bl	80001f0 <memchr>
 8006fc0:	9a04      	ldr	r2, [sp, #16]
 8006fc2:	b9d8      	cbnz	r0, 8006ffc <_vfiprintf_r+0x12c>
 8006fc4:	06d1      	lsls	r1, r2, #27
 8006fc6:	bf44      	itt	mi
 8006fc8:	2320      	movmi	r3, #32
 8006fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fce:	0713      	lsls	r3, r2, #28
 8006fd0:	bf44      	itt	mi
 8006fd2:	232b      	movmi	r3, #43	; 0x2b
 8006fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8006fde:	d015      	beq.n	800700c <_vfiprintf_r+0x13c>
 8006fe0:	9a07      	ldr	r2, [sp, #28]
 8006fe2:	4654      	mov	r4, sl
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	f04f 0c0a 	mov.w	ip, #10
 8006fea:	4621      	mov	r1, r4
 8006fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ff0:	3b30      	subs	r3, #48	; 0x30
 8006ff2:	2b09      	cmp	r3, #9
 8006ff4:	d94e      	bls.n	8007094 <_vfiprintf_r+0x1c4>
 8006ff6:	b1b0      	cbz	r0, 8007026 <_vfiprintf_r+0x156>
 8006ff8:	9207      	str	r2, [sp, #28]
 8006ffa:	e014      	b.n	8007026 <_vfiprintf_r+0x156>
 8006ffc:	eba0 0308 	sub.w	r3, r0, r8
 8007000:	fa09 f303 	lsl.w	r3, r9, r3
 8007004:	4313      	orrs	r3, r2
 8007006:	9304      	str	r3, [sp, #16]
 8007008:	46a2      	mov	sl, r4
 800700a:	e7d2      	b.n	8006fb2 <_vfiprintf_r+0xe2>
 800700c:	9b03      	ldr	r3, [sp, #12]
 800700e:	1d19      	adds	r1, r3, #4
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	9103      	str	r1, [sp, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	bfbb      	ittet	lt
 8007018:	425b      	neglt	r3, r3
 800701a:	f042 0202 	orrlt.w	r2, r2, #2
 800701e:	9307      	strge	r3, [sp, #28]
 8007020:	9307      	strlt	r3, [sp, #28]
 8007022:	bfb8      	it	lt
 8007024:	9204      	strlt	r2, [sp, #16]
 8007026:	7823      	ldrb	r3, [r4, #0]
 8007028:	2b2e      	cmp	r3, #46	; 0x2e
 800702a:	d10c      	bne.n	8007046 <_vfiprintf_r+0x176>
 800702c:	7863      	ldrb	r3, [r4, #1]
 800702e:	2b2a      	cmp	r3, #42	; 0x2a
 8007030:	d135      	bne.n	800709e <_vfiprintf_r+0x1ce>
 8007032:	9b03      	ldr	r3, [sp, #12]
 8007034:	1d1a      	adds	r2, r3, #4
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	9203      	str	r2, [sp, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	bfb8      	it	lt
 800703e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007042:	3402      	adds	r4, #2
 8007044:	9305      	str	r3, [sp, #20]
 8007046:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800712c <_vfiprintf_r+0x25c>
 800704a:	7821      	ldrb	r1, [r4, #0]
 800704c:	2203      	movs	r2, #3
 800704e:	4650      	mov	r0, sl
 8007050:	f7f9 f8ce 	bl	80001f0 <memchr>
 8007054:	b140      	cbz	r0, 8007068 <_vfiprintf_r+0x198>
 8007056:	2340      	movs	r3, #64	; 0x40
 8007058:	eba0 000a 	sub.w	r0, r0, sl
 800705c:	fa03 f000 	lsl.w	r0, r3, r0
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	4303      	orrs	r3, r0
 8007064:	3401      	adds	r4, #1
 8007066:	9304      	str	r3, [sp, #16]
 8007068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706c:	482c      	ldr	r0, [pc, #176]	; (8007120 <_vfiprintf_r+0x250>)
 800706e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007072:	2206      	movs	r2, #6
 8007074:	f7f9 f8bc 	bl	80001f0 <memchr>
 8007078:	2800      	cmp	r0, #0
 800707a:	d03f      	beq.n	80070fc <_vfiprintf_r+0x22c>
 800707c:	4b29      	ldr	r3, [pc, #164]	; (8007124 <_vfiprintf_r+0x254>)
 800707e:	bb1b      	cbnz	r3, 80070c8 <_vfiprintf_r+0x1f8>
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	3307      	adds	r3, #7
 8007084:	f023 0307 	bic.w	r3, r3, #7
 8007088:	3308      	adds	r3, #8
 800708a:	9303      	str	r3, [sp, #12]
 800708c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708e:	443b      	add	r3, r7
 8007090:	9309      	str	r3, [sp, #36]	; 0x24
 8007092:	e767      	b.n	8006f64 <_vfiprintf_r+0x94>
 8007094:	fb0c 3202 	mla	r2, ip, r2, r3
 8007098:	460c      	mov	r4, r1
 800709a:	2001      	movs	r0, #1
 800709c:	e7a5      	b.n	8006fea <_vfiprintf_r+0x11a>
 800709e:	2300      	movs	r3, #0
 80070a0:	3401      	adds	r4, #1
 80070a2:	9305      	str	r3, [sp, #20]
 80070a4:	4619      	mov	r1, r3
 80070a6:	f04f 0c0a 	mov.w	ip, #10
 80070aa:	4620      	mov	r0, r4
 80070ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070b0:	3a30      	subs	r2, #48	; 0x30
 80070b2:	2a09      	cmp	r2, #9
 80070b4:	d903      	bls.n	80070be <_vfiprintf_r+0x1ee>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0c5      	beq.n	8007046 <_vfiprintf_r+0x176>
 80070ba:	9105      	str	r1, [sp, #20]
 80070bc:	e7c3      	b.n	8007046 <_vfiprintf_r+0x176>
 80070be:	fb0c 2101 	mla	r1, ip, r1, r2
 80070c2:	4604      	mov	r4, r0
 80070c4:	2301      	movs	r3, #1
 80070c6:	e7f0      	b.n	80070aa <_vfiprintf_r+0x1da>
 80070c8:	ab03      	add	r3, sp, #12
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	462a      	mov	r2, r5
 80070ce:	4b16      	ldr	r3, [pc, #88]	; (8007128 <_vfiprintf_r+0x258>)
 80070d0:	a904      	add	r1, sp, #16
 80070d2:	4630      	mov	r0, r6
 80070d4:	f3af 8000 	nop.w
 80070d8:	4607      	mov	r7, r0
 80070da:	1c78      	adds	r0, r7, #1
 80070dc:	d1d6      	bne.n	800708c <_vfiprintf_r+0x1bc>
 80070de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070e0:	07d9      	lsls	r1, r3, #31
 80070e2:	d405      	bmi.n	80070f0 <_vfiprintf_r+0x220>
 80070e4:	89ab      	ldrh	r3, [r5, #12]
 80070e6:	059a      	lsls	r2, r3, #22
 80070e8:	d402      	bmi.n	80070f0 <_vfiprintf_r+0x220>
 80070ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ec:	f7ff fe53 	bl	8006d96 <__retarget_lock_release_recursive>
 80070f0:	89ab      	ldrh	r3, [r5, #12]
 80070f2:	065b      	lsls	r3, r3, #25
 80070f4:	f53f af12 	bmi.w	8006f1c <_vfiprintf_r+0x4c>
 80070f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070fa:	e711      	b.n	8006f20 <_vfiprintf_r+0x50>
 80070fc:	ab03      	add	r3, sp, #12
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	462a      	mov	r2, r5
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <_vfiprintf_r+0x258>)
 8007104:	a904      	add	r1, sp, #16
 8007106:	4630      	mov	r0, r6
 8007108:	f000 f880 	bl	800720c <_printf_i>
 800710c:	e7e4      	b.n	80070d8 <_vfiprintf_r+0x208>
 800710e:	bf00      	nop
 8007110:	080154b0 	.word	0x080154b0
 8007114:	080154d0 	.word	0x080154d0
 8007118:	08015490 	.word	0x08015490
 800711c:	080154f0 	.word	0x080154f0
 8007120:	080154fa 	.word	0x080154fa
 8007124:	00000000 	.word	0x00000000
 8007128:	08006eab 	.word	0x08006eab
 800712c:	080154f6 	.word	0x080154f6

08007130 <_printf_common>:
 8007130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007134:	4616      	mov	r6, r2
 8007136:	4699      	mov	r9, r3
 8007138:	688a      	ldr	r2, [r1, #8]
 800713a:	690b      	ldr	r3, [r1, #16]
 800713c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007140:	4293      	cmp	r3, r2
 8007142:	bfb8      	it	lt
 8007144:	4613      	movlt	r3, r2
 8007146:	6033      	str	r3, [r6, #0]
 8007148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800714c:	4607      	mov	r7, r0
 800714e:	460c      	mov	r4, r1
 8007150:	b10a      	cbz	r2, 8007156 <_printf_common+0x26>
 8007152:	3301      	adds	r3, #1
 8007154:	6033      	str	r3, [r6, #0]
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	0699      	lsls	r1, r3, #26
 800715a:	bf42      	ittt	mi
 800715c:	6833      	ldrmi	r3, [r6, #0]
 800715e:	3302      	addmi	r3, #2
 8007160:	6033      	strmi	r3, [r6, #0]
 8007162:	6825      	ldr	r5, [r4, #0]
 8007164:	f015 0506 	ands.w	r5, r5, #6
 8007168:	d106      	bne.n	8007178 <_printf_common+0x48>
 800716a:	f104 0a19 	add.w	sl, r4, #25
 800716e:	68e3      	ldr	r3, [r4, #12]
 8007170:	6832      	ldr	r2, [r6, #0]
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	42ab      	cmp	r3, r5
 8007176:	dc26      	bgt.n	80071c6 <_printf_common+0x96>
 8007178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800717c:	1e13      	subs	r3, r2, #0
 800717e:	6822      	ldr	r2, [r4, #0]
 8007180:	bf18      	it	ne
 8007182:	2301      	movne	r3, #1
 8007184:	0692      	lsls	r2, r2, #26
 8007186:	d42b      	bmi.n	80071e0 <_printf_common+0xb0>
 8007188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800718c:	4649      	mov	r1, r9
 800718e:	4638      	mov	r0, r7
 8007190:	47c0      	blx	r8
 8007192:	3001      	adds	r0, #1
 8007194:	d01e      	beq.n	80071d4 <_printf_common+0xa4>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	68e5      	ldr	r5, [r4, #12]
 800719a:	6832      	ldr	r2, [r6, #0]
 800719c:	f003 0306 	and.w	r3, r3, #6
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	bf08      	it	eq
 80071a4:	1aad      	subeq	r5, r5, r2
 80071a6:	68a3      	ldr	r3, [r4, #8]
 80071a8:	6922      	ldr	r2, [r4, #16]
 80071aa:	bf0c      	ite	eq
 80071ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071b0:	2500      	movne	r5, #0
 80071b2:	4293      	cmp	r3, r2
 80071b4:	bfc4      	itt	gt
 80071b6:	1a9b      	subgt	r3, r3, r2
 80071b8:	18ed      	addgt	r5, r5, r3
 80071ba:	2600      	movs	r6, #0
 80071bc:	341a      	adds	r4, #26
 80071be:	42b5      	cmp	r5, r6
 80071c0:	d11a      	bne.n	80071f8 <_printf_common+0xc8>
 80071c2:	2000      	movs	r0, #0
 80071c4:	e008      	b.n	80071d8 <_printf_common+0xa8>
 80071c6:	2301      	movs	r3, #1
 80071c8:	4652      	mov	r2, sl
 80071ca:	4649      	mov	r1, r9
 80071cc:	4638      	mov	r0, r7
 80071ce:	47c0      	blx	r8
 80071d0:	3001      	adds	r0, #1
 80071d2:	d103      	bne.n	80071dc <_printf_common+0xac>
 80071d4:	f04f 30ff 	mov.w	r0, #4294967295
 80071d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071dc:	3501      	adds	r5, #1
 80071de:	e7c6      	b.n	800716e <_printf_common+0x3e>
 80071e0:	18e1      	adds	r1, r4, r3
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	2030      	movs	r0, #48	; 0x30
 80071e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071ea:	4422      	add	r2, r4
 80071ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071f4:	3302      	adds	r3, #2
 80071f6:	e7c7      	b.n	8007188 <_printf_common+0x58>
 80071f8:	2301      	movs	r3, #1
 80071fa:	4622      	mov	r2, r4
 80071fc:	4649      	mov	r1, r9
 80071fe:	4638      	mov	r0, r7
 8007200:	47c0      	blx	r8
 8007202:	3001      	adds	r0, #1
 8007204:	d0e6      	beq.n	80071d4 <_printf_common+0xa4>
 8007206:	3601      	adds	r6, #1
 8007208:	e7d9      	b.n	80071be <_printf_common+0x8e>
	...

0800720c <_printf_i>:
 800720c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007210:	7e0f      	ldrb	r7, [r1, #24]
 8007212:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007214:	2f78      	cmp	r7, #120	; 0x78
 8007216:	4691      	mov	r9, r2
 8007218:	4680      	mov	r8, r0
 800721a:	460c      	mov	r4, r1
 800721c:	469a      	mov	sl, r3
 800721e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007222:	d807      	bhi.n	8007234 <_printf_i+0x28>
 8007224:	2f62      	cmp	r7, #98	; 0x62
 8007226:	d80a      	bhi.n	800723e <_printf_i+0x32>
 8007228:	2f00      	cmp	r7, #0
 800722a:	f000 80d8 	beq.w	80073de <_printf_i+0x1d2>
 800722e:	2f58      	cmp	r7, #88	; 0x58
 8007230:	f000 80a3 	beq.w	800737a <_printf_i+0x16e>
 8007234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800723c:	e03a      	b.n	80072b4 <_printf_i+0xa8>
 800723e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007242:	2b15      	cmp	r3, #21
 8007244:	d8f6      	bhi.n	8007234 <_printf_i+0x28>
 8007246:	a101      	add	r1, pc, #4	; (adr r1, 800724c <_printf_i+0x40>)
 8007248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800724c:	080072a5 	.word	0x080072a5
 8007250:	080072b9 	.word	0x080072b9
 8007254:	08007235 	.word	0x08007235
 8007258:	08007235 	.word	0x08007235
 800725c:	08007235 	.word	0x08007235
 8007260:	08007235 	.word	0x08007235
 8007264:	080072b9 	.word	0x080072b9
 8007268:	08007235 	.word	0x08007235
 800726c:	08007235 	.word	0x08007235
 8007270:	08007235 	.word	0x08007235
 8007274:	08007235 	.word	0x08007235
 8007278:	080073c5 	.word	0x080073c5
 800727c:	080072e9 	.word	0x080072e9
 8007280:	080073a7 	.word	0x080073a7
 8007284:	08007235 	.word	0x08007235
 8007288:	08007235 	.word	0x08007235
 800728c:	080073e7 	.word	0x080073e7
 8007290:	08007235 	.word	0x08007235
 8007294:	080072e9 	.word	0x080072e9
 8007298:	08007235 	.word	0x08007235
 800729c:	08007235 	.word	0x08007235
 80072a0:	080073af 	.word	0x080073af
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	1d1a      	adds	r2, r3, #4
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	602a      	str	r2, [r5, #0]
 80072ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072b4:	2301      	movs	r3, #1
 80072b6:	e0a3      	b.n	8007400 <_printf_i+0x1f4>
 80072b8:	6820      	ldr	r0, [r4, #0]
 80072ba:	6829      	ldr	r1, [r5, #0]
 80072bc:	0606      	lsls	r6, r0, #24
 80072be:	f101 0304 	add.w	r3, r1, #4
 80072c2:	d50a      	bpl.n	80072da <_printf_i+0xce>
 80072c4:	680e      	ldr	r6, [r1, #0]
 80072c6:	602b      	str	r3, [r5, #0]
 80072c8:	2e00      	cmp	r6, #0
 80072ca:	da03      	bge.n	80072d4 <_printf_i+0xc8>
 80072cc:	232d      	movs	r3, #45	; 0x2d
 80072ce:	4276      	negs	r6, r6
 80072d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d4:	485e      	ldr	r0, [pc, #376]	; (8007450 <_printf_i+0x244>)
 80072d6:	230a      	movs	r3, #10
 80072d8:	e019      	b.n	800730e <_printf_i+0x102>
 80072da:	680e      	ldr	r6, [r1, #0]
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072e2:	bf18      	it	ne
 80072e4:	b236      	sxthne	r6, r6
 80072e6:	e7ef      	b.n	80072c8 <_printf_i+0xbc>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	6820      	ldr	r0, [r4, #0]
 80072ec:	1d19      	adds	r1, r3, #4
 80072ee:	6029      	str	r1, [r5, #0]
 80072f0:	0601      	lsls	r1, r0, #24
 80072f2:	d501      	bpl.n	80072f8 <_printf_i+0xec>
 80072f4:	681e      	ldr	r6, [r3, #0]
 80072f6:	e002      	b.n	80072fe <_printf_i+0xf2>
 80072f8:	0646      	lsls	r6, r0, #25
 80072fa:	d5fb      	bpl.n	80072f4 <_printf_i+0xe8>
 80072fc:	881e      	ldrh	r6, [r3, #0]
 80072fe:	4854      	ldr	r0, [pc, #336]	; (8007450 <_printf_i+0x244>)
 8007300:	2f6f      	cmp	r7, #111	; 0x6f
 8007302:	bf0c      	ite	eq
 8007304:	2308      	moveq	r3, #8
 8007306:	230a      	movne	r3, #10
 8007308:	2100      	movs	r1, #0
 800730a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800730e:	6865      	ldr	r5, [r4, #4]
 8007310:	60a5      	str	r5, [r4, #8]
 8007312:	2d00      	cmp	r5, #0
 8007314:	bfa2      	ittt	ge
 8007316:	6821      	ldrge	r1, [r4, #0]
 8007318:	f021 0104 	bicge.w	r1, r1, #4
 800731c:	6021      	strge	r1, [r4, #0]
 800731e:	b90e      	cbnz	r6, 8007324 <_printf_i+0x118>
 8007320:	2d00      	cmp	r5, #0
 8007322:	d04d      	beq.n	80073c0 <_printf_i+0x1b4>
 8007324:	4615      	mov	r5, r2
 8007326:	fbb6 f1f3 	udiv	r1, r6, r3
 800732a:	fb03 6711 	mls	r7, r3, r1, r6
 800732e:	5dc7      	ldrb	r7, [r0, r7]
 8007330:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007334:	4637      	mov	r7, r6
 8007336:	42bb      	cmp	r3, r7
 8007338:	460e      	mov	r6, r1
 800733a:	d9f4      	bls.n	8007326 <_printf_i+0x11a>
 800733c:	2b08      	cmp	r3, #8
 800733e:	d10b      	bne.n	8007358 <_printf_i+0x14c>
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	07de      	lsls	r6, r3, #31
 8007344:	d508      	bpl.n	8007358 <_printf_i+0x14c>
 8007346:	6923      	ldr	r3, [r4, #16]
 8007348:	6861      	ldr	r1, [r4, #4]
 800734a:	4299      	cmp	r1, r3
 800734c:	bfde      	ittt	le
 800734e:	2330      	movle	r3, #48	; 0x30
 8007350:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007354:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007358:	1b52      	subs	r2, r2, r5
 800735a:	6122      	str	r2, [r4, #16]
 800735c:	f8cd a000 	str.w	sl, [sp]
 8007360:	464b      	mov	r3, r9
 8007362:	aa03      	add	r2, sp, #12
 8007364:	4621      	mov	r1, r4
 8007366:	4640      	mov	r0, r8
 8007368:	f7ff fee2 	bl	8007130 <_printf_common>
 800736c:	3001      	adds	r0, #1
 800736e:	d14c      	bne.n	800740a <_printf_i+0x1fe>
 8007370:	f04f 30ff 	mov.w	r0, #4294967295
 8007374:	b004      	add	sp, #16
 8007376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737a:	4835      	ldr	r0, [pc, #212]	; (8007450 <_printf_i+0x244>)
 800737c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007380:	6829      	ldr	r1, [r5, #0]
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	f851 6b04 	ldr.w	r6, [r1], #4
 8007388:	6029      	str	r1, [r5, #0]
 800738a:	061d      	lsls	r5, r3, #24
 800738c:	d514      	bpl.n	80073b8 <_printf_i+0x1ac>
 800738e:	07df      	lsls	r7, r3, #31
 8007390:	bf44      	itt	mi
 8007392:	f043 0320 	orrmi.w	r3, r3, #32
 8007396:	6023      	strmi	r3, [r4, #0]
 8007398:	b91e      	cbnz	r6, 80073a2 <_printf_i+0x196>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	f023 0320 	bic.w	r3, r3, #32
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	2310      	movs	r3, #16
 80073a4:	e7b0      	b.n	8007308 <_printf_i+0xfc>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	f043 0320 	orr.w	r3, r3, #32
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	2378      	movs	r3, #120	; 0x78
 80073b0:	4828      	ldr	r0, [pc, #160]	; (8007454 <_printf_i+0x248>)
 80073b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073b6:	e7e3      	b.n	8007380 <_printf_i+0x174>
 80073b8:	0659      	lsls	r1, r3, #25
 80073ba:	bf48      	it	mi
 80073bc:	b2b6      	uxthmi	r6, r6
 80073be:	e7e6      	b.n	800738e <_printf_i+0x182>
 80073c0:	4615      	mov	r5, r2
 80073c2:	e7bb      	b.n	800733c <_printf_i+0x130>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	6826      	ldr	r6, [r4, #0]
 80073c8:	6961      	ldr	r1, [r4, #20]
 80073ca:	1d18      	adds	r0, r3, #4
 80073cc:	6028      	str	r0, [r5, #0]
 80073ce:	0635      	lsls	r5, r6, #24
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	d501      	bpl.n	80073d8 <_printf_i+0x1cc>
 80073d4:	6019      	str	r1, [r3, #0]
 80073d6:	e002      	b.n	80073de <_printf_i+0x1d2>
 80073d8:	0670      	lsls	r0, r6, #25
 80073da:	d5fb      	bpl.n	80073d4 <_printf_i+0x1c8>
 80073dc:	8019      	strh	r1, [r3, #0]
 80073de:	2300      	movs	r3, #0
 80073e0:	6123      	str	r3, [r4, #16]
 80073e2:	4615      	mov	r5, r2
 80073e4:	e7ba      	b.n	800735c <_printf_i+0x150>
 80073e6:	682b      	ldr	r3, [r5, #0]
 80073e8:	1d1a      	adds	r2, r3, #4
 80073ea:	602a      	str	r2, [r5, #0]
 80073ec:	681d      	ldr	r5, [r3, #0]
 80073ee:	6862      	ldr	r2, [r4, #4]
 80073f0:	2100      	movs	r1, #0
 80073f2:	4628      	mov	r0, r5
 80073f4:	f7f8 fefc 	bl	80001f0 <memchr>
 80073f8:	b108      	cbz	r0, 80073fe <_printf_i+0x1f2>
 80073fa:	1b40      	subs	r0, r0, r5
 80073fc:	6060      	str	r0, [r4, #4]
 80073fe:	6863      	ldr	r3, [r4, #4]
 8007400:	6123      	str	r3, [r4, #16]
 8007402:	2300      	movs	r3, #0
 8007404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007408:	e7a8      	b.n	800735c <_printf_i+0x150>
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	462a      	mov	r2, r5
 800740e:	4649      	mov	r1, r9
 8007410:	4640      	mov	r0, r8
 8007412:	47d0      	blx	sl
 8007414:	3001      	adds	r0, #1
 8007416:	d0ab      	beq.n	8007370 <_printf_i+0x164>
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	079b      	lsls	r3, r3, #30
 800741c:	d413      	bmi.n	8007446 <_printf_i+0x23a>
 800741e:	68e0      	ldr	r0, [r4, #12]
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	4298      	cmp	r0, r3
 8007424:	bfb8      	it	lt
 8007426:	4618      	movlt	r0, r3
 8007428:	e7a4      	b.n	8007374 <_printf_i+0x168>
 800742a:	2301      	movs	r3, #1
 800742c:	4632      	mov	r2, r6
 800742e:	4649      	mov	r1, r9
 8007430:	4640      	mov	r0, r8
 8007432:	47d0      	blx	sl
 8007434:	3001      	adds	r0, #1
 8007436:	d09b      	beq.n	8007370 <_printf_i+0x164>
 8007438:	3501      	adds	r5, #1
 800743a:	68e3      	ldr	r3, [r4, #12]
 800743c:	9903      	ldr	r1, [sp, #12]
 800743e:	1a5b      	subs	r3, r3, r1
 8007440:	42ab      	cmp	r3, r5
 8007442:	dcf2      	bgt.n	800742a <_printf_i+0x21e>
 8007444:	e7eb      	b.n	800741e <_printf_i+0x212>
 8007446:	2500      	movs	r5, #0
 8007448:	f104 0619 	add.w	r6, r4, #25
 800744c:	e7f5      	b.n	800743a <_printf_i+0x22e>
 800744e:	bf00      	nop
 8007450:	08015501 	.word	0x08015501
 8007454:	08015512 	.word	0x08015512

08007458 <__sread>:
 8007458:	b510      	push	{r4, lr}
 800745a:	460c      	mov	r4, r1
 800745c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007460:	f000 f894 	bl	800758c <_read_r>
 8007464:	2800      	cmp	r0, #0
 8007466:	bfab      	itete	ge
 8007468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800746a:	89a3      	ldrhlt	r3, [r4, #12]
 800746c:	181b      	addge	r3, r3, r0
 800746e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007472:	bfac      	ite	ge
 8007474:	6563      	strge	r3, [r4, #84]	; 0x54
 8007476:	81a3      	strhlt	r3, [r4, #12]
 8007478:	bd10      	pop	{r4, pc}

0800747a <__swrite>:
 800747a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747e:	461f      	mov	r7, r3
 8007480:	898b      	ldrh	r3, [r1, #12]
 8007482:	05db      	lsls	r3, r3, #23
 8007484:	4605      	mov	r5, r0
 8007486:	460c      	mov	r4, r1
 8007488:	4616      	mov	r6, r2
 800748a:	d505      	bpl.n	8007498 <__swrite+0x1e>
 800748c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007490:	2302      	movs	r3, #2
 8007492:	2200      	movs	r2, #0
 8007494:	f000 f868 	bl	8007568 <_lseek_r>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800749e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074a2:	81a3      	strh	r3, [r4, #12]
 80074a4:	4632      	mov	r2, r6
 80074a6:	463b      	mov	r3, r7
 80074a8:	4628      	mov	r0, r5
 80074aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ae:	f000 b817 	b.w	80074e0 <_write_r>

080074b2 <__sseek>:
 80074b2:	b510      	push	{r4, lr}
 80074b4:	460c      	mov	r4, r1
 80074b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ba:	f000 f855 	bl	8007568 <_lseek_r>
 80074be:	1c43      	adds	r3, r0, #1
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	bf15      	itete	ne
 80074c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80074c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074ce:	81a3      	strheq	r3, [r4, #12]
 80074d0:	bf18      	it	ne
 80074d2:	81a3      	strhne	r3, [r4, #12]
 80074d4:	bd10      	pop	{r4, pc}

080074d6 <__sclose>:
 80074d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074da:	f000 b813 	b.w	8007504 <_close_r>
	...

080074e0 <_write_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d07      	ldr	r5, [pc, #28]	; (8007500 <_write_r+0x20>)
 80074e4:	4604      	mov	r4, r0
 80074e6:	4608      	mov	r0, r1
 80074e8:	4611      	mov	r1, r2
 80074ea:	2200      	movs	r2, #0
 80074ec:	602a      	str	r2, [r5, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f7fb fc41 	bl	8002d76 <_write>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_write_r+0x1e>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_write_r+0x1e>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	200006d4 	.word	0x200006d4

08007504 <_close_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4d06      	ldr	r5, [pc, #24]	; (8007520 <_close_r+0x1c>)
 8007508:	2300      	movs	r3, #0
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	602b      	str	r3, [r5, #0]
 8007510:	f7fb fc4d 	bl	8002dae <_close>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_close_r+0x1a>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_close_r+0x1a>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	200006d4 	.word	0x200006d4

08007524 <_fstat_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4d07      	ldr	r5, [pc, #28]	; (8007544 <_fstat_r+0x20>)
 8007528:	2300      	movs	r3, #0
 800752a:	4604      	mov	r4, r0
 800752c:	4608      	mov	r0, r1
 800752e:	4611      	mov	r1, r2
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	f7fb fc48 	bl	8002dc6 <_fstat>
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	d102      	bne.n	8007540 <_fstat_r+0x1c>
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	b103      	cbz	r3, 8007540 <_fstat_r+0x1c>
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	bd38      	pop	{r3, r4, r5, pc}
 8007542:	bf00      	nop
 8007544:	200006d4 	.word	0x200006d4

08007548 <_isatty_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4d06      	ldr	r5, [pc, #24]	; (8007564 <_isatty_r+0x1c>)
 800754c:	2300      	movs	r3, #0
 800754e:	4604      	mov	r4, r0
 8007550:	4608      	mov	r0, r1
 8007552:	602b      	str	r3, [r5, #0]
 8007554:	f7fb fc47 	bl	8002de6 <_isatty>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d102      	bne.n	8007562 <_isatty_r+0x1a>
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	b103      	cbz	r3, 8007562 <_isatty_r+0x1a>
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	bd38      	pop	{r3, r4, r5, pc}
 8007564:	200006d4 	.word	0x200006d4

08007568 <_lseek_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d07      	ldr	r5, [pc, #28]	; (8007588 <_lseek_r+0x20>)
 800756c:	4604      	mov	r4, r0
 800756e:	4608      	mov	r0, r1
 8007570:	4611      	mov	r1, r2
 8007572:	2200      	movs	r2, #0
 8007574:	602a      	str	r2, [r5, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	f7fb fc40 	bl	8002dfc <_lseek>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_lseek_r+0x1e>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_lseek_r+0x1e>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	200006d4 	.word	0x200006d4

0800758c <_read_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4d07      	ldr	r5, [pc, #28]	; (80075ac <_read_r+0x20>)
 8007590:	4604      	mov	r4, r0
 8007592:	4608      	mov	r0, r1
 8007594:	4611      	mov	r1, r2
 8007596:	2200      	movs	r2, #0
 8007598:	602a      	str	r2, [r5, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	f7fb fbce 	bl	8002d3c <_read>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_read_r+0x1e>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_read_r+0x1e>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	200006d4 	.word	0x200006d4

080075b0 <_init>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr

080075bc <_fini>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	bf00      	nop
 80075c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c2:	bc08      	pop	{r3}
 80075c4:	469e      	mov	lr, r3
 80075c6:	4770      	bx	lr
